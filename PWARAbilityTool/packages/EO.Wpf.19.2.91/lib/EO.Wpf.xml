<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EO.Wpf</name>
  </assembly>
  <members>
    <member name="T:EO.Wpf.CancelEventArgs">
      <summary>
            Provides data for a cancelable event.
            </summary>
      <remarks>
            This class is similar to <see cref="T:System.ComponentModel.CancelEventArgs">System.ComponentModel.CancelEventArgs</see>,
            but derives from <see cref="T:System.Windows.RoutedEventArgs" /> instead of from <see cref="T:System.EventArgs" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.CancelEventArgs.Canceled">
      <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
    </member>
    <member name="T:EO.Wpf.CancelEventHandler">
      <summary>
            Represents the method that handles a cancelable event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:EO.Wpf.DateRangeCollectionConverter">
      <summary>
            Convert instance of other types to and from <see cref="T:EO.Wpf.DateRange" /> instances.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.CircularGaugeFrame">
      <summary>
            Represents a control that is used to render a frame that is suitable
            for hosting <see cref="T:EO.Wpf.Gauge.CircularScale" /> objects.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.CircularGaugeFrame.#cctor">
      <summary>
            Initializes static resources of the <see cref="T:EO.Wpf.Gauge.CircularGaugeFrame" />
            class.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularGaugeFrame.KindProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularGaugeFrame.Kind" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularGaugeFrame.Kind">
      <summary>
            Gets or sets the kind of <see cref="T:EO.Wpf.Gauge.CircularGaugeFrame" /> to render.
            This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.Gauge.FrameKind" /> enumeration values. The default
            value is <see cref="F:EO.Wpf.Gauge.FrameKind.Circle" />.
            </value>
      <remarks>
        <para>
            The <see cref="T:EO.Wpf.Gauge.CircularGaugeFrame" /> can be used to render four
            kinds of frames as indicate <see cref="T:EO.Wpf.Gauge.FrameKind">here</see>.
            Additionnally other scenarios can be achieved by rotating a given
            frame.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularGaugeFrame.RotationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularGaugeFrame.Rotation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularGaugeFrame.Rotation">
      <summary>
            Gets or sets the rotation angle of this shape. This is a dependency
            property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.Media.Imaging.Rotation" />
            enumeration. The default value is 
            <see cref="F:System.Windows.Media.Imaging.Rotation.Rotate0" /></value>
      <example>
        <para>
            The <see cref="T:EO.Wpf.Gauge.Shapes.QuarterGaugeShape" /> by default renders a top-left
            Quarter, in order to create a top-right corner, you can set the 
            <see cref="P:EO.Wpf.Gauge.CircularGaugeFrame.Rotation" /> property to 
            <see cref="F:System.Windows.Media.Imaging.Rotation.Rotate90" />.
            </para>
      </example>
    </member>
    <member name="T:EO.Wpf.Gauge.FrameKind">
      <summary>
            Specifies what kind of frame the <see cref="T:EO.Wpf.Gauge.CircularGaugeFrame" /> will render.
            </summary>
      <remarks>
        <para>
            Note that for other kind of frames, Left, Right or Bottom, a 
            <see cref="T:System.Windows.Media.RotateTransform" /> should be used within the 
            <see cref="P:System.Windows.UIElement.RenderTransform" /> or 
            <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> properties.
            </para>
        <para>
            By default <see cref="F:EO.Wpf.Gauge.FrameKind.Quarter" /> will render a top-left quarter, to create frames of
            other quarters, set <see cref="P:EO.Wpf.Gauge.CircularGaugeFrame.Rotation" /> to a value other
            than <see cref="F:System.Windows.Media.Imaging.Rotation.Rotate0" />.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.FrameKind.Half">
      <summary>
            The <see cref="T:EO.Wpf.Gauge.CircularGaugeFrame" /> will appear as a half top.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.FrameKind.Quarter">
      <summary>
            The <see cref="T:EO.Wpf.Gauge.CircularGaugeFrame" /> will appear as a top-left quarter.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.FrameKind.ThreeQuarter">
      <summary>
            The <see cref="T:EO.Wpf.Gauge.CircularGaugeFrame" /> will appear as a three quarter gauge.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.FrameKind.Circle">
      <summary>
            The <see cref="T:EO.Wpf.Gauge.CircularGaugeFrame" /> will appear as a circle.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.IndicatorsPanel">
      <summary>
            Base class for all value indicators panels.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.IndicatorsPanel.UpdateMarkerLocation(EO.Wpf.Gauge.Marker)">
      <summary>
            Update the position of <see cref="T:EO.Wpf.Gauge.Marker" /> in the Panel.
            </summary>
      <param name="marker">The <see cref="T:EO.Wpf.Gauge.Marker" /></param>
    </member>
    <member name="T:EO.Wpf.Gauge.LabelPlacement">
      <summary>
            Specifies the placement of the labels in a scale relative to
            the ticks bar.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LabelPlacement.TopLeft">
      <summary>
            Labels appear above the ticks for a horizontal 
            <see cref="T:EO.Wpf.Gauge.LinearScaleBase">scale</see>, or to the left of the ticks
            for a vertical <see cref="T:EO.Wpf.Gauge.LinearScaleBase">scale</see>.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LabelPlacement.BottomRight">
      <summary>
            Labels appear below the ticks for a horizontal 
            <see cref="T:EO.Wpf.Gauge.LinearScaleBase">scale</see>, or to the right of the
            ticks for a vertical <see cref="T:EO.Wpf.Gauge.LinearScaleBase">scale</see>.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearRangeBarOptions">
      <summary>
            Represents the options class for a Rolling scale rangebar.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearRangeBarOptions.StartSizeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearRangeBarOptions.StartSize" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearRangeBarOptions.StartSize">
      <summary>
            Gets or sets the start size of the embedded range bar. This is a
            dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that indicates the start size of the
            embedded range bar. The default value is <b>1.0</b>.
            </value>
      <remarks>
        <para>
            The value of <see cref="P:EO.Wpf.Gauge.LinearRangeBarOptions.StartSize" /> can't be less than <b>0.0</b>
            or greater than <b>1.0</b>, the value will be coerced if it is set
            outside the range <b>[0.0, 1.0]</b>. When the property value is 1,
            the begining end of the range bar takes the full height of the tick 
            bar. 
            </para>
        <para>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#rangebars">here</a>
            for more information on how to use this property.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearRangeBarOptions.EndSizeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearRangeBarOptions.EndSize" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearRangeBarOptions.EndSize">
      <summary>
            Gets or sets the end size of the embedded range bar. This is a
            dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that indicates the end size of the
            embedded range bar. The default value is <b>1.0</b>.
            </value>
      <remarks>
        <para>
            The value of <see cref="P:EO.Wpf.Gauge.LinearRangeBarOptions.EndSize" /> can't be less than <b>0.0</b> or
            greater than <b>1.0</b>. The value will be coerced if it is set
            outside the range [0.0, 1.0]. When the property value is 1,
            the begining end of the range bar takes the full height of the tick 
            bar. 
            </para>
        <para>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#rangebars">here</a>
            for more information on how to use this property.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearRangeBarOptions.Default">
      <summary>
            Get an instance with the default values of <see cref="T:EO.Wpf.Gauge.LinearRangeBarOptions" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.RangeBarOptionsBase">
      <summary>
            Base options class for linear and rolling rangebar.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RangeBarOptionsBase.HorizontalOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RangeBarOptionsBase.HorizontalOffset" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RangeBarOptionsBase.HorizontalOffset">
      <summary>
            Gets or sets the horizontal offset of the embedded  range bar. This
            is a dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that represents the horizontal offset
            of the embedded rangebar. The default value is <b>0</b>.
            </value>
      <remarks>
        <para>
            In case of a horizontal linear scale, this value has no meaning.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.RangeBarOptionsBase.VerticalOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RangeBarOptionsBase.VerticalOffset" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RangeBarOptionsBase.VerticalOffset">
      <summary>
            Gets or sets the vertical offset of the embedded range bar. This is a
            dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that represents the vertical offset of
            the embedded rangebar. The default value is <b>0</b>.
            </value>
      <para>
            In case of a vertical linear scale, this value has no meaning.
            </para>
    </member>
    <member name="F:EO.Wpf.Gauge.RangeBarOptionsBase.SizeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RangeBarOptionsBase.Size" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RangeBarOptionsBase.Size">
      <summary>
            Gets or sets a value that represents the size of the embedded 
            range bar. This is a dependency property.
            </summary>
      <value>
            A positive <see cref="T:System.Double" /> value that represents the size of
            the embedded rangebar. The default value is 
            <b>10</b>.
            </value>
      <remarks>
        <para>
            Note that the <b>size</b> term here means the 
            <see cref="P:System.Windows.FrameworkElement.Width" /> of the embedded  rangebar in
            case the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.Orientation" /> is 
            <see cref="F:System.Windows.Controls.Orientation.Vertical" />, or the 
            <see cref="P:System.Windows.FrameworkElement.Height" /> in case of a 
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" />
            orientation.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.Internals.DoubleHelpers.AreClose(System.Double,System.Double)">
      <summary>
      </summary>
      <param name="value1">
      </param>
      <param name="value2">
      </param>
      <returns>True if <paramref name="value1" /> and <paramref name="value2" /> are 
            close enough to be considered equal.</returns>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearGaugeFrame">
      <summary>
            Represents a control that is used to render the frame of a set of 
            <see cref="T:EO.Wpf.Gauge.LinearScale" /> or <see cref="T:EO.Wpf.Gauge.RollingScale" /> objects.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.LinearGaugeFrame.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.LinearGaugeFrame" />
            class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearMarkerBarPanel">
      <summary>
            Represents a panel used to host <see cref="T:EO.Wpf.Gauge.ValueIndicator" /> objects for
            a <see cref="T:EO.Wpf.Gauge.LinearScale" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.CircularIndicatorsPanel">
      <summary>
            The Panel used to arrange <see cref="T:EO.Wpf.Gauge.ValueIndicator" /> objects in
            a <see cref="T:EO.Wpf.Gauge.CircularScale" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularIndicatorsPanel.MeasureData.ArrangeRadius">
      <summary>
            Represents the radius that the <see cref="T:EO.Wpf.Gauge.Marker" /> used while
            being arranged. its value is important to properly do animation
            when the marker value is changed. 
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearScaleBase">
      <summary>
            Represents the base class for <see cref="T:EO.Wpf.Gauge.LinearScale">linear</see> and 
            <see cref="T:EO.Wpf.Gauge.RollingScale">rolling</see> scales.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.ShowLineProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.ShowLine" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.ShowLine">
      <summary>
            Gets or sets a value that indicates whether a line should be
            inserted in the scale. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to insert a line in the scale; otherwise 
            <c>false</c>. The default value is <c>false</c>.
            </value>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#line">here</a>
            for more information on how to use this feature.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.LineStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.LineStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.LineStyle">
      <summary>
            Gets or sets the LineStyle property. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#line">here</a>
            for more information on how to use this feature. The target type
            of this style is <see cref="T:System.Windows.Shapes.Rectangle" />.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.ShowRangeBarProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.ShowRangeBar" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.ShowRangeBar">
      <summary>
            Gets or sets a value that indicates whether the scale's
            embedded range bar should be displayed or not.
            This is a dependency property.
            </summary>
      <value>
        <c>true</c> to display the range bar; otherwise <c>false</c>.The default value is <c>true</c>.
            </value>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#rangebars">here</a> for more information
            on how to use range bars.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.Orientation">
      <summary>
            Gets or sets the orientation of the linear scale. This is a
            dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.Controls.Orientation" />
            enumeration values. The default value is 
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.LineVerticalAlignmentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.LineVerticalAlignment" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.LineVerticalAlignment">
      <summary>
            Gets or sets the vertical alignment of the scale line. This is a
            dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.VerticalAlignment" /> enumeration values. The
            default value is <see cref="F:System.Windows.VerticalAlignment.Bottom" />.
            </value>
      <remarks>
        <para>
            Note that in order to use <c>LineVerticalAlignment</c>, the 
            <see cref="P:EO.Wpf.Gauge.LinearScaleBase.ShowLine" /> must be set to <c>true</c>. 
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#line">here</a>
            for more information about displaying a line in a linear scale.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.LineHorizontalAlignmentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.LineHorizontalAlignment" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.LineHorizontalAlignment">
      <summary>
            Gets or sets the horizontal alignment of the scale line. This is a
            dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.HorizontalAlignment" /> enumeration values. The
            default value is <see cref="F:System.Windows.HorizontalAlignment.Left" />.
            </value>
      <remarks>
        <para>
            Note that in order to use <c>LineHorizontalAlignment</c>, the 
            <see cref="P:EO.Wpf.Gauge.LinearScaleBase.ShowLine" /> must be set to <c>true</c>. 
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#line">here</a>
            for more information about displaying a line in a linear scale.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.MarkerBarSizeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MarkerBarSize" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.MarkerBarSize">
      <summary>
            Gets or sets the size of the embedded marker bar. This is a
            dependency property.
            </summary>
      <value>
            A positive <see cref="T:System.Double" /> value that represents the size of
            the embedded marker bar. The default value is <b>10</b>.
            </value>
      <remarks>
        <para>
            See <a href="Wpf/Controls/Gauge/Scale/marker.html">here</a> for more information
            on how to use markers.
            </para>
        <para>
            Note that the <b>size</b> term here means the 
            <see cref="P:System.Windows.FrameworkElement.Width" /> of marker bar in case the 
            <see cref="P:EO.Wpf.Gauge.LinearScaleBase.Orientation" /> is 
            <see cref="F:System.Windows.Controls.Orientation.Vertical" />, or the 
            <see cref="P:System.Windows.FrameworkElement.Height" /> in case of a 
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" />
            orientation.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.MarkerBarHorizontalOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MarkerBarHorizontalOffset" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.MarkerBarHorizontalOffset">
      <summary>
            Gets or sets the horizontal offset of the embedded  marker bar. This
            is a dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that represents the horizontal offset
            of the embedded marker bar. The default value is <b>0</b>.
            </value>
      <remarks>
        <para>
            See <a href="Wpf/Controls/Gauge/Scale/marker.html">here</a> for more information
            on how to use markers.
            Note that this property has no effect on the marker bar if the scale
            <see cref="P:EO.Wpf.Gauge.LinearScaleBase.Orientation" /> is set to 
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
            For vertical scales, when this property is 0, the left of the marker
            bar is aligned to the left of the tick bar. A negative value moves
            the marker bar towards the left and a positive value moves the marker bar 
            towards right.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.MarkerBarVerticalOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MarkerBarVerticalOffset" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.MarkerBarVerticalOffset">
      <summary>
            Gets or sets the vertical offset of the embedded  marker bar. This
            is a dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that represents the vertical offset of
            the embedded marker bar against the tick bar. The default value is 
            <b>0</b>. 
            </value>
      <remarks>
        <para>
            See <a href="Wpf/Controls/Gauge/Scale/marker.html">here</a> for more information
            on how to use markers.
            Note that this property has no effect on marker bar if the scale 
            <see cref="P:EO.Wpf.Gauge.LinearScaleBase.Orientation" /> is set to 
            <see cref="F:System.Windows.Controls.Orientation.Vertical" />.
            For horizontal scales, when this property is 0, the top of the marker
            bar is aligned to the top of the tick bar. A negative value moves
            the marker bar up and a positive value moves the marker bar down.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.MajorLabelOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MajorLabelOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.MajorLabelOptions">
      <summary>
            Gets or sets a <see cref="T:EO.Wpf.Gauge.MajorLinearLabelOptions" /> object that
            contains settings for major labels.  This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#labels">here</a>
            for more information on how to use labels.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.MajorTickOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MajorTickOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.MajorTickOptions">
      <summary>
            Gets or sets a <see cref="T:EO.Wpf.Gauge.MajorLinearTickOptions" /> object that
            contains settings for major ticks. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#ticks">here</a>
            for more information on how to use ticks.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.MinorTickOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MinorTickOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.MinorTickOptions">
      <summary>
            Gets or sets a <see cref="T:EO.Wpf.Gauge.MinorLinearTickOptions" /> object that
            contains settings for minor ticks. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#ticks">here</a>
            for more information on how to use ticks.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScaleBase.MinorLabelOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MinorLabelOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScaleBase.MinorLabelOptions">
      <summary>
            Gets or sets a <see cref="T:EO.Wpf.Gauge.MinorLinearLabelOptions" /> object that
            contains settings for minor labels. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#labels">here</a>
            for more information on how to use labels.
            </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.LinearScaleBase.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.LinearScaleBase" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearOptions">
      <summary>
            Base class that provides options for ticks and labels used by a 
            <see cref="T:EO.Wpf.Gauge.LinearScale" /> or a <see cref="T:EO.Wpf.Gauge.RollingScale" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearOptions.VerticalAlignmentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearOptions.VerticalAlignment" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearOptions.VerticalAlignment">
      <summary>
            Gets or sets the vertical alignment of the element.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearOptions.HorizontalAlignmentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearOptions.HorizontalAlignment" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearOptions.HorizontalAlignment">
      <summary>
            Gets or sets the horizontal alignment of the element.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearTickOptions">
      <summary>
            Base class that provides options for major and minor ticks.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearTickOptions.TypeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearTickOptions.Type" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearTickOptions.Type">
      <summary>
            Gets or sets the tickmark shape to be used. This is a dependency
            property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.Gauge.TickmarkType" /> enumeration values. The
            default value is <see cref="F:EO.Wpf.Gauge.TickmarkType.Rectangle" />.
            </value>
    </member>
    <member name="M:EO.Wpf.Gauge.LinearTickOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.LinearTickOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.Marker">
      <summary>
            Represents a control that points to a value along a 
            <see cref="T:EO.Wpf.Gauge.ScaleBase">scale</see>.
            </summary>
      <remarks>
        <para>
            Note that the <see cref="T:EO.Wpf.Gauge.Marker" /> can also be used to track a value
            along the scale, because it reacts to <see cref="P:EO.Wpf.Gauge.ValueIndicator.Value" />
            changes and updates the position accordingly.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.Marker.#cctor">
      <summary>
            Initializes static memebrs of the <see cref="T:EO.Wpf.Gauge.Marker" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.Marker.#ctor">
      <summary>
            Initialize instance members of the <see cref="T:EO.Wpf.Gauge.Marker" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.RollingMarkerBarPanel">
      <summary>
            Represents the default panel used to host <see cref="T:EO.Wpf.Gauge.ValueIndicator" />
            objects for <see cref="T:EO.Wpf.Gauge.RollingScale" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.RollingRangeBarOptions">
      <summary>
            Represents the options class for a Rolling scale rangebar.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingRangeBarOptions.Default">
      <summary>
            Gets an instance of the <see cref="T:EO.Wpf.Gauge.RollingRangeBarOptions" /> class
            with the default values.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.Shapes.BaseGaugeShape">
      <summary>
            Base class for circular gauge shapes.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.Shapes.BaseGaugeShape.PaddingProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.Padding" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.Padding">
      <summary>
            Gets or sets a value that specifies the padding of this gauge shape
            from all sides. This is a dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that specifies the distance from the
            edge. The default value is <b>0.0</b>.
            </value>
      <example>
        <para>
            The following sample demonstrates the effect of the <see cref="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.Padding" /> property:
            <code lang="XML" title="XAML">
            &lt;Window x:Class="GaugeShapes.MainWindow"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:eo="http://schemas.essentialobjects.com/wpf/"
                    Title="MainWindow" 
                    Height="300" 
                    Width="350"&gt;
                
                &lt;Grid&gt;
                    &lt;Grid Width="220" Height="220"&gt;
                        &lt;gs:QuarterGaugeShape Fill="#282923" /&gt;
                        &lt;gs:QuarterGaugeShape Fill="#3A3A38" Padding="20" /&gt;
                    &lt;/Grid&gt;
                &lt;/Grid&gt;
            
            &lt;/Window&gt;
            </code><para>
            The previous XAML markup will render the following result:
            <para><img src="images/gauge_frame1.gif" /></para></para></para>
      </example>
    </member>
    <member name="F:EO.Wpf.Gauge.Shapes.BaseGaugeShape.RotationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.Rotation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.Rotation">
      <summary>
            Gets or sets the rotation angle of this shape. This is a dependency
            property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.Media.Imaging.Rotation" />
            enumeration. The default value is 
            <see cref="F:System.Windows.Media.Imaging.Rotation.Rotate0" /></value>
      <example>
        <para>
            The <see cref="T:EO.Wpf.Gauge.Shapes.QuarterGaugeShape" /> by default renders a top-left
            Quarter, in order to create a top-right corner, you can set the 
            <see cref="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.Rotation" /> property to 
            <see cref="F:System.Windows.Media.Imaging.Rotation.Rotate90" />.
            </para>
      </example>
    </member>
    <member name="F:EO.Wpf.Gauge.Shapes.BaseGaugeShape.CapRadiusProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.CapRadius" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.CapRadius">
      <summary>
            Gets or sets the radius for the cap of the shape.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.Shapes.BaseGaugeShape.CapOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.CapOffset" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.CapOffset">
      <summary>
            Gets or sets the offset of the cap of the shape.
            </summary>
      <remarks>
        <para>
            The <see cref="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.CapOffset" /> defines the distance between the cap edge and the edge of the large curve.
            The following image demonstrates the <see cref="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.CapOffset" /> value for a <see cref="T:EO.Wpf.Gauge.Shapes.QuarterGaugeShape" />:
            </para>
        <img src="Wpf/Controls/Gauge/capoffset_quarter.gif" />
        <para>
            The following image demonstrates the <see cref="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.CapOffset" /> value for a <see cref="T:EO.Wpf.Gauge.Shapes.HalfGaugeShape" />:
            </para>
        <img src="Wpf/Controls/Gauge/capoffset_half.gif" />
        <para>
          <see cref="P:EO.Wpf.Gauge.Shapes.BaseGaugeShape.CapOffset" /> has no effect on <see cref="T:EO.Wpf.Gauge.Shapes.ThreeQuarterGaugeShape" />.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.Shapes.BaseGaugeShape.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.Shapes.BaseGaugeShape" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.Shapes.HalfGaugeShape">
      <summary>
            Represents a special shape that is used to render half gauges.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.Shapes.QuarterGaugeShape">
      <summary>
            Represents a Special shape that is used to render quarter gauges.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.Shapes.ThreeQuarterGaugeShape">
      <summary>
            Represents a special shape that is used to render three quarter gauges.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.TickBarContentPresenter">
      <summary>
            Represents a custom <see cref="T:System.Windows.Controls.ContentPresenter" /> to be used within 
            <see cref="T:EO.Wpf.Gauge.TickBarBase" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarContentPresenter.TickmarkTypeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarContentPresenter.TickmarkType" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarContentPresenter.TickmarkType">
      <summary>
            Gets or sets the tick mark type.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarContentPresenter.ShapeStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarContentPresenter.ShapeStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarContentPresenter.ShapeStyle">
      <summary>
            Gets or sets the style applied to predefined <see cref="T:System.Windows.Shapes.Shape" />s in
            this <see cref="T:EO.Wpf.Gauge.TickBarBase" />'s 
            <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" />. This is a dependency
            property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/TickBar/shape_label.html">shape and
            label</a> for more details about this property.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarContentPresenter.LabelStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarContentPresenter.LabelStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarContentPresenter.LabelStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to predefined <see cref="T:System.Windows.Controls.Label" />s in
            a <see cref="T:EO.Wpf.Gauge.TickBarBase" />'s 
            <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" />. This is a dependency
            property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/TickBar/shape_label.html">shape and
            label</a> for more details about this property.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarContentPresenter.LabelStringFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarContentPresenter.LabelStringFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarContentPresenter.LabelStringFormat">
      <summary>
            Gets or sets the content string format applied to predefined 
            <see cref="T:System.Windows.Controls.Label" />s in a <see cref="T:EO.Wpf.Gauge.TickBarBase" />'s 
            <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" />. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/TickBar/shape_label.html">shape and
            label</a> for more details about this property.
            </remarks>
    </member>
    <member name="T:EO.Wpf.Gauge.TickmarkType">
      <summary>
            Specifies the built-in shape to use for a gauge scale.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TickmarkType.None">
      <summary>
            No built-in shape is used. The tick value will be rendered using a <see cref="T:System.Windows.Controls.TextBlock" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TickmarkType.Ellipse">
      <summary>
            The tickmark value will be rendered using an <see cref="T:System.Windows.Shapes.Ellipse" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TickmarkType.Rectangle">
      <summary>
            The tickmark value will be rendered using a <see cref="T:System.Windows.Shapes.Rectangle" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TickmarkType.Triangle">
      <summary>
            The tickmark value will be rendered using a <see cref="T:System.Windows.Shapes.Path" />
            having the triangle shape in the <see cref="P:System.Windows.Shapes.Path.Data" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TickmarkType.Diamond">
      <summary>
            The tickmark value will be rendered using a <see cref="T:System.Windows.Shapes.Path" />
            having the diamond shape in the <see cref="P:System.Windows.Shapes.Path.Data" /> property.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.TicksDisplay">
      <summary>
            Specifies the display mode of a <see cref="T:EO.Wpf.Gauge.TickBarBase" /> control.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TicksDisplay.Major">
      <summary>
            Only major ticks are displayed.
            <para><img src="images/put_img_here.gif" /></para></summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TicksDisplay.Minor">
      <summary>
            Only minor ticks are displayed.
            <para><img src="images/put_img_here.gif" /></para></summary>
    </member>
    <member name="T:EO.Wpf.Gauge.CircularLabelOptions">
      <summary>
            Represents the base options class for a <see cref="T:EO.Wpf.Gauge.CircularScale" /> labels.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularLabelOptions.StringFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularLabelOptions.StringFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularLabelOptions.StringFormat">
      <summary>
            Gets or sets a composite string that specifies how to format the
            labels of a <see cref="T:EO.Wpf.Gauge.CircularScale" />. This is a dependency
            property.
            </summary>
      <value>
            A composite string that specifies how to format the
            labels of a <see cref="T:EO.Wpf.Gauge.CircularScale" />.
            </value>
      <example>
        <para>
            The following example applies the currency format to the major labels of a <see cref="T:EO.Wpf.Gauge.CircularScale" />.
            </para>
        <code lang="XML" title="XAML">
            &lt;Window x:Class="Wpf.Window3"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:eo="http://schemas.essentialobjects.com/wpf/"
                    Title="CircularScale Demo" Height="400" Width="600"&gt;
               &lt;Grid&gt;
                 &lt;eo:CircularScale Minimum="0" Maximum="100"
                                   MajorInterval="10" MinorInterval="2"
                                   Width="300" Height="300" ShowFirst="False"&gt;
                   &lt;!-- define the rings that will hold the ticks and labels --&gt;
                   &lt;eo:CircularScale.RingDefinitions&gt;
                     &lt;eo:RingDefinition Width="15" Height="15" /&gt;
                     &lt;eo:RingDefinition Width="150" Height="150" /&gt;
                   &lt;/eo:CircularScale.RingDefinitions&gt;
                   
                   &lt;eo:CircularScale.MajorLabelOptions&gt;
                     &lt;eo:MajorCircularLabelOptions Ring="1" StringFormat="c" /&gt;
                   &lt;/eo:CircularScale.MajorLabelOptions&gt;
                   
                 &lt;/eo:CircularScale&gt;
               &lt;/Grid&gt;
            &lt;/Window&gt;
            </code>
      </example>
    </member>
    <member name="M:EO.Wpf.Gauge.CircularLabelOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.CircularLabelOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.MajorCircularLabelOptions">
      <summary>
            Represents a <see cref="T:EO.Wpf.Gauge.CircularScale" /> major label options.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.MajorCircularLabelOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.MajorCircularLabelOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.MajorCircularTickOptions">
      <summary>
            Represents a <see cref="T:EO.Wpf.Gauge.CircularScale" /> major ticks option.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.MajorCircularTickOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.MajorCircularTickOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.MinorCircularLabelOptions">
      <summary>
            Represents a <see cref="T:EO.Wpf.Gauge.CircularScale" /> minor labels options.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.MinorCircularLabelOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.MinorCircularLabelOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.MinorCircularTickOptions">
      <summary>
            Represents a <see cref="T:EO.Wpf.Gauge.CircularScale" /> minor ticks option.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.MinorCircularTickOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.MinorCircularTickOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.CircularOptions">
      <summary>
            Represents the base options class for a <see cref="T:EO.Wpf.Gauge.CircularScale" /> labels and tick marks.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularOptions.RotationModeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularOptions.RotationMode" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularOptions.RotationMode">
      <summary>
            Gets or sets the rotation mode. This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.RotationMode" /> enumeration values. The
            default is <see cref="F:EO.Wpf.RotationMode.Radial" />.
            </value>
      <remarks>
        <para>
            Note that this property only applies to labels, not ticks. So it has no effect in 
            <see cref="T:EO.Wpf.Gauge.MajorCircularTickOptions" /> and 
            <see cref="T:EO.Wpf.Gauge.MinorCircularTickOptions" /> instances.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularOptions.RingAlignmentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularOptions.RingAlignment" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularOptions.RingAlignment">
      <summary>
            Gets or sets the ring alignment. This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.RingAlignment" /> enumeration values. The
            default value is <see cref="F:EO.Wpf.RingAlignment.Center" />.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularOptions.RingProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularOptions.Ring" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularOptions.Ring">
      <summary>
            Gets or sets the ring index. This is a dependency property.
            </summary>
      <value>
            The default value is <b>0</b>.
            </value>
    </member>
    <member name="T:EO.Wpf.Gauge.CircularTickOptions">
      <summary>
            Represents the base options class for a <see cref="T:EO.Wpf.Gauge.CircularScale" /> ticks.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularTickOptions.TypeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularTickOptions.Type" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularTickOptions.Type">
      <summary>
            Gets or sets the tickmark shape to be used. This is a dependency
            property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.Gauge.TickmarkType" /> enumeration values. The
            default value is <see cref="F:EO.Wpf.Gauge.TickmarkType.Rectangle" />.
            </value>
      <remarks>
        <para>
            For more information on the available tickmark types, see <see cref="T:EO.Wpf.Gauge.TickmarkType" />.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.CircularTickOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.CircularTickOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.CircularLineOptions">
      <summary>
            Provide options for circular scale line.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularLineOptions.RingAlignmentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularLineOptions.RingAlignment" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularLineOptions.RingAlignment">
      <summary>
            Gets or sets the ring alignment property. This is a dependency
            property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.RingAlignment" /> enumeration values. The
            default is <see cref="F:EO.Wpf.RingAlignment.Center" />.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularLineOptions.FillProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularLineOptions.Fill" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularLineOptions.Fill">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to fill the line area.
            This is a dependency property.
            </summary>
      <value>
            The <see cref="T:System.Windows.Media.Brush" /> used to fill the line. The default value is 
            <see cref="P:System.Windows.Media.Brushes.Black" />.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularLineOptions.WidthProperty">
      <summary>
            Identifies the <see cref="T:System.Windows.Size" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularLineOptions.Width">
      <summary>
            Gets or sets the size of the line. This is a dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that specifies the size of the line.
            The default value is <b>2.0</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularLineOptions.RingProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularLineOptions.Ring" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularLineOptions.Ring">
      <summary>
            Gets or sets the ring in which the line is placed. This is a
            dependency property.
            </summary>
      <value>
            the index of the ring on which the line is placed. The default value
            is <b>0</b>.
            </value>
      <remarks>
        <para>
            Even though the line can be placed in any ring; it should be the
            ring where ticks are placed.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularLineOptions.Default">
      <summary>
            The default instance of the <see cref="T:EO.Wpf.Gauge.CircularLineOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.Needle">
      <summary>
            Represents a value indicator for the circular gauge.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.Needle.TipWidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Needle.TipWidth" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Needle.TipWidth">
      <summary>
            Gets or sets a value that indicates the width (the thickness) of the 
            tip of the needle body. This is a dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.Needle.RearWidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Needle.RearWidth" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Needle.RearWidth">
      <summary>
            Gets or sets a value that indicates the width (the thickness) of the 
            cap end of the needle body. This is a dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.Needle.RearOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Needle.RearOffset" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Needle.RearOffset">
      <summary>
            Gets or sets the left offset of the <see cref="T:EO.Wpf.Gauge.Needle" /> body.
            This is a dependency property.
            </summary>
      <remarks>
        <see cref="P:EO.Wpf.Gauge.Needle.RearOffset" /> can be used to reserve some space between the center of the needle cap and
            the left edge of the needle body. This property is not commonly used.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.Needle.CapStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Needle.CapStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Needle.CapStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the 
            <see cref="T:EO.Wpf.Gauge.Needle" /> cap <see cref="T:System.Windows.Controls.ContentControl" /> located at the
            left edge. This is a dependency property.
            </summary>
      <value>The default value is <c>null</c>.</value>
      <remarks>
            The target type of this style is <see cref="T:System.Windows.Controls.ContentControl" />.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.Needle.CapTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Needle.CapTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Needle.CapTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> that contains the
            elements that compose the Cap content of the <see cref="T:EO.Wpf.Gauge.Needle" />.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.Needle.TipStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Needle.TipStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Needle.TipStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the 
            <see cref="T:System.Windows.Controls.ContentControl" /> placed at the tip of the 
            <see cref="T:EO.Wpf.Gauge.Needle" /> (right edge). This is a dependency property.
            </summary>
      <remarks>
            The target type of this style is <see cref="T:System.Windows.Controls.ContentControl" />.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.Needle.TipTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Needle.TipTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Needle.TipTemplate">
      <summary>
            Gets or sets the elements that compose the tip of the 
            <see cref="T:EO.Wpf.Gauge.Needle" />. This is a dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.Needle.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.Needle" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.Needle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Gauge.Needle" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.CircularScale">
      <summary>
            Represents a circular scale. 
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.StartAngleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.StartAngle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.StartAngle">
      <summary>
            Gets or sets a value that indicates the start angle of scale. This is a dependency property.
            </summary>
      <value>
            The default value is 0.
            </value>
      <remarks>
        <para>
            A circular scale starts at the value specified by the value of <c>StartAngle</c> and ends at the value 
            specified by the value of <see cref="P:EO.Wpf.Gauge.CircularScale.EndAngle" />.
            </para>
        <para>
            Note that the values of the angle increase clockwise and decrease counterclockwise.
            </para>
        <para>
            The following XAML code demonstrates how to create a half-top gauge scale:
            <code lang="XML" title="XAML">
            &lt;eo:CircularScale Minimum="0" Maximum="12" 
                MajorInterval="1" ShowMinorTicks="false" StartAngle="180" EndAngle="360" /&gt;
            </code></para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.EndAngleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.EndAngle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.EndAngle">
      <summary>
            Gets or sets the EndAngle property. This is a dependency property.
            </summary>
      <value>
            The default value is 180.
            </value>
      <remarks>
        <para>
            The <c>EndAngle</c> behaves in the same manner <see cref="P:EO.Wpf.Gauge.CircularScale.StartAngle" /> does. for more
            information see <see cref="P:EO.Wpf.Gauge.CircularScale.StartAngle" />.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.ShowLineProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.ShowLine" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.ShowLine">
      <summary>
            Gets or sets a value that indicates whether a line is displayed
            along the major and minor ticks interval. This is a dependency
            property.
            </summary>
      <value>
        <c>true</c> to show a line along the ticks interval; otherwise 
            <c>false</c>. The default value is <c>false</c>.
            </value>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/circular_scale.html#line">here</a>
            for more information on how to customize the line.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.RangeBarRingProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.RangeBarRing" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.RangeBarRing">
      <summary>
            Gets or sets a 0 based value that indicates the ring index of the
            scale's ranges bar. This is a dependency property.
            </summary>
      <value>
            A 0-based index value that specifies the ring index of the scale's
            ranges bar. The default value is <b>0</b>. 
            See <a href="Wpf/Controls/Gauge/Scale/circular_scale.html#ring">here</a>
            for more information about rings.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.OriginXProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.OriginX" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.OriginX">
      <summary>
            Gets or sets the center of the rings on x-axis. This is a dependency property.
            </summary>
      <remarks>
            The default value is 50%, which represents the center of the control.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.OriginYProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.OriginY" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.OriginY">
      <summary>
            Gets or sets the center of the rings on y-axis. This is a dependency property.
            </summary>
      <remarks>
            The default value is 50%, which represents the center of the control.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.LineOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.LineOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.LineOptions">
      <summary>
            Gets or sets the <see cref="P:EO.Wpf.Gauge.CircularScale.LineOptions" /> object that contains settings for an optional
            line the scale can display. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/circular_scale.html#line">here</a>
            for more information on how to customize the line.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.MajorLabelOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.MajorLabelOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.MajorLabelOptions">
      <summary>
            Gets or sets the <see cref="T:EO.Wpf.Gauge.MajorCircularLabelOptions" /> object
            that contains settings for the major labels. This is a dependency
            property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/circular_scale.html#labels">here</a>
            for more information on how to customize labels.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.MajorTickOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.MajorTickOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.MajorTickOptions">
      <summary>
            Gets or sets the <see cref="T:EO.Wpf.Gauge.MajorCircularTickOptions" /> object
            that contains settings for the major ticks. This is a dependency
            property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/circular_scale.html#ticks">here</a>
            for more information on how to customize ticks.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.MinorLabelOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.MinorLabelOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.MinorLabelOptions">
      <summary>
            Gets or sets the <see cref="T:EO.Wpf.Gauge.MinorCircularLabelOptions" /> object
            that contains settings for the minor labels. This is a dependency
            property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/circular_scale.html#labels">here</a>
            for more information on how to customize labels.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.MinorTickOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.MinorTickOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.MinorTickOptions">
      <summary>
            Gets or sets the <see cref="T:EO.Wpf.Gauge.MinorCircularTickOptions" /> object
            that contains settings for the minor ticks. This is a dependency
            property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/circular_scale.html#ticks">here</a>
            for more information on how to customize ticks.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularScale.ShowRingsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularScale.ShowRings" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.ShowRings">
      <summary>
            Gets or sets the <see cref="P:EO.Wpf.RadialPanel.ShowRings" /> property of the <see cref="P:EO.Wpf.Gauge.CircularScale.ScalePanel" />
            used by this <see cref="T:EO.Wpf.Gauge.CircularScale" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularScale.RingDefinitions">
      <summary>
            Returns a <see cref="T:EO.Wpf.RingDefinitionCollection" /> of <see cref="T:EO.Wpf.RingDefinition" />.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/circular_scale.html#ring">here</a>
            for more information about rings.
            </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.CircularScale.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.CircularScale" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.CircularScale.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Gauge.CircularScale" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.CircularScale.InvalidateScaleParts">
      <summary>
            this routine invalidate the elements that compose the scale
            except the radial panel
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.CircularScale.ComputeOrigin(System.Windows.Size)">
      <summary>
            Computes the Panel Origin point. [Copied from the RadialPanel]
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.CircularScale.Tickmark">
      <summary>
            A class that encapsulate an <see cref="T:EO.Wpf.Gauge.CircularScale" /> tickmark.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.CircularScale.TickmarkCollection.ClearItems">
      <summary>
            Clears the content of <see cref="T:EO.Wpf.Gauge.CircularScale.TickmarkCollection" />; raises 
            a CollectionChanged event to any listeners.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.CircularScaleItemsGenerator">
      <summary>
            An <see cref="T:EO.Wpf.Gauge.CircularScaleItemsGenerator" /> is responsible for generating the UI elements
            on behalf of the <see cref="T:EO.Wpf.Gauge.CircularScale" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearLabelOptions">
      <summary>
            Represents the base class for <see cref="T:EO.Wpf.Gauge.MajorLinearLabelOptions" /> and <see cref="T:EO.Wpf.Gauge.MinorLinearLabelOptions" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearLabelOptions.PlacementProperty">
      <summary>
            Identifies the <see cref="T:EO.Wpf.Gauge.LabelPlacement" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearLabelOptions.Placement">
      <summary>
            Gets or sets the placement of major labels or minor labels
            relative to the scale tick bar. This is a dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearLabelOptions.StringFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearLabelOptions.StringFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearLabelOptions.StringFormat">
      <summary>
            Gets or sets a composite string that specifies how to format the
            tick value of each label. This is a dependency property.
            </summary>
      <value>
            A composite string that specifies how to format the label value. The
            default value is <c>null</c>.
            </value>
      <remarks>
        <para>
            The following XAML creates a <see cref="T:EO.Wpf.Gauge.LinearScale" /> and format
            the major labels as currency values:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:LinearScale&gt;
               &lt;eo:LinearScale.MajorLabelOptions&gt;
                   &lt;eo:MajorLabelOptions StringFormat="{}{0:c}" /&gt;
               &lt;/eo:LinearScale.MajorLabelOptions&gt;
            &lt;/eo:LinearScale&gt;
            </code>
      </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.LinearLabelOptions.#cctor">
      <summary>
            Initializes static memebrs of the <see cref="T:EO.Wpf.Gauge.LinearLabelOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearRangeBar">
      <summary>
            Represents a linear range bar.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearRangeBar.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearRangeBar.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearRangeBar.Orientation">
      <summary>
            Gets or sets the orientation of the <b>LinearRangeBar</b>. This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.Controls.Orientation" /> enumeration values.
            The default is <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearRangeBar.StartSizeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearRangeBar.StartSize" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearRangeBar.StartSize">
      <summary>
            Gets or sets a value that indicates the percentage of the entire width/height to
            draw. This is a dependency property.
            </summary>
      <remarks>
        <para>Note that:</para>
        <list type="table">
          <item>
            <term>
                    If <see cref="P:EO.Wpf.Gauge.LinearRangeBar.Orientation" /> is set to <see cref="F:System.Windows.Controls.Orientation.Horizontal" /> and <see cref="P:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversed" /> = <c>false</c>, 
                    <b>SatrtSize</b> affects the the left height of the <see cref="T:EO.Wpf.Gauge.LinearRangeBar" />.
                    </term>
            <description>
              <img src="images/putImage.gif">
              </img>
            </description>
          </item>
          <item>
            <term>
                    If <see cref="P:EO.Wpf.Gauge.LinearRangeBar.Orientation" /> is set to <see cref="F:System.Windows.Controls.Orientation.Horizontal" /> and <see cref="P:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversed" /> =
                    <c>true</c>, <b>SatrtSize</b> affects the the right height of the <see cref="T:EO.Wpf.Gauge.LinearRangeBar" />.
                    </term>
            <description>
              <img src="images/putImage.gif">
              </img>
            </description>
          </item>
          <item>
            <term>
                    If <see cref="P:EO.Wpf.Gauge.LinearRangeBar.Orientation" /> is set to <see cref="F:System.Windows.Controls.Orientation.Vertical" /> and <see cref="P:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversed" /> =
                    <c>false</c>, <b>SatrtSize</b> affects the the bottom width of the <see cref="T:EO.Wpf.Gauge.LinearRangeBar" />.
                    </term>
            <description>
              <img src="images/putImage.gif">
              </img>
            </description>
          </item>
          <item>
            <term>
                    If <see cref="P:EO.Wpf.Gauge.LinearRangeBar.Orientation" /> is set to <see cref="F:System.Windows.Controls.Orientation.Vertical" /> and <see cref="P:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversed" /> = <c>true</c>,
                    <b>SatrtSize</b> affects the the top width of the <see cref="T:EO.Wpf.Gauge.LinearRangeBar" />.
                    </term>
            <description>
              <img src="images/putImage.gif">
              </img>
            </description>
          </item>
        </list>
      </remarks>
      <value>
            A value that indicates the percentage of the entire width/height to draw. The
            default value is <b>1.0</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearRangeBar.EndSizeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearRangeBar.EndSize" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearRangeBar.EndSize">
      <summary>
            Gets or sets a value that indicates a percentage of the entire
            width/height to draw. This is a dependency property.
            </summary>
      <value>
            A value that indicates a percentage of the entire width/height to
            draw. The default value is <b>1.0</b>.
            </value>
      <remarks>
        <para>
            Note that the <c>EndSize</c> property value affects the right height
            of the <see cref="T:EO.Wpf.Gauge.LinearRangeBar" /> in case 
            <see cref="P:EO.Wpf.Gauge.LinearRangeBar.Orientation" /> is set to <b>Horizontal</b> and 
            <see cref="P:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversed" /> is set to 
            <c>false</c>, if <see cref="P:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversed" /> is
            set <c>true</c> it will affect the right height. If 
            <see cref="P:EO.Wpf.Gauge.LinearRangeBar.Orientation" /> is set to <b>Vertical</b> and 
            <see cref="P:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversed" /> is set to 
            <c>false</c> The <b>EndSize</b> property will affect the bottom
            width, and if <see cref="P:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversed" /> is set
            to <c>true</c> it will affect the top width.
            </para>
      </remarks>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearScale">
      <summary>
            Represents a linear scale.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearScale.RangeBarOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearScale.RangeBarOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearScale.RangeBarOptions">
      <summary>
            Gets or sets the range bar options. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#rangebars">here</a>
            for more information on how to use range bars.
            </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.LinearScale.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.LinearScale" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.MajorLinearLabelOptions">
      <summary>
            Represents the options class of a <see cref="T:EO.Wpf.Gauge.LinearScale" /> or 
            <see cref="T:EO.Wpf.Gauge.RollingScale" /> major labels.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.MajorLinearLabelOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.MajorLinearLabelOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.MajorLinearTickOptions">
      <summary>
            Represents the options class of a scale major ticks.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.MajorLinearTickOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.MajorLinearTickOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.MarkerCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Wpf.Gauge.Marker" /> objects.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.MinorLinearLabelOptions">
      <summary>
            Represents the options class of a scale minor labels.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.MinorLinearLabelOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.MinorLinearLabelOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.MinorLinearTickOptions">
      <summary>
            Represents the options class of a scale minor ticks.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.MinorLinearTickOptions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.MinorLinearTickOptions" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.Options">
      <summary>
            Represents the base class for all scale options.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.Options.TemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Options.Template" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Options.Template">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used for ticks or labels.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#ticks">here</a> and
            <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#labels">here</a> for examples
            about how to use this property.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.Options.TemplateSelectorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Options.TemplateSelector" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Options.TemplateSelector">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Controls.DataTemplateSelector" /> that can be used to
            select the <see cref="T:System.Windows.DataTemplate" /> to be used.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.Options.StyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Options.Style" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Options.Style">
      <summary>
            Gets or sets the style of the target element. This is a dependency property.
            </summary>
      <remarks>
            The target type of this style can be a <see cref="T:System.Windows.Controls.Label" /> or a <see cref="T:System.Windows.Shapes.Shape" />.
            When using with 
            <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MajorLabelOptions">LinearScaleBase.MajorLabelOptions</see>,
            <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MinorLabelOptions">LinearScaleBase.MinorLabelOptions</see>,
            <see cref="P:EO.Wpf.Gauge.CircularScale.MajorLabelOptions">CircularScale.MajorLabelOptions</see> and
            <see cref="P:EO.Wpf.Gauge.CircularScale.MinorLabelOptions">CircularScale.MinorLabelOptions</see>,
            the target type is a <see cref="T:System.Windows.Controls.Label" />.
            When using with
            <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MajorTickOptions">LinearScaleBase.MajorTickOptions</see>,
            <see cref="P:EO.Wpf.Gauge.LinearScaleBase.MinorTickOptions">LinearScaleBase.MinorTickOptions</see>,
            <see cref="P:EO.Wpf.Gauge.CircularScale.MajorTickOptions">CircularScale.MajorTickOptions</see> and
            <see cref="P:EO.Wpf.Gauge.CircularScale.MinorTickOptions">CircularScale.MinorTickOptions</see>,
            the target type is <see cref="T:System.Windows.Shapes.Shape" />. 
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#ticks">here</a> and
            <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#labels">here</a> for examples
            about how to use this property.
            </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.Options.CheckTemplateSource">
      <summary>
            This routine makes sure that the <see cref="P:EO.Wpf.Gauge.Options.Template" /> and 
            <see cref="P:EO.Wpf.Gauge.Options.TemplateSelector" /> properties are not set at the same
            time.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.Options.IsDefaultOrCoerced(System.Windows.DependencyProperty)">
      <summary>
            Check a dependency property value if it is coerced or default.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.ProgressIndicator">
      <summary>
            Represents a lightweight progress bar used as a value indicator for a <c>LinearGauge</c>.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.ProgressIndicator.AnchorValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ProgressIndicator.AnchorValue" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ProgressIndicator.AnchorValue">
      <summary>
            Gets or sets a value that specifies the starting value of the 
            <see cref="T:EO.Wpf.Gauge.ProgressIndicator" />. This is a dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that specifies the starting value of
            the <see cref="T:EO.Wpf.Gauge.ProgressIndicator" />, which may be coerced based on
            the <see cref="P:EO.Wpf.Gauge.ScaleBase.Minimum" /> and 
            <see cref="P:EO.Wpf.Gauge.ScaleBase.Maximum" /> values of the containing 
            <see cref="T:EO.Wpf.Gauge.CircularScale" />. The default value is <b>0</b>.
            </value>
      <example>
      </example>
    </member>
    <member name="P:EO.Wpf.Gauge.ProgressIndicator.InnerValue">
      <summary>
            This property is only created to support animations while the indicator is being used in
            a <see cref="T:EO.Wpf.Gauge.CircularScale" /> value indicators collection.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.ProgressIndicator.IndicatorStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ProgressIndicator.IndicatorStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ProgressIndicator.IndicatorStyle">
      <summary>
            Gets or sets the IndicatorStyle property. This is a dependency property.
            </summary>
      <remarks>
            The target type of this style is <see cref="T:System.Windows.Shapes.Rectangle" />.
            </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.ProgressIndicator.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.ProgressIndicator" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.ProgressIndicator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Gauge.ProgressIndicator" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.ProgressIndicator.CoercePartIndicatorLength">
      <summary>
            an animation cannot start from <see cref="F:System.Double.NaN" />, here we are coercing the Height/Width
            value to 0.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.CircularRangeBar">
      <summary>
            Represents a circular range bar.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularRangeBar.EndAngleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularRangeBar.EndAngle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularRangeBar.EndAngle">
      <summary>
            Gets or sets the end angle of this <see cref="T:EO.Wpf.Gauge.CircularRangeBar" />
            instance. This is a dependency property.
            </summary>
      <value>
            The default value is <b>180</b>.
            </value>
      <remarks>
        <para>
            For more details about how to use this property, see <a href="">here
            </a>.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularRangeBar.StartAngleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularRangeBar.StartAngle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularRangeBar.StartAngle">
      <summary>
            Gets or sets the start angle of this <see cref="T:EO.Wpf.Gauge.CircularRangeBar" />
            instance. This is a dependency property.
            </summary>
      <value>
            The default value is <c>0</c>.
            </value>
      <remarks>
        <para>
            For more details about how to use this property, see <a href="">here
            </a>.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularRangeBar.OriginXProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularRangeBar.OriginX" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularRangeBar.OriginX">
      <summary>
            Gets or sets the OriginX property. This is a dependency property.
            </summary>
      <remarks>
        <para>For more information on how to use this property see 
            <see cref="P:EO.Wpf.RadialPanel.OriginX">here</see>.</para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.CircularRangeBar.OriginYProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.CircularRangeBar.OriginY" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.CircularRangeBar.OriginY">
      <summary>
            Gets or sets the OriginY property. This is a dependency property.
            </summary>
      <remarks>
        <para>For more information on how to use this property see 
            <see cref="F:EO.Wpf.RadialPanel.OriginYProperty">here</see>.</para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.CircularRangeBar.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.CircularRangeBar" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.CircularRangeBar.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Gauge.CircularRangeBar" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.RollingRangeBar">
      <summary>
            Represents a <see cref="T:EO.Wpf.Gauge.LinearRangeBar" /> where only a portion of the
            whole visual is visible.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingRangeBar.m_rangeIndex">
      <summary>
            Used as an index while enumerating the list of Ranges
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingRangeBar.ViewPortSizeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingRangeBar.ViewPortSize" /> dependeny property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingRangeBar.ViewPortSize">
      <summary>
            Gets or sets the ScaleInterval property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingRangeBar.ValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingRangeBar.Value" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingRangeBar.Value">
      <summary>
            Gets or sets the Value property.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.RollingScale">
      <summary>
            Represents a rolling scale, where only a portion of an entire linear
            scale is visible.
            </summary>
      <remarks>
        <para>
            You can imagine a <see cref="T:EO.Wpf.Gauge.RollingScale" /> as a very long <see cref="T:EO.Wpf.Gauge.LinearScale" />, but only with a 
            small portion of the scale being visible. The following diagram demonstrates this concept: 
            </para>
        <img src="Wpf/Controls/Gauge/Scale/rollingscale1.gif" />
        <para>
            See <a href="Wpf/Controls/Gauge/Scale/rolling_scale.html">here</a> for more details about how
            to use this control.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingScale.ViewPortSizeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingScale.ViewPortSize" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingScale.ViewPortSize">
      <summary>
            Gets or sets the scale view port size in term of scale unit. This is a dependency
            property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that represents the scale view port
            size in term of scale unit. The default value is <b>10</b>.
            </value>
      <remarks>
            You can imagine a <see cref="T:EO.Wpf.Gauge.RollingScale" /> as a long <see cref="T:EO.Wpf.Gauge.LinearScale" /> with only
            a small portion around the scale's <see cref="P:EO.Wpf.Gauge.RollingScale.Value" /> that is visible. The "full scale"
            size is determined by <see cref="P:EO.Wpf.Gauge.ScaleBase.Minimum" /> and <see cref="P:EO.Wpf.Gauge.ScaleBase.Maximum" /> property, while this
            property determines the size of the visual portion.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingScale.ValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingScale.Value" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingScale.Value">
      <summary>
            Gets or sets the current value of the scale. This is a dependency
            property.
            </summary>
      <value>The current value of the scale. The default value is 0.
            </value>
      <remarks>
        <para>
            You can imagine a <see cref="T:EO.Wpf.Gauge.RollingScale" /> as a long <see cref="T:EO.Wpf.Gauge.LinearScale" /> with only
            a small portion around the scale's <see cref="P:EO.Wpf.Gauge.RollingScale.Value" /> that is visible. this property
            determines which portion of the "full scale" is visible.
            </para>
        <para>
            If you set the <c>Value</c> property to a number less than the 
            <see cref="P:EO.Wpf.Gauge.ScaleBase.Minimum" />, the <c>Value</c> is set to 
            <see cref="P:EO.Wpf.Gauge.ScaleBase.Minimum" />.
            </para>
        <para>
            If you set the <c>Value</c> property to a number greater than 
            <see cref="P:EO.Wpf.Gauge.ScaleBase.Maximum" />, the <c>Value</c> is set to 
            <see cref="P:EO.Wpf.Gauge.ScaleBase.Maximum" />.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingScale.IncludeOutRangeValuesProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingScale.IncludeOutRangeValues" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingScale.IncludeOutRangeValues">
      <summary>
            Gets or sets a value that indicates whether out range ticks and
            labels are included or not. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to display ticks and labels for out range values;
            otherwise <c>false</c>. The default value is <c>true</c>.
            </value>
    </member>
    <member name="M:EO.Wpf.Gauge.RollingScale.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.RollingScale" /> class.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingScale.RangeBarOptionsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingScale.RangeBarOptions" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingScale.RangeBarOptions">
      <summary>
            Gets or sets the options for the range bar. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#rangebars">here</a>
            for more information on how to use range bars.
            </remarks>
    </member>
    <member name="T:EO.Wpf.Gauge.ScaleBase">
      <summary>
            Represents the base class for all scales 
            <see cref="T:EO.Wpf.Gauge.LinearScale">Linear</see>, 
            <see cref="T:EO.Wpf.Gauge.RollingScale">Rolling</see> and 
            <see cref="T:EO.Wpf.Gauge.CircularScale">Circular</see>.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.MinimumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.Minimum" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.Minimum">
      <summary>
            Gets or sets the minimum value of the scale. This is a dependency
            property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that indicates the minimum possible
            value of the scale. The default value is <b>0</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.MaximumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.Maximum" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.Maximum">
      <summary>
            Gets or sets the maximum value of the scale. This is a dependency
            property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that indicates the maximum possible
            value of the scale. The default value is
            <b>100</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.MajorIntervalProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.MajorInterval" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.MajorInterval">
      <summary>
            Gets or sets a value that indicates the interval between the scale
            major ticks. This is a dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that indicates the interval between the
            scale major ticks.The default value is 10.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.MinorIntervalProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.MinorInterval" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.MinorInterval">
      <summary>
            Gets or sets a value that indicates the interval between the scale
            minor ticks. This is a dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that indicates the interval between the
            scale minor ticks.The default value is <b>2</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.ShowMajorTicksProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.ShowMajorTicks" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.ShowMajorTicks">
      <summary>
            Gets or sets a value that indicates whether major tick marks are
            shown on the scale. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to show the major tick marks of the scale; otherwise 
            <c>false</c>. The default value is <c>true</c>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.ShowMinorTicksProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.ShowMinorTicks" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.ShowMinorTicks">
      <summary>
            Gets or sets a value that indicates whether minor tick marks are
            shown on the scale. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to show the minor tick marks on the scale; otherwise 
            <c>false</c>. The default value is <c>true</c>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.ShowMajorLabelsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.ShowMajorLabels" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.ShowMajorLabels">
      <summary>
            Gets or sets a value that indicates whether major labels are shown
            on the scale. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to show major labels; otherwise <c>false</c>. The
            default value is <c>true</c>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.ShowMinorLabelsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.ShowMinorLabels" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.ShowMinorLabels">
      <summary>
            Gets or sets a value that indicates whether minor labels are shown
            on the scale. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to show minor labels; otherwise <c>false</c>. The
            default value is <c>false</c>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.ShowLastProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.ShowLast" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.ShowLast">
      <summary>
            Gets or sets a value that indicates whether the last tick mark and the corresponding
            label should be shown on the scale. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to show the last tick mark and the corresponding label; otherwise <c>false</c>.
            The default value is <c>true</c>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.ShowFirstProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.ShowFirst" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.ShowFirst">
      <summary>
            Gets or sets a value that indicates whether the first tick mark and
            the corresponding label should be shown on the scale. This is a
            dependency property.
            </summary>
      <value>
        <c>true</c> to show the first tick mark and the corresponding label;
            otherwise <c>false</c>. The default is <c>true</c></value>
    </member>
    <member name="F:EO.Wpf.Gauge.ScaleBase.IsDirectionReversedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ScaleBase.IsDirectionReversed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.IsDirectionReversed">
      <summary>
            Gets or sets the direction of increasing values for this scale. This
            is a dependency property.
            </summary>
      <value>
        <c>true</c> to reverse the direction of increasing values; otherwise
            <c>false</c>. The default value is <c>false.</c></value>
      <remarks>
        <para>
            By default values increase from left to right for 
            <see cref="T:EO.Wpf.Gauge.LinearScale">Linear</see> and 
            <see cref="T:EO.Wpf.Gauge.RollingScale">Rolling</see> scales, and clockwise for 
            <see cref="T:EO.Wpf.Gauge.CircularScale">Circular</see> scales, by setting the <b>
            IsDirectionReversed</b> property to <b>false</b>, values will increase in the
            opposite direction for all scales.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.Ranges">
      <summary>
            Gets a collection of <see cref="T:EO.Wpf.Gauge.Range" /> object for this scale.
            </summary>
      <remarks>
        <para>
            See <a href="Wpf/Controls/Gauge/Scale/linear_scale.html#rangebars">here</a> for
            more information about ranges.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Gauge.ScaleBase.ValueIndicators">
      <summary>
            Gets a collection of <see cref="T:EO.Wpf.Gauge.ValueIndicator" /> objects attached
            to this a <see cref="T:EO.Wpf.Gauge.ScaleBase">Scale</see>.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.ScaleBase.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.ScaleBase" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.ScaleBase.#ctor">
      <summary>
            Initializes instance members of the <see cref="T:EO.Wpf.Gauge.ScaleBase" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.ValueIndicator">
      <summary>
            Represents the base class for all kind of value indicator used 
            in the gauges framework.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.ValueIndicator.ValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ValueIndicator.Value" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ValueIndicator.Value">
      <summary>
            Gets or sets the current value of the <see cref="T:EO.Wpf.Gauge.ValueIndicator" />.
            This is a dependency property.
            </summary>
      <value>
            The current value of the <see cref="T:EO.Wpf.Gauge.ValueIndicator" />, which maybe
            coerced based on the <see cref="P:EO.Wpf.Gauge.ScaleBase.Minimum" /> and 
            <see cref="P:EO.Wpf.Gauge.ScaleBase.Maximum" /> values of the containing 
            <see cref="T:EO.Wpf.Gauge.ScaleBase">Scale</see>. The default value is 0.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.ValueIndicator.EnableAnimationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ValueIndicator.EnableAnimation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ValueIndicator.EnableAnimation">
      <summary>
            Gets or sets a value that indicates whether the indicator will
            smoothly animate to the new position when the <see cref="P:EO.Wpf.Gauge.ValueIndicator.Value" />
            property change. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to animate to the new position; otherwise <c>false</c>.
            The default value is <c>false</c>.
            </value>
      <remarks>
        <para>
            The following gif animations highlight the behavior of a 
            <see cref="T:EO.Wpf.Gauge.Marker" /> when its value change, before and after setting
            <see cref="P:EO.Wpf.Gauge.ValueIndicator.EnableAnimation" /> to <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.ValueIndicator.DurationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.ValueIndicator.Duration" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.ValueIndicator.Duration">
      <summary>
            Gets or sets a value that indicates the duration of the indicator
            animation. This is a dependency property.
            </summary>
      <value>
            A <see cref="T:System.TimeSpan" /> value that represents the duration. The
            default value is <b>250ms</b>.
            </value>
      <remarks>
        <para>This property is only effective when 
            <see cref="P:EO.Wpf.Gauge.ValueIndicator.EnableAnimation" /> is set to <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Gauge.ValueIndicator.ZIndex">
      <summary>
            Gets or sets a value that represents the order on the z-plane in which the value
            indicators appears in the corresponding <see cref="T:EO.Wpf.Gauge.ScaleBase">scale</see>.
            </summary>
      <value>
            The order on the z-plane in which this value indicator appears.
            </value>
      <remarks>
        <para>
        </para>
      </remarks>
    </member>
    <member name="T:EO.Wpf.Gauge.RangeCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Wpf.Gauge.Range" /> object.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RangeCollection.Empty">
      <summary>
            Gets an Empty frozen <see cref="T:EO.Wpf.Gauge.RangeCollection" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.RollingTicksPanel">
      <summary>
            Represents panel that arranges the items of the <see cref="T:EO.Wpf.Gauge.RollingTickBar" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingTicksPanel.IsDirectionReversedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingTicksPanel.IsDirectionReversed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingTicksPanel.IsDirectionReversed">
      <summary>
            Gets or sets the layout direction.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingTicksPanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingTicksPanel.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingTicksPanel.Orientation">
      <summary>
            Gets or sets the Orientation of the <see cref="T:EO.Wpf.Gauge.RollingTicksPanel" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingTicksPanel.ViewPortSizeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingTicksPanel.ViewPortSize" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingTicksPanel.ViewPortSize">
      <summary>
            Gets or sets the interval for the scales.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingTicksPanel.ValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingTicksPanel.Value" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingTicksPanel.Value">
      <summary>
            Gets or sets the current value.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.Range">
      <summary>
            Represents a range in a <see cref="T:EO.Wpf.Gauge.LinearRangeBar" /> or a <see cref="T:EO.Wpf.Gauge.CircularRangeBar" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.Range.StartValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Range.StartValue" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Range.StartValue">
      <summary>
            Gets or sets the start value of the range. This is a dependency
            property.
            </summary>
      <value>
            The start value of the range. The default value is <b>0.0</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.Range.EndValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Range.EndValue" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Range.EndValue">
      <summary>
            Gets or sets the end value of the range. This is a dependency
            property.
            </summary>
      <value>
            The end value of the range. The default value is <b>0.0</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.Range.FillProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.Range.Fill" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.Range.Fill">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to
            render this range. This is a dependency property.
            </summary>
      <value>
            the <see cref="T:System.Windows.Media.Brush" /> used to
            render this range. The default value is <b>null</b>.
            </value>
    </member>
    <member name="M:EO.Wpf.Gauge.Range.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Gauge.Range" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.Range.#ctor(System.Double,System.Double,System.Windows.Media.Brush)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Gauge.Range" /> class.
            </summary>
      <param name="startValue">The start value.</param>
      <param name="endValue">The end value.</param>
      <param name="brush">The brush.</param>
    </member>
    <member name="T:EO.Wpf.Gauge.RangeBarBase">
      <summary>
            Represents the base class of all the gauge range bars, 
            <see cref="T:EO.Wpf.Gauge.LinearRangeBar" />, <see cref="T:EO.Wpf.Gauge.RollingRangeBar" />and 
            <see cref="T:EO.Wpf.Gauge.CircularRangeBar" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RangeBarBase.MinimumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RangeBarBase.Minimum" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RangeBarBase.Minimum">
      <summary>
            Gets or sets the minimum possible value of the range bar. This is a
            dependency property.
            </summary>
      <value>
            The minimum possible value of the range bar. The default value is 
            <b>0</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.RangeBarBase.MaximumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RangeBarBase.Maximum" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RangeBarBase.Maximum">
      <summary>
            Gets or sets the maximum possible value of the range bar. This is a
            dependency property.
            </summary>
      <value>
            The maximum possible value of the range bar. The default value is 
            <b>100</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RangeBarBase.IsDirectionReversed">
      <summary>
            Gets or sets the rendering direction of a range bar. This is a
            dependency property.
            </summary>
      <value>
        <c>true</c> to revert the rendering direction; otherwise 
            <c>false</c>. The default value is <c>false</c>.
            </value>
      <remarks>
        <para> Note that the rendering direction is affected by the value of
            the <see cref="T:System.Windows.Controls.Orientation" /> property. The following table shows the
            rendering direction as it is affected by the value of <b>
            IsDirectionReversed</b> and the value of the 
            <see cref="T:System.Windows.Controls.Orientation" /> property. </para>
        <list type="table">
          <listheader>
            <term>IsDirectionReversed and Orientation Value</term>
            <description>Rendering Direction</description>
          </listheader>
          <item>
            <term>IsDirectionReversed = false; Orientation = Horizontal</term>
            <description>Left to Right</description>
          </item>
          <item>
            <term>IsDirectionReversed = true; Orientation = Horizontal</term>
            <description>Right to Left</description>
          </item>
          <item>
            <term>IsDirectionReversed = false; Orientation = Vertical</term>
            <description>Top to Bottom</description>
          </item>
          <item>
            <term>IsDirectionReversed = true; Orientation = Vertical</term>
            <description>Bottom to Top</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.RangeBarBase.RangesProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RangeBarBase.Ranges" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RangeBarBase.Ranges">
      <summary>
            Gets or sets the collection of <see cref="T:EO.Wpf.Gauge.Range" /> objects. This is a dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.RangeBarBase.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.RangeBarBase" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.RangeBarBase.IsValidRange(EO.Wpf.Gauge.Range)">
      <summary>
            Validate a <see cref="T:EO.Wpf.Gauge.Range" /> instance; an invalid 
            <see cref="T:EO.Wpf.Gauge.Range" /> instance is not rendered.
            </summary>
      <param name="range">The <see cref="T:EO.Wpf.Gauge.Range" /> instance to validate.
            </param>
      <returns>
        <c>True</c> if the <paramref name="range" /> is valid; otherwise 
            <c>false</c>.
            </returns>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearTickBar">
      <summary>
            Represents a linear tick bar.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.LinearTickBar.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.LinearTickBar" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.LinearTicksPanel">
      <summary>
            Represents a panel that arranges the items of the <see cref="T:EO.Wpf.Gauge.LinearTickBar" />.
            </summary>
      <remarks>
            This panel is intended to be used as the items host of the <see cref="T:EO.Wpf.Gauge.LinearTickBar" /> items.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearTicksPanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearTicksPanel.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearTicksPanel.Orientation">
      <summary>
            Gets or sets the orientation of the <see cref="T:EO.Wpf.Gauge.TickBarBase" />. This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.Controls.Orientation" /> values. The default is <see cref="F:System.Windows.Controls.Orientation.Horizontal" /></value>
    </member>
    <member name="F:EO.Wpf.Gauge.LinearTicksPanel.IsDirectionReversedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.LinearTicksPanel.IsDirectionReversed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.LinearTicksPanel.IsDirectionReversed">
      <summary>
            Gets or sets the direction of increasing value. This is a dependency
            property.
            </summary>
      <value>
        <c>true</c> if the direction of increasing value is to the left for
            a horizontal
             <see cref="T:EO.Wpf.Gauge.TickBarBase" /> or down for a vertical 
             <see cref="T:EO.Wpf.Gauge.TickBarBase" />; otherwise, <c>false</c>.The default
             value is <c>false</c>.
            </value>
    </member>
    <member name="T:EO.Wpf.Gauge.RollingTickBar">
      <summary>
            Represents a rolling tick bar, where only a portion of an entire linear
            tick bar is shown.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingTickBar.ViewPortSizeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingTickBar.ViewPortSize" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingTickBar.ViewPortSize">
      <summary>
            Gets or sets the ViewPort size. This is a dependency property.
            </summary>
      <value>
            The ViewPort size. The default value is <b>10.0</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingTickBar.ValueProperty">
      <summary>
            Dependency Property for <see cref="P:EO.Wpf.Gauge.RollingTickBar.Value" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingTickBar.Value">
      <summary>
            Gets or sets the current value of the <see cref="T:EO.Wpf.Gauge.RollingTickBar" />,
            which may be coerced. This is a dependency property.
            </summary>
      <value>
            The current value of the <see cref="T:EO.Wpf.Gauge.RollingTickBar" />. The default
            is <b>0.0</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.RollingTickBar.IncludeOutRangeValuesProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.RollingTickBar.IncludeOutRangeValues" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.RollingTickBar.IncludeOutRangeValues">
      <summary>
            Gets or sets a value that indicates whether values outside the range
            [<see cref="P:EO.Wpf.Gauge.TickBarBase.Minimum" />, <see cref="P:EO.Wpf.Gauge.TickBarBase.Maximum" />] 
            are included or not. This is a dependency property.
            </summary>
      <value>
        <b>true</b> to include values outside the range
            [<see cref="P:EO.Wpf.Gauge.TickBarBase.Minimum" />, <see cref="P:EO.Wpf.Gauge.TickBarBase.Maximum" />]
             otherwise <b>false</b>. The default value is <b>true</b>.
            </value>
    </member>
    <member name="M:EO.Wpf.Gauge.RollingTickBar.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.RollingTickBar" /> control.
            </summary>
    </member>
    <member name="T:EO.Wpf.Gauge.TickBarBase">
      <summary>
            Represents the base class for <see cref="T:EO.Wpf.Gauge.LinearTickBar" /> and <see cref="T:EO.Wpf.Gauge.RollingTickBar" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.MinimumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.Minimum" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.Minimum">
      <summary>
            Gets or sets the minimum possible value of the 
            <see cref="T:EO.Wpf.Gauge.TickBarBase" />. This is a dependency property.
            </summary>
      <remarks>
            the minimum possible value of the <see cref="T:EO.Wpf.Gauge.TickBarBase" />. The
            default value is 0.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.MaximumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.Maximum" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.Maximum">
      <summary>
            Gets or sets the maximum possible value of the 
            <see cref="T:EO.Wpf.Gauge.TickBarBase" />. This is a dependency property.
            </summary>
      <remarks>
            the maximum possible value of the <see cref="T:EO.Wpf.Gauge.TickBarBase" />. The default value is 10.0.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.MajorIntervalProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.MajorInterval" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.MajorInterval">
      <summary>
            Gets or sets a value that specifies the interval between major tick
            marks. This is a dependency property.
            </summary>
      <value>
            A value that specifies the interval between major tick marks. The
            default value is <c>10.0</c>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.MinorIntervalProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.MinorInterval" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.MinorInterval">
      <summary>
            Gets or sets a value that specifies the interval between minor tick
            marks. This is a dependency property.
            </summary>
      <value>A value that specifies the interval between minor tick marks.
            the default is <c>2.0</c>.</value>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.TicksDisplayProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.TicksDisplay" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.TicksDisplay">
      <summary>
            Gets or sets a value that indicates whether to show major or minor tick marks. This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.Gauge.TicksDisplay" /> enumeration values. The the default is <see cref="F:EO.Wpf.Gauge.TicksDisplay.Major" />.
            </value>
      <remarks>
        <para>
            A <see cref="T:EO.Wpf.Gauge.TickBarBase" /> can be used to display either major or minor ticks, but not both. In order
            to display both major and minor ticks, you must use two <see cref="T:EO.Wpf.Gauge.TickBarBase" /> control.
            </para>
        <para>
            When this property is set to <see cref="F:EO.Wpf.Gauge.TicksDisplay.Minor" />, it generates minor ticks at
            <see cref="P:EO.Wpf.Gauge.TickBarBase.MinorInterval" /> but skips at <see cref="P:EO.Wpf.Gauge.TickBarBase.MajorInterval" />. This is necessary
            so that you can stack major and minor ticks together without having both major and minor ticks
            at the same spot.
            </para>
        <para>
            For example, for the following <see cref="T:EO.Wpf.Gauge.LinearTickBar" />:
            </para>
        <code lang="XML">
            &lt;eo:LinearTickBar MajorInterval="5" MinorInterval="1" TicksDisplay="Minor"&gt;
            &lt;/eo:LinearTickBar&gt;
            </code>
        <para>
            It will display ticks at 1, 2, 3, 4, 6, 7, 8, 9, but skip 0, 5, 10.
            </para>
        <para>
            Because of this, if you specify the same value for <see cref="P:EO.Wpf.Gauge.TickBarBase.MajorInterval" /> and <see cref="P:EO.Wpf.Gauge.TickBarBase.MinorInterval" />,
            then it will not display any minor ticks because all the tick points will be considered major thus be skipped.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.Orientation">
      <summary>
            Gets or sets the orientation of the <see cref="T:EO.Wpf.Gauge.TickBarBase" />. This
            is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.Controls.Orientation" />
            enumeration values. The default is 
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" /></value>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.TickTypeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.TickType" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.TickType">
      <summary>
            Gets or sets the type of of the ticks.
            </summary>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.IsDirectionReversedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.IsDirectionReversed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.IsDirectionReversed">
      <summary>
            Gets or sets the direction of increasing value. This is a dependency
            property.
            </summary>
      <value>
        <c>true</c> if the direction of increasing value is to the left for
            a horizontal
             <see cref="T:EO.Wpf.Gauge.TickBarBase" /> or down for a vertical 
             <see cref="T:EO.Wpf.Gauge.TickBarBase" />; otherwise, <c>false</c>.The default
             value is <c>false</c>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.ShowFirstProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.ShowFirst" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.ShowFirst">
      <summary>
            Gets or sets a value that indicates whether the first tick is
            visible or not. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to show the first tick; otherwise <c>false</c>. The
            default value is <c>true</c>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.ShowLastProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.ShowLast" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.ShowLast">
      <summary>
            Gets or sets a value that indicates whether the last tick is visible
            or not. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to show the last tick on the <see cref="T:EO.Wpf.Gauge.TickBarBase" />;
            otherwise <c>false</c>. The default value is <c>true</c>.
            </value>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.ShapeStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.ShapeStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.ShapeStyle">
      <summary>
            Gets or sets the style applied to predefined <see cref="T:System.Windows.Shapes.Shape" />s in
            this <see cref="T:EO.Wpf.Gauge.TickBarBase" />'s 
            <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" />. This is a dependency
            property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/TickBar/shape_label.html">shape and
            label</a> for more details about this property.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.LabelStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.LabelStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.LabelStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to predefined 
            <see cref="T:System.Windows.Controls.Label">Labels</see> in this <see cref="T:EO.Wpf.Gauge.TickBarBase" />'s 
            <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" />. This is a dependency
            property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/TickBar/shape_label.html">shape and
            label</a> for more details about this property.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Gauge.TickBarBase.LabelStringFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Gauge.TickBarBase.LabelStringFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Gauge.TickBarBase.LabelStringFormat">
      <summary>
            Gets or sets the content string format applied to predefined 
            <see cref="T:System.Windows.Controls.Label">Labels</see> in this <see cref="T:EO.Wpf.Gauge.TickBarBase" />'s 
            <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" />. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Gauge/TickBar/shape_label.html">shape and
            label</a> for more details about this property.
            </remarks>
    </member>
    <member name="M:EO.Wpf.Gauge.TickBarBase.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Gauge.TickBarBase" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.TickBarBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Gauge.TickBarBase" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Gauge.TickBarBase.InvalidateTicks">
      <summary>
            Builds the <see cref="P:EO.Wpf.Gauge.TickBarBase.Ticks" /> collection.
            </summary>
    </member>
    <member name="T:EO.Wpf.ItemDragEventArgs">
      <summary>
            Provides data related to dragging an item in an <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.ItemDragEventArgs.SourceItem">
      <summary>
            The source item that is being dragged.
            </summary>
    </member>
    <member name="P:EO.Wpf.ItemDragEventArgs.SourceItemContainer">
      <summary>
            The item container <see cref="T:System.Windows.UIElement" /> of the source item that is being dragged.
            </summary>
    </member>
    <member name="P:EO.Wpf.ItemDragEventArgs.Canceled">
      <summary>
            Whether the drag drop should be canceled.
            </summary>
    </member>
    <member name="T:EO.Wpf.ItemDragEventHandler">
      <summary>
            Represents methods that will handle dragging an item in an <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:EO.Wpf.ItemDragOverEventArgs">
      <summary>
            Provides data related to dragging an item over another <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
      <remarks>
            When dragging an item over another <see cref="T:System.Windows.Controls.ItemsControl" />, one or two target items
            may be involved. If the item being dragged is right on top of another item, then that
            item is the primary target item (as identified by <see cref="P:EO.Wpf.ItemDragOverEventArgs.TargetItem1" /> and
            <see cref="P:EO.Wpf.ItemDragOverEventArgs.TargetItemContainer1" />). In addition to the primary target item, if the
            mouse position is close to the top or bottom edge of primary item, the next item on
            that edge will be returned through <see cref="P:EO.Wpf.ItemDragOverEventArgs.TargetItem2" /> and <see cref="P:EO.Wpf.ItemDragOverEventArgs.TargetItemContainer2" />.
            The default drop behavior in this case is to insert the item in between these two items.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ItemDragOverEventArgs.TargetItem1">
      <summary>
            The first target item.
            </summary>
      <remarks>
            See the remark section of the <see cref="T:EO.Wpf.ItemDragOverEventArgs" /> class for details
            about the first and the second target item.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ItemDragOverEventArgs.TargetItemContainer1">
      <summary>
            The item container <see cref="T:System.Windows.UIElement" /> of the first target item.
            </summary>
      <remarks>
            See the remark section of the <see cref="T:EO.Wpf.ItemDragOverEventArgs" /> class for details
            about the first and the second target item.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ItemDragOverEventArgs.TargetItem2">
      <summary>
            The second target item.
            </summary>
      <remarks>
            See the remark section of the <see cref="T:EO.Wpf.ItemDragOverEventArgs" /> class for details
            about the first and the second target item.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ItemDragOverEventArgs.TargetItemContainer2">
      <summary>
            The item container <see cref="T:System.Windows.UIElement" /> of the second target item.
            </summary>
      <remarks>
            See the remark section of the <see cref="T:EO.Wpf.ItemDragOverEventArgs" /> class for details
            about the first and the second target item.
            </remarks>
    </member>
    <member name="T:EO.Wpf.ItemDragOverEventHandler">
      <summary>
            Represents methods that will handle dragging an item over another <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:EO.Wpf.ItemDropEventArgs">
      <summary>
            Provides data related to dropping an item over another <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.ItemDropEventHandler">
      <summary>
            Represents methods that will handle dropping an item over another <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:EO.Wpf.ItemsControlHelper">
      <summary>
            Provides utility methods that perform common tasks involving an <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.ContainerFromItem(System.Windows.Controls.ItemsControl,System.Object)">
      <summary>
            Returns the <see cref="T:System.Windows.UIElement" /> corresponding to the given item.
            </summary>
      <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl" />.</param>
      <param name="item">The item to find the <see cref="T:System.Windows.UIElement" /> for.</param>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.ContainerFromIndex(System.Windows.Controls.ItemsControl,System.Int32)">
      <summary>
            Returns the <see cref="T:System.Windows.UIElement" /> corresponding to the item at the given index.
            </summary>
      <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl" />.</param>
      <param name="index">The zero based index of the item.</param>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.ItemFromContainer(System.Windows.UIElement)">
      <summary>
            Returns the item corresponding to the given <see cref="T:System.Windows.UIElement" />.
            </summary>
      <param name="container">The <see cref="T:System.Windows.UIElement" /> that corresponds to the item to be returned.</param>
      <remarks>
        <i>container</i> must be an item container from an EO.Wpf <see cref="T:EO.Wpf.ListBox" /> or <see cref="T:EO.Wpf.TreeView" />.
            </remarks>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.IndexFromContainer(System.Windows.UIElement)">
      <summary>
            Returns the index of the given <see cref="T:System.Windows.UIElement" />.
            </summary>
      <param name="container">The <see cref="T:System.Windows.UIElement" /> that corresponds to the item to the index to be returned.</param>
      <remarks>
        <i>container</i> must be an item container from an EO.Wpf <see cref="T:EO.Wpf.ListBox" /> or <see cref="T:EO.Wpf.TreeView" />.
            </remarks>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.RealizeItems(System.Windows.Controls.ItemsControl)">
      <summary>
            Realize all items for a given <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
      <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl" /> whose items will be realized.</param>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.RemoveItem(System.Windows.Controls.ItemsControl,System.Object)">
      <summary>
            Remove an item from an <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
      <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl" /> from which the item will be removed.</param>
      <param name="itemToRemove">The item to be removed.</param>
      <returns>The index of the item that was removed. If the item source is a fixed sized collection
            (for example, an array), then the item can not be removed. In that case this function returns -1.</returns>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.AddItem(System.Windows.Controls.ItemsControl,System.Object)">
      <summary>
            Add an item into an <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
      <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl" /> to which the item will be added.</param>
      <param name="itemToAdd">The item to be added.</param>
      <returns>The item container <see cref="T:System.Windows.UIElement" /> corresponding to the newly added item.</returns>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.InsertItem(System.Windows.Controls.ItemsControl,System.Int32,System.Object)">
      <summary>
            Insert an item to the <see cref="T:System.Windows.Controls.ItemsControl" />.
            </summary>
      <param name="itemsControl">The <see cref="T:System.Windows.Controls.ItemsControl" /> to which the item will be inserted.</param>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="itemToInsert">The item to be inserted.</param>
      <returns>The item container <see cref="T:System.Windows.UIElement" /> corresponding to the newly inserted item.</returns>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.InsertItemBetween(System.Object,System.Windows.UIElement,System.Windows.UIElement)">
      <summary>
            Insert an item between two adjacent items.
            </summary>
      <param name="itemToInsert">The item to be inserted.</param>
      <param name="targetContainer1">The first item container <see cref="T:System.Windows.UIElement" /> of the two ajacent item.</param>
      <param name="targetContainer2">The second item container <see cref="T:System.Windows.UIElement" /> of the two ajacent item.</param>
      <returns>The item container <see cref="T:System.Windows.UIElement" /> of the newly inserted item.</returns>
      <remarks>
        <para>
            Both <i>targetContainer1</i> and <i>targetContainer2</i> must be an item of an EO.Wpf
            <see cref="T:EO.Wpf.ListBox" /> or a <see cref="T:EO.Wpf.TreeView" />. For items of other controls, please
            use <see cref="M:EO.Wpf.ItemsControlHelper.InsertItem(System.Windows.Controls.ItemsControl,System.Int32,System.Object)" /> instead.
            </para>
        <para>
            This method is typically used to handle a drop event where user drags an item
            from one <see cref="T:System.Windows.Controls.ItemsControl" /> and drop it in between two items of another or 
            the same <see cref="T:System.Windows.Controls.ItemsControl" />. The two adjacent items are usually items returned
            by <see cref="P:EO.Wpf.ItemDragOverEventArgs.TargetItemContainer1">ItemDropEventArgs.TargetItemContainer1</see> and
            <see cref="P:EO.Wpf.ItemDragOverEventArgs.TargetItemContainer2">ItemDropEventArgs.TargetItemContainer2</see>. 
            These two items can be on the same level (for example, items in a <see cref="T:EO.Wpf.ListBox" />), or can be
            on different level (for example, items in a <see cref="T:EO.Wpf.TreeView" />). In case they are on different
            levels, the two items are still visually next to each other (for example, the last child element
            of a previous item and item next to the parent item).
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.GetParentItemsControl(System.Windows.UIElement)">
      <summary>
            Returns the parent <see cref="T:System.Windows.Controls.ItemsControl" /> of an item container.
            </summary>
      <param name="container">The item container <see cref="T:System.Windows.UIElement" />.</param>
      <remarks>
        <i>container</i> must be an item container from an EO.Wpf <see cref="T:EO.Wpf.ListBox" /> or <see cref="T:EO.Wpf.TreeView" />.
            </remarks>
    </member>
    <member name="M:EO.Wpf.ItemsControlHelper.GetRootItemsControl(System.Windows.UIElement)">
      <summary>
            Returns the root <see cref="T:System.Windows.Controls.ItemsControl" /> of an item container.
            </summary>
      <param name="container">The item container <see cref="T:System.Windows.UIElement" />.</param>
      <remarks>
        <para>
          <i>container</i> must be an item container from an EO.Wpf <see cref="T:EO.Wpf.ListBox" /> or <see cref="T:EO.Wpf.TreeView" />.
            </para>
        <para>
            This function may return a different value than <see cref="M:EO.Wpf.ItemsControlHelper.GetParentItemsControl(System.Windows.UIElement)" />
            for a <see cref="T:EO.Wpf.TreeViewItem" />. If <i>container</i> is a <see cref="T:EO.Wpf.TreeViewItem" />,
            then <see cref="M:EO.Wpf.ItemsControlHelper.GetParentItemsControl(System.Windows.UIElement)" /> either returns the <see cref="T:EO.Wpf.TreeView" />
            (for top level items) or the parent <see cref="T:EO.Wpf.TreeViewItem" /> (for child items),
            whereas this function always returns the <see cref="T:EO.Wpf.TreeView" /> control.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Markup.XamlUnitSerializer.s_unitStrings">
      <summary>
            Units accepted by default in our Unit, so the user can write: "20px" or "20%".
            </summary>
    </member>
    <member name="F:EO.Wpf.Markup.XamlUnitSerializer.s_pixelUnitStrings">
      <summary>
            Units accepted by pixel measurement, the user can write: "2in", or "2cm" or "2pt".
            </summary>
    </member>
    <member name="T:EO.Wpf.MaskedEdit">
      <summary>
            Provides an enhanced textbox that can restrict user input to certain patterns.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.PromptCharProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.PromptChar" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.PromptChar">
      <summary>
            Gets or sets the prompt char for the edit control.
            </summary>
      <remarks>
            This is the character displayed when the textbox is empty. For example,
            "_" is a commonly used prompt char. Only the first letter of the 
            <see cref="P:EO.Wpf.MaskedEdit.PromptChar" /> is used.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.HighlightBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.HighlightBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.HighlightBrush">
      <summary>
            Gets or sets the highlight brush.
            </summary>
      <remarks>
            A <see cref="T:EO.Wpf.MaskedEdit" /> control can contain multiple <see cref="T:EO.Wpf.MaskedEditSegment" /> controls.
            At any given time, only one of them can have focus, and the focused <see cref="T:EO.Wpf.MaskedEditSegment" />
            is highlighted with <see cref="P:EO.Wpf.MaskedEdit.HighlightBrush" />.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.CaretBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.CaretBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.CaretBrush">
      <summary>
            Gets or sets the caret brush.
            </summary>
      <remarks>
            The <see cref="P:EO.Wpf.MaskedEdit.CaretBrush" /> is used to highlight the current caret position.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.AutoHighlightIfInvalidProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.AutoHighlightIfInvalid" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.AutoHighlightIfInvalid">
      <summary>
            Gets or sets a value indicating whether to highlight an invalid segment with 
            <see cref="P:EO.Wpf.MaskedEdit.ErrorBrush" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.ErrorBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.ErrorBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.ErrorBrush">
      <summary>
            Gets or sets the error brush.
            </summary>
      <remarks>
            The <see cref="P:EO.Wpf.MaskedEdit.ErrorBrush" /> is used to highlight a segment if the segment's <see cref="P:EO.Wpf.MaskedEdit.IsValid" /> is false.
            Note this property is only used when <see cref="P:EO.Wpf.MaskedEdit.AutoHighlightIfInvalid" /> is set to true.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.IsValidProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.IsValid" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.IsValid">
      <summary>
            Gets a value indicating whether the contents in the <see cref="T:EO.Wpf.MaskedEdit" /> is valid.
            </summary>
      <remarks>
        <see cref="P:EO.Wpf.MaskedEdit.IsValid" /> is true when the <see cref="P:EO.Wpf.MaskedEditSegment.IsValid" /> property of all <see cref="T:EO.Wpf.MaskedEditSegment" />s in 
            the <see cref="T:EO.Wpf.MaskedEdit" /> returns true.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.TextProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.Text" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.Text">
      <summary>
            Gets or sets the <see cref="T:EO.Wpf.MaskedEdit" /> text.
            </summary>
      <remarks>
        <para>
            Use this property to gets or sets the current text for the <see cref="T:EO.Wpf.MaskedEdit" /> control.
            The text of the <see cref="T:EO.Wpf.MaskedEdit" /> control is the <see cref="P:EO.Wpf.MaskedEditSegment.Text" /> of all 
            child <see cref="T:EO.Wpf.MaskedEditSegment" /> controls concatenated together, including those for <see cref="T:EO.Wpf.StaticMaskedEditSegment" />s. 
            For example, a <see cref="T:EO.Wpf.MaskedEdit" /> control used to enter date value may define the following segments:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:MaskedEdit PromptChar="_"&gt;
                &lt;eo:NumericMaskedEditSegment Digits="2" TabPattern="/" MinValue="1" MaxValue="12" AutoPadZeros="True"&gt;&lt;/eo:NumericMaskedEditSegment&gt;
                &lt;eo:StaticMaskedEditSegment Value="/"&gt;&lt;/eo:StaticMaskedEditSegment&gt;
                &lt;eo:NumericMaskedEditSegment Digits="2" TabPattern="/" MinValue="1" MaxValue="31" AutoPadZeros="True"&gt;&lt;/eo:NumericMaskedEditSegment&gt;
                &lt;eo:StaticMaskedEditSegment Value="/"&gt;&lt;/eo:StaticMaskedEditSegment&gt;
                &lt;eo:NumericMaskedEditSegment Digits="4" MinValue="1900" MaxValue="2100" AutoPadZeros="True"&gt;&lt;/eo:NumericMaskedEditSegment&gt;
            &lt;/eo:MaskedEdit&gt;
            </code>
        <para>
            For the above <see cref="T:EO.Wpf.MaskedEdit" />, its <see cref="P:EO.Wpf.MaskedEdit.Text" /> may return something like "01/12/2013". Note
            the value of <see cref="T:EO.Wpf.StaticMaskedEditSegment" /> (the two "/"s) are returned as well.
            </para>
        <para>
            When setting this property, the <see cref="T:EO.Wpf.MaskedEdit" /> control use a number of methods try to determine
            the best way to split a single string into different segments, and assign each segment to the corresponding
            <see cref="T:EO.Wpf.MaskedEditSegment" />'s <see cref="P:EO.Wpf.MaskedEditSegment.Text" /> property. For the date <see cref="T:EO.Wpf.MaskedEdit" />
            sample above, this can be successfully achieved by matching the text of the two <see cref="T:EO.Wpf.StaticMaskedEditSegment" />
            first. However this may not be possible for some other cases. Consider the following <see cref="T:EO.Wpf.MaskedEdit" />
            control which contains two <see cref="T:EO.Wpf.NumericMaskedEditSegment" />:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:MaskedEdit PromptChar="_"&gt;
                &lt;eo:NumericMaskedEditSegment Digits="5"&gt;&lt;/eo:NumericMaskedEditSegment&gt;
                &lt;eo:NumericMaskedEditSegment Digits="5"&gt;&lt;/eo:NumericMaskedEditSegment&gt;
            &lt;/eo:MaskedEdit&gt;
            </code>
        <para>
            It is possible for user to enter "12" in the first segment and "345" in the second segment, thus <see cref="P:EO.Wpf.MaskedEdit.Text" />
            property returns "12345". However if you set <see cref="P:EO.Wpf.MaskedEdit.Text" /> to "12345", all 5 digits will be filled into
            the first <see cref="T:EO.Wpf.NumericMaskedEditSegment" />, with the second <see cref="T:EO.Wpf.NumericMaskedEditSegment" /> being
            set to empty. To avoid such problems, you can use <see cref="M:EO.Wpf.MaskedEdit.GetTextWithSeparator(System.Char)" /> to explicitly insert
            separators between the <see cref="P:EO.Wpf.MaskedEditSegment.Text" /> of each <see cref="T:EO.Wpf.MaskedEditSegment" />. 
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.TextChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.MaskedEdit.TextChanged" /> event.
            </summary>
    </member>
    <member name="E:EO.Wpf.MaskedEdit.TextChanged">
      <summary>
            Occurs when the <see cref="P:EO.Wpf.MaskedEdit.Text" /> property changes.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.AutoAdvanceProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.AutoAdvance" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.AutoAdvance">
      <summary>
            Gets or sets a value indicating whether the focus should automatically advance to
            the next editable segment when this segment is full.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.IsEmptyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.IsEmpty" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.IsEmpty">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EO.Wpf.MaskedEdit" /> control contain any values.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.EmptyPromptProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.EmptyPrompt" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.EmptyPrompt">
      <summary>
            Gets or sets the content to be displayed when the <see cref="T:EO.Wpf.MaskedEdit" /> control is empty.
            </summary>
      <remarks>
        <para>
            You can use XAML object with this property. For example:
            </para>
        <code lang="XML">
            &lt;eo:MaskedEdit.EmptyPrompt&gt;
                &lt;TextBlock FontStyle="Italic"&gt;phone number&lt;/TextBlock&gt;
            &lt;/eo:MaskedEdit.EmptyPrompt&gt;
            </code>
      </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEdit.IsReadOnlyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEdit.IsReadOnly" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEdit.IsReadOnly">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.MaskedEdit" /> control is readonly.
            </summary>
    </member>
    <member name="M:EO.Wpf.MaskedEdit.GetTextWithSeparator(System.Char)">
      <summary>
            Get the values of all editable <see cref="T:EO.Wpf.MaskedEditSegment" /> control inside this <see cref="T:EO.Wpf.MaskedEdit" />
            control concatenated in a single string.
            </summary>
      <param name="separator">The separator letter used to separate each <see cref="T:EO.Wpf.MaskedEditSegment" />'s <see cref="P:EO.Wpf.MaskedEdit.Text" />.</param>
      <remarks>
        <para>
            Use this function to return a single string representation that contains the values of all
            editable <see cref="T:EO.Wpf.MaskedEditSegment" />s. It is important for you to choose the right <i>separator</i>
            so that it does not appear inside a normal segment text.
            </para>
        <para>
            If you wish to have different separators between different <see cref="T:EO.Wpf.MaskedEditSegment" />, you
            can loop through all <see cref="T:EO.Wpf.MaskedEditSegment" />'s <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> or
            <see cref="P:EO.Wpf.MaskedEditSegment.Text" /> property and then concatenate them with your own specific logic.
            </para>
        <para>
          <b>Note</b>: This function skips all <see cref="T:EO.Wpf.StaticMaskedEditSegment" />.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.MaskedEdit.SetTextWithSeparator(System.String,System.Char)">
      <summary>
            Set all <see cref="T:EO.Wpf.MaskedEditSegment" />'s <see cref="P:EO.Wpf.MaskedEditSegment.Text" /> properties 
            based on the value provided.
            </summary>
      <param name="valueString">The full value string previous returned by <see cref="M:EO.Wpf.MaskedEdit.GetTextWithSeparator(System.Char)" />.</param>
      <param name="separator">The separator character.</param>
      <remarks>
            Use this method to load a value previous returned by <see cref="M:EO.Wpf.MaskedEdit.GetTextWithSeparator(System.Char)" /> back to the
            <see cref="T:EO.Wpf.MaskedEdit" /> control.
            </remarks>
    </member>
    <member name="M:EO.Wpf.MaskedEdit.ResetErrorHighlights">
      <summary>
            Resets error highlights.
            </summary>
      <remarks>
            If user has edited a <see cref="T:EO.Wpf.MaskedEdit" /> but did not enter a correct value, 
            <see cref="P:EO.Wpf.MaskedEdit.ErrorBrush" /> is used to highlights the invalid segments. Call this
            methods to remove these highlights.
            </remarks>
    </member>
    <member name="T:EO.Wpf.MaskedEditSegmentType">
      <summary>
            Identify the type of a <see cref="T:EO.Wpf.MaskedEditSegment" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegmentType.Static">
      <summary>
            The type is <see cref="T:EO.Wpf.StaticMaskedEditSegment" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegmentType.Numeric">
      <summary>
            The type is <see cref="T:EO.Wpf.NumericMaskedEditSegment" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegmentType.Choice">
      <summary>
            The type is <see cref="T:EO.Wpf.ChoiceMaskedEditSegment" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegmentType.Mask">
      <summary>
            The type is <see cref="T:EO.Wpf.MaskMaskedEditSegment" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegmentType.Regex">
      <summary>
            The type is <see cref="T:EO.Wpf.RegexMaskedEditSegment" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.MaskedEditSegment">
      <summary>
            Base class for all maksed edit segment.
            </summary>
      <remarks>
            A masked edit segment is an editor or static content that represents a portion of the <see cref="P:EO.Wpf.MaskedEditSegment.MaskedEdit" />
            contents. For example, a <see cref="P:EO.Wpf.MaskedEditSegment.MaskedEdit" /> for a date value may contain three <see cref="T:EO.Wpf.NumericMaskedEditSegment" />s
            for month, day and year, also two <see cref="T:EO.Wpf.StaticMaskedEditSegment" /> control for the separators between the
            three <see cref="T:EO.Wpf.NumericMaskedEditSegment" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.SegmentType">
      <summary>
            Gets the type of the segment.
            </summary>
    </member>
    <member name="M:EO.Wpf.MaskedEditSegment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.MaskedEditSegment" /> class.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.ValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.Value">
      <summary>
            Gets or sets the value of this <see cref="T:EO.Wpf.MaskedEditSegment" />.
            </summary>
      <remarks>
        <para>
            If the segment is empty, then <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> returns null. If the segment is not
            empty, then the following table describes the data type of <see cref="P:EO.Wpf.MaskedEditSegment.Value" />:
            </para>
        <list type="table">
          <listheader>
            <term>Segment Type</term>
            <description>Data Type</description>
          </listheader>
          <item>
            <term>
              <see cref="T:EO.Wpf.StaticMaskedEditSegment" />
            </term>
            <description>
                    Any object type. <see cref="T:EO.Wpf.StaticMaskedEditSegment" /> does not perform any conversion
                    of <see cref="P:EO.Wpf.MaskedEditSegment.Value" />.
                    </description>
          </item>
          <item>
            <term>
              <see cref="T:EO.Wpf.NumericMaskedEditSegment" />
            </term>
            <description>
              <para>
                    The type is <see cref="T:System.Decimal">System.Decimal</see>. It is possible for
                    you to assign a value of compatible type, for example, a <see cref="T:System.Int32">System.Int32</see>
                    to the <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> property. In that case it will be converted into 
                    <see cref="T:System.Decimal">System.Decimal</see>.
                    </para>
              <para>
                    The <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> of a <see cref="T:EO.Wpf.NumericMaskedEditSegment" />
                    always conforms with the segment's <see cref="P:EO.Wpf.NumericMaskedEditSegment.Minimum" />
                    and <see cref="P:EO.Wpf.NumericMaskedEditSegment.Maximum" />.
                    </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:EO.Wpf.ChoiceMaskedEditSegment" />
            </term>
            <description>
                    A <see cref="T:System.Int32">System.Integer</see> that represents the index of the option
                    selected (when no option is selected, <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> returns <b>null</b>). 
                    </description>
          </item>
          <item>
            <term>
              <see cref="T:EO.Wpf.MaskMaskedEditSegment" />
            </term>
            <description>
              <para>
                    A <see cref="T:System.String">System.String</see> value that represents the content of the
                    segment. 
                    </para>
              <para>
                    The <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> of a <see cref="T:EO.Wpf.MaskMaskedEditSegment" /> may not conform the
                    <see cref="P:EO.Wpf.MaskMaskedEditSegment.Mask" /> in the following two scenarios:
                    </para>
              <list type="bullet">
                <item>
                            If the text user entered does not match the <see cref="P:EO.Wpf.MaskMaskedEditSegment.Mask" />,
                            then character at the unmatching position will be replaced with space character. For example,
                            if user enters "1a2" for mask "000", then <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> will return "1 2", where there
                            is a space between '1' and '2'.
                        </item>
                <item>
                            The text user entered has matched the <see cref="P:EO.Wpf.MaskMaskedEditSegment.Mask" /> so far,
                            but it's not completed yet. For example, mask "000" represents three required digits.
                            If user has only entered two digits "12", it matches the mask so far but is not complete.
                            In this case <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> will return "12" (however <see cref="P:EO.Wpf.MaskedEditSegment.IsValid" /> will
                            be <b>false</b> for that segment).
                        </item>
              </list>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:EO.Wpf.RegexMaskedEditSegment" />
            </term>
            <description>
                    A string value directly as user entered. A <see cref="T:EO.Wpf.RegexMaskedEditSegment" /> does not perform
                    any kind of in place conversion of user entered value. However it does automatically update its
                    <see cref="P:EO.Wpf.MaskedEditSegment.Text" /> property and <see cref="P:EO.Wpf.MaskedEditSegment.IsValid" /> property as user types.
                    </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.LeftAlignProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.LeftAlign" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.LeftAlign">
      <summary>
            Gets or sets a value indicating whether user input should be left aligned.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.HighlightBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.HighlightBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.HighlightBrush">
      <summary>
            Gets or sets the highlight brush.
            </summary>
      <remarks>
            A <see cref="P:EO.Wpf.MaskedEditSegment.MaskedEdit" /> control can contain multiple <see cref="T:EO.Wpf.MaskedEditSegment" /> controls.
            At any given time, only one of them can have focus, and the focused <see cref="T:EO.Wpf.MaskedEditSegment" />
            is highlighted with <see cref="P:EO.Wpf.MaskedEditSegment.HighlightBrush" />.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.CaretBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.CaretBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.CaretBrush">
      <summary>
            Gets or sets the caret brush.
            </summary>
      <remarks>
            The <see cref="P:EO.Wpf.MaskedEditSegment.CaretBrush" /> is used to highlight the current caret position.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.IsRequiredProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.IsRequired" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.IsRequired">
      <summary>
            Gets or sets a value indicating whether user input is required for this segment.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.IsValidProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.IsValid" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.IsValid">
      <summary>
            Gets a value indicating whether the input in this segment is valid.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.AutoHighlightIfInvalidProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.AutoHighlightIfInvalid" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.AutoHighlightIfInvalid">
      <summary>
            Gets or sets a value indicating whether to highlight an invalid segment with 
            <see cref="P:EO.Wpf.MaskedEditSegment.ErrorBrush" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.ErrorBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.ErrorBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.ErrorBrush">
      <summary>
            Gets or sets the error brush.
            </summary>
      <remarks>
            The <see cref="P:EO.Wpf.MaskedEditSegment.ErrorBrush" /> is used to highlight a segment if the segment's <see cref="P:EO.Wpf.MaskedEditSegment.IsValid" /> is false.
            Note this property is only used when <see cref="P:EO.Wpf.MaskedEditSegment.AutoHighlightIfInvalid" /> is set to true.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.TextProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.Text" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.Text">
      <summary>
            Gets or sets the segment text.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.TabPatternProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.TabPattern" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.TabPattern">
      <summary>
            Gets or sets a regular expression pattern that is used to determine whether a keyboard event 
            automatically advance to the next segment.
            </summary>
      <remarks>
        <para>
            If a character user typed matches this pattern, then the focus is automatically advanced
            to the next section as if user has pressed the tab key.
            </para>
        <para>
            Consider the following example:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:MaskedEdit PromptChar="_"&gt;
                &lt;eo:NumericMaskedEditSegment Digits="2" TabPattern="/" MinValue="1" MaxValue="12" AutoPadZeros="True"&gt;&lt;/eo:NumericMaskedEditSegment&gt;
                &lt;eo:StaticMaskedEditSegment Value="/"&gt;&lt;/eo:StaticMaskedEditSegment&gt;
                &lt;eo:NumericMaskedEditSegment Digits="2" TabPattern="/" MinValue="1" MaxValue="31" AutoPadZeros="True"&gt;&lt;/eo:NumericMaskedEditSegment&gt;
                &lt;eo:StaticMaskedEditSegment Value="/"&gt;&lt;/eo:StaticMaskedEditSegment&gt;
                &lt;eo:NumericMaskedEditSegment Digits="4" MinValue="1900" MaxValue="2100" AutoPadZeros="True"&gt;&lt;/eo:NumericMaskedEditSegment&gt;
            &lt;/eo:MaskedEdit&gt;
            </code>
        <para>
            In the above example, <see cref="P:EO.Wpf.MaskedEditSegment.TabPattern" /> is set to "/". If user types "/" before filling the first <see cref="T:EO.Wpf.NumericMaskedEditSegment" />,
            the focus will automatically advance to the third <see cref="T:EO.Wpf.NumericMaskedEditSegment" /> (The second <see cref="T:EO.Wpf.NumericMaskedEditSegment" /> is
            skipped since it's a non-editable segment.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.AutoAdvanceProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.AutoAdvance" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.AutoAdvance">
      <summary>
            Gets or sets a value indicating whether the focus should automatically advance to
            the next editable segment when this segment is full.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.IsEmptyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskedEditSegment.IsEmpty" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.IsEmpty">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EO.Wpf.MaskedEditSegment" /> control contain any values.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskedEditSegment.ValueChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.MaskedEditSegment.ValueChanged" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.MaskedEditSegment.ValueChanged">
      <summary>
            Occurs when the <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> property changes.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskedEditSegment.MaskedEdit">
      <summary>
            Gets the <see cref="P:EO.Wpf.MaskedEditSegment.MaskedEdit" /> control that contains this <see cref="T:EO.Wpf.MaskedEditSegment" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.StaticMaskedEditSegment">
      <summary>
            Represents a static <see cref="T:EO.Wpf.MaskedEditSegment" />.
            </summary>
      <remarks>
            A static segment simply displays its <see cref="P:EO.Wpf.MaskedEditSegment.Value" /> property.
            </remarks>
    </member>
    <member name="T:EO.Wpf.NumericMaskedEditSegment">
      <summary>
            Represents a <see cref="T:EO.Wpf.MaskedEditSegment" /> that can be used to enter
            numeric values.
            </summary>
    </member>
    <member name="F:EO.Wpf.NumericMaskedEditSegment.MaximumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.NumericMaskedEditSegment.Maximum" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.NumericMaskedEditSegment.Maximum">
      <summary>
            Gets or sets the maximum value allowed for the segment.
            </summary>
    </member>
    <member name="F:EO.Wpf.NumericMaskedEditSegment.MinimumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.NumericMaskedEditSegment.Minimum" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.NumericMaskedEditSegment.Minimum">
      <summary>
            Gets or sets the minimum value allowed for the segment.
            </summary>
    </member>
    <member name="F:EO.Wpf.NumericMaskedEditSegment.DigitsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.NumericMaskedEditSegment.Digits" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.NumericMaskedEditSegment.Digits">
      <summary>
            Gets or sets the number of integer digits allowed for this segment.
            </summary>
    </member>
    <member name="F:EO.Wpf.NumericMaskedEditSegment.DecimalsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.NumericMaskedEditSegment.Decimals" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.NumericMaskedEditSegment.Decimals">
      <summary>
            Gets or sets the number of decimal digits for this segment.
            </summary>
    </member>
    <member name="F:EO.Wpf.NumericMaskedEditSegment.AllowPlusMinusSignProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.NumericMaskedEditSegment.AllowPlusMinusSign" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.NumericMaskedEditSegment.AllowPlusMinusSign">
      <summary>
            Gets or sets a value indicating whether this segment allows user to enter a plus or minus sign ahead of all digits.
            </summary>
    </member>
    <member name="F:EO.Wpf.NumericMaskedEditSegment.AutoPadZerosProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.NumericMaskedEditSegment.AutoPadZeros" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.NumericMaskedEditSegment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.NumericMaskedEditSegment" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.NumericMaskedEditSegment.AutoPadZeros">
      <summary>
            Gets or sets a value indicating whether the segment should automatically left pad zeros for
            the integer part.
            </summary>
      <remarks>
            This property affects how the value is displayed inside the segment as well as the value
            of the <see cref="P:EO.Wpf.MaskedEditSegment.Text" /> property.
            </remarks>
    </member>
    <member name="T:EO.Wpf.ChoiceMaskedEditSegment">
      <summary>
            Represents a <see cref="T:EO.Wpf.MaskedEditSegment" /> that allows user to select one out of several options.
            </summary>
    </member>
    <member name="F:EO.Wpf.ChoiceMaskedEditSegment.ChoicesProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ChoiceMaskedEditSegment.Choices" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ChoiceMaskedEditSegment.Choices">
      <summary>
            Gets or sets the list of choices separated by '|'.
            </summary>
      <remarks>
            Use '|' to separate the choices. For example, "AM|PM" represents two choices: "AM" and "PM".
            </remarks>
    </member>
    <member name="T:EO.Wpf.PatternMaskedEditSegment">
      <summary>
            Base class for <see cref="T:EO.Wpf.MaskMaskedEditSegment" /> and <see cref="T:EO.Wpf.RegexMaskedEditSegment" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.MaskMaskedEditSegment">
      <summary>
            Represents a <see cref="T:EO.Wpf.MaskedEditSegment" /> that restricts user input based on a given mask.
            </summary>
    </member>
    <member name="F:EO.Wpf.MaskMaskedEditSegment.MaskProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MaskMaskedEditSegment.Mask" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MaskMaskedEditSegment.Mask">
      <summary>
            Gets or sets the input mask.
            </summary>
      <remarks>
        <para>
            The following table lists all valid mask:
            </para>
        <list type="table">
          <listheader>
            <term>Mask</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>0</term>
            <description>Digit, required. This element will accept any single digit between 0 and 9.</description>
          </item>
          <item>
            <term>9</term>
            <description>Digit or space, optional.</description>
          </item>
          <item>
            <term>#</term>
            <description>Digit or space, optional. Plus (+) and minus (-) signs are also allowed.</description>
          </item>
          <item>
            <term>L</term>
            <description>Letter, required. Restricts input to the ASCII letters a-z and A-Z. This mask element is equivalent to [a-zA-Z] in regular expressions.</description>
          </item>
          <item>
            <term>?</term>
            <description>Letter, optional. Restricts input to the ASCII letters a-z and A-Z. This mask element is equivalent to [a-zA-Z]? in regular expressions</description>
          </item>
          <item>
            <term>A</term>
            <description>Alphanumeric, required.</description>
          </item>
          <item>
            <term>a</term>
            <description>Alphanumeric, optional.</description>
          </item>
          <item>
            <term>&lt;</term>
            <description>Shift down. Converts all characters that follow to lowercase.</description>
          </item>
          <item>
            <term>&gt;</term>
            <description>Shift up. Converts all characters that follow to uppercase. </description>
          </item>
          <item>
            <term>|</term>
            <description>Disable a previous shift up or shift down. </description>
          </item>
          <item>
            <term>\</term>
            <description>Escape. Escapes a mask character, turning it into a literal. "\\" is the escape sequence for a backslash.</description>
          </item>
          <item>
            <term>All other characters</term>
            <description>Literals. All non-mask elements will appear as themselves within MaskedEdit. Literals always occupy a static position in the mask at run time, and cannot be moved or deleted by the user. </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:EO.Wpf.RegexMaskedEditSegment">
      <summary>
            Represents a <see cref="T:EO.Wpf.MaskedEditSegment" /> that verifies user input based on a regular expression.
            </summary>
    </member>
    <member name="F:EO.Wpf.RegexMaskedEditSegment.PatternProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RegexMaskedEditSegment.Pattern" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RegexMaskedEditSegment.Pattern">
      <summary>
            Gets or sets the regular expression used to verify user input.
            </summary>
    </member>
    <member name="F:EO.Wpf.RegexMaskedEditSegment.MinLengthProperty">
      <summary>
            Identify the <see cref="P:EO.Wpf.RegexMaskedEditSegment.MinLength" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RegexMaskedEditSegment.MinLength">
      <summary>
            Gets or sets the minimum required text length.
            </summary>
    </member>
    <member name="F:EO.Wpf.RegexMaskedEditSegment.MaxLengthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RegexMaskedEditSegment.MaxLength" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RegexMaskedEditSegment.MaxLength">
      <summary>
            Gets or sets the maximum allowed text length.
            </summary>
    </member>
    <member name="T:EO.Wpf.MonthPicker">
      <summary>
            Represents a control that can be use to select a year and a month.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Calendar/monthpicker.html">here</a> for more information on how to use this control.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MonthPicker.MonthLinkButtonFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MonthPicker.MonthLinkButtonFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.MonthLinkButtonFormat">
      <summary>
            Gets or sets the format of the month. This is a dependency property.
            </summary>
      <remarks>
        <para>
            The <see cref="T:EO.Wpf.MonthPicker" /> control uses this format string to format <see cref="P:EO.Wpf.MonthPicker.SelectedDate" />,
            then use the result string as the month link button text. The default value is "MMM", which
            returns the abbreviated name of the month. For example, for December, it returns "Dec" if the
            current culture is English.
            </para>
        <para>
            Note that standard DateTime format string has priority over custom DateTime format string. For
            example, "M" represents the month as a number from 1 through 12 as a custom DateTime format
            string, but it also represents date and time format string defined by the current 
            <see cref="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" /> property as a standard
            DateTime format string. As such if <see cref="P:EO.Wpf.MonthPicker.MonthLinkButtonFormat" /> is set to "M", it will 
            be interpreted as standard DateTime format string, thus returning a string like "April 10" 
            instead of "4". In order for the format string to be interpreted as custom format string, 
            you can prefix it with an empty string literal. For example, instead of setting this
            property to "M", you can set it to "''M". Note the empty string literal (two single quotes)
            before the "M".
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.MonthPicker.MonthButtonFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MonthPicker.MonthButtonFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.MonthButtonFormat">
      <summary>
            Gets or sets the format of the month. This is a dependency property.
            </summary>
      <remarks>
        <para>
            The <see cref="T:EO.Wpf.MonthPicker" /> control uses this format string to format the <see cref="T:System.DateTime" />
            value corresponding to the first day of the month, 
            then use the result string as the month button text. The default value is "MMMM", which
            returns the abbreviated name of the month. For example, for December, it returns "December" if the
            current culture is English.
            </para>
        <para>
            Note that standard DateTime format string has priority over custom DateTime format string. For
            example, "M" represents the month as a number from 1 through 12 as a custom DateTime format
            string, but it also represents date and time format string defined by the current 
            <see cref="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" /> property as a standard
            DateTime format string. As such if <see cref="P:EO.Wpf.MonthPicker.MonthLinkButtonFormat" /> is set to "M", it will 
            be interpreted as standard DateTime format string, thus returning a string like "April 10" 
            instead of "4". In order for the format string to be interpreted as custom format string, 
            you can prefix it with an empty string literal. For example, instead of setting this
            property to "M", you can set it to "''M". Note the empty string literal (two single quotes)
            before the "M".
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.MonthPicker.MonthButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MonthPicker.MonthButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.MonthButtonStyle">
      <summary>
            Gets or sets the style applied to the month button inside the drop down.
            </summary>
      <remarks>
            The target type of this style is <see cref="T:EO.Wpf.Button" />.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MonthPicker.MonthLinkButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MonthPicker.MonthLinkButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.MonthLinkButtonStyle">
      <summary>
            Gets or sets the style applied to the month link button.
            </summary>
      <remarks>
            The target type of this style is <see cref="T:EO.Wpf.LinkButton" />.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MonthPicker.SelectedYearProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MonthPicker.SelectedYear" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.SelectedYear">
      <summary>
            Gets or sets the selected year. This is a dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.MonthPicker.SelectedDateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MonthPicker.SelectedDate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.SelectedDate">
      <summary>
            Gets or sets the selected year and month as a <see cref="T:System.DateTime" /> object. This is a dependency property.
            </summary>
      <remarks>
            Only the year and the month part of the returned <see cref="T:System.DateTime" /> object has valid values. You
            should ignore other parts of the <see cref="T:System.DateTime" /> object.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MonthPicker.YearPickerStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MonthPicker.YearPickerStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.YearPickerStyle">
      <summary>
            Gets or sets the style for the <see cref="T:EO.Wpf.YearPicker" /> portion of this <see cref="T:EO.Wpf.MonthPicker" />. This is a dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.MonthPicker.IsMonthBeforeYearProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MonthPicker.IsMonthBeforeYear" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.IsMonthBeforeYear">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.MonthPicker" /> should display the month before or after the year.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.MonthPicker.SeparatorTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MonthPicker.SeparatorTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.SeparatorTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> for the separator.
            </summary>
      <remarks>
        <para>
            Separator is the area between the year link button and month link button. The
            default separator is a <see cref="T:System.Windows.Controls.TextBlock" /> with two space characters. You
            can change this to introduce other type of separators. For example, the following
            code changes the Separator to " - ":
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:MonthPicker&gt;
                &lt;eo:MonthPicker.SeparatorTemplate&gt;
                    &lt;DataTemplate&gt;
                        &lt;TextBlock Text=" - " /&gt;
                    &lt;/DataTemplate&gt;
                &lt;/eo:MonthPicker.SeparatorTemplate&gt;
            &lt;/eo:MonthPicker&gt;
            </code>
      </remarks>
    </member>
    <member name="M:EO.Wpf.MonthPicker.#cctor">
      <summary>
            initializes static members of the <see cref="T:EO.Wpf.MonthPicker" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.MonthPicker.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.MonthPicker" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.NavigateTo">
      <summary>
            Gets a command that sets the <see cref="T:EO.Wpf.MonthPicker" />'s
            <see cref="P:EO.Wpf.MonthPicker.SelectedDate" />'s month portion to the month
            passed in the <see cref="P:System.Windows.Input.ICommandSource.CommandParameter" />
            property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MonthPicker.Months">
      <summary>
            Returns a collection of <see cref="T:System.DateTime" /> object, with each 
            <see cref="T:System.DateTime" /> object reprsenting the begining of each
            month in the current selected year.
            </summary>
    </member>
    <member name="T:EO.Wpf.MultiThicknessConverter">
      <summary>
            Represents a converter that convert multiple values into a single <see cref="T:System.Windows.Thickness" /> value.
            </summary>
    </member>
    <member name="T:EO.Wpf.MultiplyConverter">
      <summary>
            Represents a converter that will multiply the value with a given value.
            </summary>
    </member>
    <member name="T:EO.Wpf.NegationConverter">
      <summary>
            Represents a converter that will negate the value of a boolean or number value.
            </summary>
    </member>
    <member name="T:EO.Wpf.OpacityConverter">
      <summary>
            This utility class is used to apply an opacity value to a solid color,
            it is mainly used in XAML to construct gradient brushes based on solid colors.
            </summary>
      <remarks>
            In order to use <see cref="T:EO.Wpf.OpacityConverter" />, you can first define it
            in your resource:
            <code lang="XML" title="XAML">
            &lt;eo:OpacityConverter x:Key="half_transparent" Opacity=".5" /&gt;
            </code>
            Then use it in later in your XAML. For example, the following XAML uses the
            above converter to construct a half-transparent gradient:
            <code lang="XML" title="XAML">
            &lt;LinearGradientBrush StartPoint="0,0" EndPoint="0,1"&gt;
               &lt;GradientStop Offset="0.0" Color="{TemplateBinding Foreground, Converter={StaticResource half_transparent}}" /&gt;
               &lt;GradientStop Offset="0.5" Color="Transparent" /&gt;
            &lt;/LinearGradientBrush&gt;
            </code></remarks>
    </member>
    <member name="P:EO.Wpf.OpacityConverter.Opacity">
      <summary>
            Gets or sets the opacity. Valid values range between 0 to 1.
            </summary>
    </member>
    <member name="M:EO.Wpf.OpacityConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.OpacityConverter" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.OpacityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="T:EO.Wpf.Primitives.GrayscaleEffect">
      <summary>
            Represents an effect that disables images
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.GrayscaleEffect.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Primitives.GrayscaleEffect" /> class.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.GrayscaleEffect.InputProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.GrayscaleEffect.Input" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.GrayscaleEffect.Input">
      <summary>
      </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.GrayscaleEffect.DesaturationFactorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.GrayscaleEffect.DesaturationFactor" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.GrayscaleEffect.DesaturationFactor">
      <summary>
      </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.MenuItemsPanel">
      <summary>
            A panel class that arranges menu items.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.MenuItemsPanel.IsTopLevelProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.MenuItemsPanel.IsTopLevel" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.MenuItemsPanel.IsTopLevel">
      <summary>
            Gets or sets whether this panel is for the top level items.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.MenuItemsPanel.ColumnCountProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.MenuItemsPanel.ColumnCount" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.MenuItemsPanel.ColumnCount">
      <summary>
            Gets or sets the number of columns.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.MenuItemsPanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.MenuItemsPanel.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.MenuItemsPanel.Orientation">
      <summary>
            Gets or sets the orientation of the panel.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.MenuItemsPanel.SpacerPositionProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.MenuItemsPanel.SpacerPosition" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.MenuItemsPanel.SpacerPosition">
      <summary>
            Gets or sets the position of the spacer item.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.MenuItemsPanel.SpacerTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.MenuItemsPanel.SpacerTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.MenuItemsPanel.SpacerTemplate">
      <summary>
            Gets or sets the template for the spacer item.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.MenuItemsPanel.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.Primitives.MenuItemsPanel" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.TabStripPanel">
      <summary>
            A Panel used to arrange tab buttons.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.TabStripPanel.TabItemOverflowStrategyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.TabStripPanel.TabItemOverflowStrategy" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.TabStripPanel.OverlapDepthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.TabStripPanel.OverlapDepth" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.TabStripPanel.TabStripPlacementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.TabStripPanel.TabStripPlacement" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Primitives.TabStripPanel" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.TabItemOverflowStrategy">
      <summary>
            Gets or sets the TabItemOverflowStrategy property. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.OverlapDepth">
      <summary>
            Gets or sets the OverlapDepth property. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.TabStripPlacement">
      <summary>
            Gets or sets the TabStripPlacement property. This is a dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.LineUp">
      <summary>
            Scroll up within content by one logical unit.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.LineRight">
      <summary>
            Scroll right within content by one logical unit.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.LineLeft">
      <summary>
            Scroll left within content by one logical unit.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.LineDown">
      <summary>
            Scroll down within content by one logical unit.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
      <summary>
            Forces content to scroll until the coordinate space of a <see cref="T:System.Windows.Media.Visual" /> object is visible.
            </summary>
      <param name="visual">A <see cref="T:System.Windows.Media.Visual" /> that becomes visible.</param>
      <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.MouseWheelDown">
      <summary>
            Scroll down within content after a user clicks the wheel button on a mouse.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.MouseWheelLeft">
      <summary>
            Scroll left within content after a user clicks the wheel button on a mouse.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.MouseWheelRight">
      <summary>
            Scroll right within content after a user clicks the wheel button on a mouse.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.MouseWheelUp">
      <summary>
            Scroll up within content after a user clicks the wheel button on a mouse.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.PageDown">
      <summary>
            Scroll down within content by one page.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.PageLeft">
      <summary>
            Scroll left within content by one page.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.PageRight">
      <summary>
            Scroll right within content by one page.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.PageUp">
      <summary>
            Scroll up within content by one page.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.SetHorizontalOffset(System.Double)">
      <summary>
            Sets the amount of horizontal offset.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.TabStripPanel.SetVerticalOffset(System.Double)">
      <summary>
            Sets the amount of vertial offset.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.CanHorizontallyScroll">
      <summary>
            Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.CanVerticallyScroll">
      <summary>
            Gets or sets a value that indicates whether scrolling on the vertical axis is possible.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.ExtentHeight">
      <summary>
            Gets the vertical size of the extent.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.ExtentWidth">
      <summary>
            Gets the horizontal size of the extent.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.HorizontalOffset">
      <summary>
            Gets the horizontal offset of the scrolled content.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.ScrollOwner">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.VerticalOffset">
      <summary>
            Gets the vertical offset of the scrolled content.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.ViewportHeight">
      <summary>
            Gets the vertical size of the viewport for this content.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabStripPanel.ViewportWidth">
      <summary>
            Gets the horizontal size of the viewport for this content.
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.RepeatButton">
      <summary>
            Represents a control that raises its <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event repeatedly from the time it is pressed until it is released. 
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.RepeatButton.DelayProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.RepeatButton.Delay" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.RepeatButton.IntervalProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.RepeatButton.Interval" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RepeatButton.Delay">
      <summary>
            Gets or sets the amount of time, in milliseconds, the <see cref="T:EO.Wpf.Primitives.RepeatButton" /> waits while it is pressed before it starts repeating. The value must be non-negative. This is a dependency property. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RepeatButton.Interval">
      <summary>
            Gets or sets the amount of time, in milliseconds, between repeats once repeating starts. The value must be non-negative. This is a dependency property. 
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.LimitedSpacePanel">
      <summary>
            Represents a <see cref="T:System.Windows.Controls.Panel" /> that tries to arrange its children in one of the two ways:
            either tries to hide items that does not fit, or tries to shrink child items to make them fit.
            </summary>
      <remarks>
        <para>
          <see cref="T:EO.Wpf.Primitives.LimitedSpacePanel" /> functions like a horizontal <see cref="T:System.Windows.Controls.StackPanel" />, except that if
            the total child item width exceeds the total available width, it applies one of the following two
            strategies:
            </para>
        <list type="bullet">
          <item>
            <para>
            If <see cref="P:EO.Wpf.Primitives.LimitedSpacePanel.AutoShrinkItem" /> is set to <b>true</b>, it tries to automatically shrink
            each child item to make them fit. In this case only a portion of each child item will be shown.
            This behavior is demonstrated in the following image:
            </para>
            <img src="images/LimitedRoomPanel1.gif" />
            <para>
            In the above picture, the <see cref="T:EO.Wpf.Primitives.LimitedSpacePanel" /> has two items. However the full width
            of the two items are greater than the total available width in the panel, so the panel
            tries to shrink both items. In this case both items are being clipped off on the right, as 
            the shown in the picture that the letter "m" is not fully displayed;
            </para>
          </item>
          <item>
            <para>
            If <see cref="P:EO.Wpf.Primitives.LimitedSpacePanel.AutoShrinkItem" /> is set to <b>false</b>, it hides those items that can not
            be fully displayed altogether. This behavior is demonstrated in the following image:
            </para>
            <img src="images/LimitedRoomPanel2.gif" />
            <para>
            In the above picture, the <see cref="T:EO.Wpf.Primitives.LimitedSpacePanel" /> has two items, however because the second
            item can not completely fit into the visible area, the <see cref="T:EO.Wpf.Primitives.LimitedSpacePanel" /> only displays
            "Item 1". "Item 2" is hidden (it's <see cref="P:System.Windows.UIElement.Visibility" /> is set to 
            <see cref="F:System.Windows.Visibility.Collapsed" />).
            </para>
          </item>
        </list>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Primitives.LimitedSpacePanel.AutoShrinkItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.LimitedSpacePanel.AutoShrinkItem" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.LimitedSpacePanel.AutoShrinkItem">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.Primitives.LimitedSpacePanel" /> should
            try to automatically shrink child items. See the over view section of the <see cref="T:EO.Wpf.Primitives.LimitedSpacePanel" />
            class for more information about this property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.LimitedSpacePanel.MoreItemsButtonTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.LimitedSpacePanel.MoreItemsButtonTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.LimitedSpacePanel.MoreItemsButtonTemplate">
      <summary>
            Gets or sets the template for the "more items" button.
            </summary>
      <remarks>
            When <see cref="P:EO.Wpf.Primitives.LimitedSpacePanel.AutoShrinkItem" />  is <b>false</b> and the <see cref="T:EO.Wpf.Primitives.LimitedSpacePanel" /> 
            can not display all children items, it can display a "more items" button next to the last 
            visible item. Use this template to define the contents of that button. 
            The <see cref="P:System.Windows.FrameworkElement.DataContext" /> of the template is this <see cref="T:EO.Wpf.Primitives.LimitedSpacePanel" /> control.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Primitives.LimitedSpacePanel.VisibleItemCountProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.LimitedSpacePanel.VisibleItemCount" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.LimitedSpacePanel.VisibleItemCount">
      <summary>
            Returns the number of visible items.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.LimitedSpacePanel.InvisibleItemCountProperty">
      <summary>
            Identifies the <see cref="F:EO.Wpf.Primitives.LimitedSpacePanel.InvisibleItemCountProperty" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.LimitedSpacePanel.InvisibleItemCount">
      <summary>
            Returns the number of invisible items.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.LimitedSpacePanel.MoreItemsButtonClickEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.Primitives.LimitedSpacePanel.MoreItemsButtonClick" /> Routed Event.
            </summary>
    </member>
    <member name="E:EO.Wpf.Primitives.LimitedSpacePanel.MoreItemsButtonClick">
      <summary>
            Occurs when the "more items" button is clicked.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.LimitedSpacePanel.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.Primitives.LimitedSpacePanel" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.Popup">
      <summary>
            A popup window with enhanced expanding and collapsing effect features.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Popup.ChildProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Popup.Child" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Popup.CustomPopupPlacementCallbackProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Popup.CustomPopupPlacementCallback" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Popup.HasDropShadowProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Popup.HasDropShadow" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Popup.HorizontalOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Popup.HorizontalOffset" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Popup.IsOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Popup.IsOpen" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Popup.PlacementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Popup.Placement" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Popup.PlacementRectangleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Popup.PlacementRectangle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Popup.PlacementTargetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Popup.PlacementTarget" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Popup.StaysOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Popup.StaysOpen" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Popup.VerticalOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Popup.VerticalOffset" /> dependency property.
            </summary>
    </member>
    <member name="E:EO.Wpf.Primitives.Popup.Opened">
      <summary>
            Occurs after the <see cref="T:EO.Wpf.Primitives.Popup" /> is opened.
            </summary>
      <remarks>
            If the <see cref="T:EO.Wpf.Primitives.Popup" /> has an expanding effect, then this event is triggered before the effect is played.
            </remarks>
    </member>
    <member name="E:EO.Wpf.Primitives.Popup.Closed">
      <summary>
            Occurs after the <see cref="T:EO.Wpf.Primitives.Popup" /> is closed.
            </summary>
      <remarks>
            If the <see cref="T:EO.Wpf.Primitives.Popup" /> has a collapsing effect, then this event is triggered after the effect is played.
            </remarks>
    </member>
    <member name="M:EO.Wpf.Primitives.Popup.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.Primitives.Popup" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Popup.Child">
      <summary>
            Gets or sets the contents of the <see cref="T:EO.Wpf.Primitives.Popup" /> control.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Popup.CustomPopupPlacementCallback">
      <summary>
            Gets or sets a delegate handler method that positions the <see cref="T:EO.Wpf.Primitives.Popup" /> control. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Popup.HasDropShadow">
      <summary>
            Gets a value that indicates whether a <see cref="T:EO.Wpf.Primitives.Popup" /> is displayed with a drop shadow effect.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Popup.HorizontalOffset">
      <summary>
            Get or sets the horizontal distance between the target origin and the popup alignment point.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Popup.IsOpen">
      <summary>
            Gets or sets a value that indicates whether the <see cref="T:EO.Wpf.Primitives.Popup" /> is visible.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Popup.Placement">
      <summary>
            Gets or sets the orientation of the <see cref="T:EO.Wpf.Primitives.Popup" /> control when the control opens, 
            and specifies the behavior of the <see cref="T:EO.Wpf.Primitives.Popup" /> control when it overlaps screen boundaries.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Popup.PlacementRectangle">
      <summary>
            Gets or sets the rectangle relative to which the <see cref="T:EO.Wpf.Primitives.Popup" /> control is positioned when it opens.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Popup.PlacementTarget">
      <summary>
            Gets or sets the element relative to which the <see cref="T:EO.Wpf.Primitives.Popup" /> is positioned when it opens.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Popup.StaysOpen">
      <summary>
            Gets or sets a value that indicates whether the <see cref="T:EO.Wpf.Primitives.Popup" /> control closes when the control is no longer in focus.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Popup.VerticalOffset">
      <summary>
            Gets or sets the vertical distance between the target origin and the popup alignment point. 
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.BackstageViewAdorner.#ctor(System.Windows.UIElement)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Primitives.BackstageViewAdorner" /> class.
            </summary>
      <param name="adornedControl">
      </param>
    </member>
    <member name="T:EO.Wpf.Primitives.SliderTickBar">
      <summary>
            Represents a control that arranges a set of tick marks for <see cref="T:EO.Wpf.Slider" /> and <see cref="T:EO.Wpf.RangeSlider" /> controls.
            </summary>
      <remarks>
        <para>
            The <see cref="T:EO.Wpf.Primitives.SliderTickBar" /> control is typically used within the <see cref="T:System.Windows.Controls.ControlTemplate">ControlTemplate</see>
            of a <see cref="T:EO.Wpf.Slider" /> or a <see cref="T:EO.Wpf.RangeSlider" />.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Primitives.SliderTickBar.MinimumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.SliderTickBar.Minimum" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.SliderTickBar.MaximumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.SliderTickBar.Maximum" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.SliderTickBar.ReservedSpaceProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.SliderTickBar.ReservedSpace" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.SliderTickBar.PlacementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.SliderTickBar.Placement" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.SliderTickBar.IsDirectionReversedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.SliderTickBar.IsDirectionReversed" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.SliderTickBar.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.SliderTickBar.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.SliderTickBar.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Primitives.SliderTickBar" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.SliderTickBar.Orientation">
      <summary>
            Gets or sets a value that indicates whether the track is displayed horizontally or vertically.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.SliderTickBar.IsDirectionReversed">
      <summary>
            Gets or sets whether the direction of increasing value is reversed from the default direction.
            </summary>
      <value>
        <c>true</c> if the direction of increasing value is from right to left in case the <see cref="P:EO.Wpf.Primitives.SliderTickBar.Orientation" /> is set to <c>horizontal</c>,
            or down to up in case the <see cref="P:EO.Wpf.Primitives.SliderTickBar.Orientation" /> is set to <c>vertical</c>; otherwise <c>false</c>. The default value is <c>false</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.Primitives.SliderTickBar.Placement">
      <summary>
            Gets or sets the position of tick marks.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.SliderTickBar.ReservedSpace">
      <summary>
            Gets or sets a space buffer for the area that contains the tick marks that are specified for a <see cref="T:EO.Wpf.Primitives.SliderTickBar" />. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.SliderTickBar.Maximum">
      <summary>
            Gets or sets the maximum possible value of a tick mark.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.SliderTickBar.Minimum">
      <summary>
            Gets or sets the minimum possible value for a tick mark.
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.Selector">
      <summary>
            Represents a control that allows a user to select items from among its child elements. 
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.TabItemBorder">
      <summary>
            A <see cref="T:System.Windows.Controls.Border" /> element that is suitable to draw tab item borders.
            </summary>
      <remarks>
        <para>
            A <see cref="T:EO.Wpf.Primitives.TabItemBorder" /> is derived from the standard WPF <see cref="T:System.Windows.Controls.Border" /> control but provides
            the following benefits:
            </para>
        <list type="bullet">
          <item>Outwards bottom round corners.</item>
          <item>Slanted left and right slope.</item>
          <item>Rotating border without rotating contents.</item>
        </list>
        <para>
            A <see cref="T:EO.Wpf.Primitives.TabItemBorder" /> control always draw the bottom border outwards instead of inwards. For example,
            the following code:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:TabItemBorder BorderBrush="Green" BorderThickness="1" CornerRadius="10" /&gt;
            </code>
        <para>
            Produces the following result:
            </para>
        <img src="images/tabitemborder1.gif">
        </img>
        <para>
            The following XAML and image demonstrates how to use <see cref="P:EO.Wpf.Primitives.TabItemBorder.LeftSlopeAngle" /> and <see cref="P:EO.Wpf.Primitives.TabItemBorder.RightSlopeAngle" />
            to create a slanted left and right slope:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:TabItemBorder BorderBrush="Green" BorderThickness="1" CornerRadius="10" 
               LeftSlopeAngle="50" RightSlopeAngle="95" /&gt;
            </code>
        <img src="images/tabitemborder2.gif">
        </img>
        <para>
            The following XAML and image demonstrates the rotating feature by setting <see cref="P:EO.Wpf.Primitives.TabItemBorder.Rotation" /> to <b>Rotation90</b> (rotating clockwise 90 degrees):
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:TabItemBorder BorderBrush="Green" BorderThickness="1" CornerRadius="10" 
               LeftSlopeAngle="50" RightSlopeAngle="95" Rotate="Rotate90" /&gt;
            </code>
        <img src="images/tabitemborder3.gif">
        </img>
        <para>
            Note when a <see cref="T:EO.Wpf.Primitives.TabItemBorder" /> is rotated, it does not rotate its contents. This allows you to
            keep the orientation of the tab item contents, for example, the orientation of the images inside the
            tab item.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.Primitives.TabItemBorder.LeftSlopeAngleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.TabItemBorder.LeftSlopeAngle" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.TabItemBorder.RightSlopeAngleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.TabItemBorder.RightSlopeAngle" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.TabItemBorder.RotationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.TabItemBorder.Rotation" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.TabItemBorder.LeftSlopeAngle">
      <summary>
            Gets or sets the angle of the left slope.
            </summary>
      <remarks>
            The default value is 90. Valid value must be between 0 and 180.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Primitives.TabItemBorder.RightSlopeAngle">
      <summary>
            Gets or sets the angle of the right slope.
            </summary>
      <remarks>
            The default value is 90. Valid value must be between 0 and 180.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Primitives.TabItemBorder.Rotation">
      <summary>
            Gets or sets the rotation of the tab item.
            </summary>
      <remarks>
            The rotation rotate tab item shape, including <see cref="T:System.Windows.CornerRadius" /> and <see cref="P:System.Windows.Controls.Border.BorderThickness" /> , but not margins and paddings.
            The contents of the content is not rotated either.
            </remarks>
    </member>
    <member name="T:EO.Wpf.Primitives.DockViewTabPanel">
      <summary>
            Represents a control that hosts all tab buttons for a <see cref="T:EO.Wpf.DockView" /> control.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.DockViewTabPanel.IsDocumentViewProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.DockViewTabPanel.IsDocumentView" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.DockViewTabPanel.OverlapDepthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.DockViewTabPanel.IsDocumentView" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.DockViewTabPanel.DividerTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.DockViewTabPanel.DividerTemplate" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.DockViewTabPanel.SelectedIndexProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.DockViewTabPanel.SelectedIndex" /> property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.DockViewTabPanel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Primitives.DockViewTabPanel" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.DockViewTabPanel.Children">
      <summary>
            Gets the children element collection.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.DockViewTabPanel.IsDocumentView">
      <summary>
            Gets or sets whether this tab panel is for a document view.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.DockViewTabPanel.OverlapDepth">
      <summary>
            Gets or sets the overlap depth between buttons.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.DockViewTabPanel.DividerTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> for the dividers.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.DockViewTabPanel.SelectedIndex">
      <summary>
            Gets or sets the selected index.
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.AutoHideTray">
      <summary>
            Represents a control that hosts all auto hide buttons on one side of a <see cref="T:EO.Wpf.DockContainer" /> control.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.AutoHideTray.DockProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.AutoHideTray.Dock" /> property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.AutoHideTray.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.Primitives.AutoHideTray" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.AutoHideTray.Dock">
      <summary>
            Gets or sets a value that indicates the position of the <see cref="T:EO.Wpf.Primitives.AutoHideTray" /> control.
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.ExtendedThumb">
      <summary>
            Extend the built-in <see cref="T:System.Windows.Controls.Primitives.Thumb" /> primitive to support <see cref="T:System.Windows.Input.ICommandSource" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.ExtendedThumb.CommandProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.ExtendedThumb.Command" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.ExtendedThumb.Command">
      <summary>
            Gets or sets the command to execute when the thumb is clicked.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.ExtendedThumb.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Handles changes to the Command property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.ExtendedThumb.OnCommandChanged(System.Windows.Input.ICommand,System.Windows.Input.ICommand)">
      <summary>
            Provides derived classes an opportunity to handle changes to the Command property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.ExtendedThumb.CommandParameterProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.ExtendedThumb.CommandParameter" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.ExtendedThumb.CommandParameter">
      <summary>
            Represents a user defined data value that can be passed to the command when it is executed.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.ExtendedThumb.CommandTargetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.ExtendedThumb.CommandTarget" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.ExtendedThumb.CommandTarget">
      <summary>
            The object that the command is being executed on.
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.GripStyle">
      <summary>
            Specifies grip style.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.GripStyle.Blank">
      <summary>
            No visible grip is drawn.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.GripStyle.Vertical3DLines">
      <summary>
            The grip is two vertical 3D lines.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.GripStyle.Horizontal3DLines">
      <summary>
            The grip is two horizontal 3D lines.
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.Grip">
      <summary>
            Represents a <see cref="T:System.Windows.FrameworkElement" /> that can be used to
            draw various different types of grip.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Grip.GripStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Grip.GripStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Grip.LightColorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Grip.LightColor" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.Grip.DarkColorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.Grip.DarkColor" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Grip.GripStyle">
      <summary>
            Gets or sets the grid style.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Grip.LightColor">
      <summary>
            Gets or sets the lighter color used to draw the 3D effect.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.Grip.DarkColor">
      <summary>
            Gets or sets the darker color used to draw the 3D effect.
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.RangeTrack">
      <summary>
            Represents a primitive control that handles the positioning 
            of two thumbs that defines a value range.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.RangeTrack.IsDirectionReversedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.RangeTrack.IsDirectionReversed" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.RangeTrack.MinimumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.RangeTrack.Minimum" /> dependency property. 
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.RangeTrack.MaximumProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.RangeTrack.Maximum" /> dependency property. 
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.RangeTrack.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.RangeTrack.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.RangeTrack.RangeStartProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.RangeTrack.RangeStart" /> dependency property. 
            </summary>
    </member>
    <member name="F:EO.Wpf.Primitives.RangeTrack.RangeEndProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Primitives.RangeTrack.RangeEnd" /> dependency property. 
            </summary>
    </member>
    <member name="M:EO.Wpf.Primitives.RangeTrack.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Primitives.RangeTrack" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.IsDirectionReversed">
      <summary>
            Gets or sets whether the direction of increasing value is reversed from the default direction. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.Minimum">
      <summary>
            Gets or sets the minimum possible value of the range track.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.Maximum">
      <summary>
            Gets or sets the maximum possible value of the range track.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.Orientation">
      <summary>
            Gets or sets a value that indicates whether the range track is displayed horizontally or vertically.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.RangeStart">
      <summary>
            Gets or sets the start value of the range.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.RangeEnd">
      <summary>
            Gets or sets the end value of the range.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.LeftThumb">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control that is used to change the
            <see cref="P:EO.Wpf.Primitives.RangeTrack.RangeStart" /> value of the range track.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.RightThumb">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control that is used to change the
            <see cref="P:EO.Wpf.Primitives.RangeTrack.RangeEnd" /> value of the range track.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.IncreaseRepeatButton">
      <summary>
            Gets or sets the <see cref="T:EO.Wpf.Primitives.RepeatButton" /> control that is used to
            increase the <see cref="P:EO.Wpf.Primitives.RangeTrack.RangeEnd" /> value of the track.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.DecreaseRepeatButton">
      <summary>
            Gets or sets the <see cref="T:EO.Wpf.Primitives.RepeatButton" /> control that is used to
            decrease the <see cref="P:EO.Wpf.Primitives.RangeTrack.RangeStart" /> value of the track.
            </summary>
    </member>
    <member name="P:EO.Wpf.Primitives.RangeTrack.MiddleThumb">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control that can can be used to
            drag both <see cref="P:EO.Wpf.Primitives.RangeTrack.LeftThumb" /> and <see cref="P:EO.Wpf.Primitives.RangeTrack.RightThumb" /> at
            the same time.
            </summary>
    </member>
    <member name="T:EO.Wpf.Primitives.SliderTicksPanel">
      <summary>
            Represents a <see cref="T:System.Windows.Controls.Panel" /> that arranges the items (tick marks) of the
             <see cref="T:EO.Wpf.Primitives.SliderTickBar" /> primitive control.
            </summary>
      <remarks>
        <para>
            This panel is designed to be used as the items panel of the <see cref="T:EO.Wpf.Primitives.SliderTickBar" /> primitive control.
            </para>
      </remarks>
    </member>
    <member name="T:EO.Wpf.Runtime">
      <summary>
            Class that includes global EO.Wpf settings.
            </summary>
    </member>
    <member name="M:EO.Wpf.Runtime.AddLicense(System.String)">
      <summary>
            Apply the license information.
            </summary>
      <param name="license">The license key.</param>
      <remarks>
        <para>
            Call this method to apply the license key before using any other EO.Wpf features.
            See <a href="Wpf/Setup/license.html">licensing EO.Wpf</a> for more details.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Runtime.UICultureName">
      <summary>
            Sets or gets the UI culture for the EO.Wpf library.
            </summary>
      <remarks>
        <para>
            EO.Wpf uses various string literals, such as a "Close" tooltip for a "Close" button.
            Setting this property to switch the language for these string literals. EO.Wpf.dll
            has translation for the following languages:
            </para>
        <list type="table">
          <listheader>
            <term>Language</term>
            <description>UICulture value</description>
          </listheader>
          <item>
            <term>Arabic</term>
            <description>ar/ar-XX</description>
          </item>
          <item>
            <term>Chinese (simplified)</term>
            <description>zh-CN</description>
          </item>
          <item>
            <term>Chinese (traditional)</term>
            <description>zh-TW/zh-HK/zh-MO</description>
          </item>
          <item>
            <term>Danish</term>
            <description>da/da-XX</description>
          </item>
          <item>
            <term>Dutch</term>
            <description>nl/nl-XX</description>
          </item>
          <item>
            <term>English</term>
            <description>en/en-XX</description>
          </item>
          <item>
            <term>Finnish</term>
            <description>fi/fi-XX</description>
          </item>
          <item>
            <term>French</term>
            <description>fr/fr-XX</description>
          </item>
          <item>
            <term>German</term>
            <description>de/de-XX</description>
          </item>
          <item>
            <term>Greek</term>
            <description>el/el-XX</description>
          </item>
          <item>
            <term>Hebrew</term>
            <description>he/he-XX</description>
          </item>
          <item>
            <term>Hindi</term>
            <description>hi/hi-XX</description>
          </item>
          <item>
            <term>Hungarian</term>
            <description>hu/hu-XX</description>
          </item>
          <item>
            <term>Italian</term>
            <description>it/it-XX</description>
          </item>
          <item>
            <term>Norwegian</term>
            <description>no/no-XX</description>
          </item>
          <item>
            <term>Polish</term>
            <description>pl/pl-XX</description>
          </item>
          <item>
            <term>Portuguese</term>
            <description>pt/pt-XX</description>
          </item>
          <item>
            <term>Spanish</term>
            <description>es/es-XX</description>
          </item>
          <item>
            <term>Swedish</term>
            <description>sv/sv-XX</description>
          </item>
        </list>
        <para>
            Where "XX" are possible language variations. For example, both "fr-FR" (France) and "fr-CA" (Canada) will load the French translation. 
            </para>
      </remarks>
    </member>
    <member name="T:EO.Wpf.Themes.Metro.SystemDropShadowChrome">
      <summary>
            Creates a theme specific look for drop shadow effects.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Metro.SystemDropShadowChrome.ColorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Metro.SystemDropShadowChrome.Color" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Metro.SystemDropShadowChrome.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Metro.SystemDropShadowChrome.CornerRadius" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Metro.SystemDropShadowChrome.Color">
      <summary>
            Gets or sets the color used by the drop shadow.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Metro.SystemDropShadowChrome.CornerRadius">
      <summary>
            Gets or sets the radii of the drop shadow.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Metro.ProgressBarBrushConverter">
      <summary>
            Creates the <see cref="T:System.Windows.Media.Brush" /> used to draw the <see cref="T:EO.Wpf.ProgressBar" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Aero.ButtonChrome">
      <summary>
            Creates the theme-specific look for Button elements.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ButtonChrome.BackgroundProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.ButtonChrome.Background" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ButtonChrome.BorderBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.ButtonChrome.BorderBrush" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ButtonChrome.RenderDefaultedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.ButtonChrome.RenderDefaulted" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ButtonChrome.RenderMouseOverProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.ButtonChrome.RenderMouseOver" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ButtonChrome.RenderPressedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.ButtonChrome.RenderPressed" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ButtonChrome.RoundCornersProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.ButtonChrome.RoundCorners" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ButtonChrome.Background">
      <summary>
            Gets or sets the brush used to fill the background of the <see cref="T:EO.Wpf.Button" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ButtonChrome.BorderBrush">
      <summary>
            Gets or sets the brush used to draw the outer border of the <see cref="T:EO.Wpf.Button" />. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ButtonChrome.RenderDefaulted">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.Button" /> has the appearance of the default button on the form. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ButtonChrome.RenderMouseOver">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.Button" /> appears as if the mouse is over it. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ButtonChrome.RenderPressed">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.Button" /> appears pressed.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ButtonChrome.RoundCorners">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.Button" /> has round corners.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Aero.SystemDropShadowChrome">
      <summary>
            Creates a theme specific look for drop shadow effects.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.SystemDropShadowChrome.ColorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.SystemDropShadowChrome.Color" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.SystemDropShadowChrome.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.SystemDropShadowChrome.CornerRadius" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.SystemDropShadowChrome.Color">
      <summary>
            Gets or sets the color used by the drop shadow.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.SystemDropShadowChrome.CornerRadius">
      <summary>
            Gets or sets the radii of the drop shadow.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Aero.ListBoxChrome">
      <summary>
            Creates the theme-specific look for <see cref="T:EO.Wpf.ListBox" /> elements.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ListBoxChrome.BackgroundProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.ListBoxChrome.Background" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ListBoxChrome.BorderBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.ListBoxChrome.BorderBrush" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ListBoxChrome.BorderThicknessProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.ListBoxChrome.BorderThickness" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ListBoxChrome.RenderFocusedProperty">
      <summary>
            Identifes the <see cref="P:EO.Wpf.Themes.Aero.ListBoxChrome.RenderFocused" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.ListBoxChrome.RenderMouseOverProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.ListBoxChrome.RenderMouseOver" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ListBoxChrome.Background">
      <summary>
            Gets or sets the brush used to fill the background of the <see cref="T:EO.Wpf.ListBox" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ListBoxChrome.BorderBrush">
      <summary>
            Gets or sets the brush used to draw the outer border of the <see cref="T:EO.Wpf.ListBox" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ListBoxChrome.BorderThickness">
      <summary>
            Gets or sets the thickness of the border of the <see cref="T:EO.Wpf.ListBox" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ListBoxChrome.RenderFocused">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.ListBox" /> appears as if it has keyboard focus. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.ListBoxChrome.RenderMouseOver">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.ListBox" /> appears as if the mouse is over it.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Aero.ProgressBarHighlightConverter">
      <summary>
            Creates the <see cref="T:System.Windows.Media.Brush" /> used to draw the <see cref="T:EO.Wpf.ProgressBar" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Aero.BulletChrome">
      <summary>
            Creates the theme-specific look for <see cref="T:EO.Wpf.CheckBox" /> and <see cref="T:EO.Wpf.RadioButton" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.BulletChrome.BackgroundProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.BulletChrome.Background" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.BulletChrome.BorderBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.BulletChrome.BorderBrush" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.BulletChrome.IsCheckedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.BulletChrome.IsChecked" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.BulletChrome.IsRoundProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.BulletChrome.IsRound" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.BulletChrome.RenderMouseOverProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.BulletChrome.RenderMouseOver" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Aero.BulletChrome.RenderPressedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Aero.BulletChrome.RenderPressed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.BulletChrome.Background">
      <summary>
            Gets or sets the brush used to fill the background of the bullet.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.BulletChrome.BorderBrush">
      <summary>
            Gets or sets the brush used to draw the outer border of the bullet.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.BulletChrome.IsChecked">
      <summary>
            Gets or sets a value indicating whether the bullet is checked.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.BulletChrome.IsRound">
      <summary>
            Gets or sets a value indicating whether the bullet has round corners.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.BulletChrome.RenderMouseOver">
      <summary>
            ts or sets a value indicating whether the bullet appears as if the mouse is over it. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Aero.BulletChrome.RenderPressed">
      <summary>
            Gets or sets a value indicating whether the bullet appears pressed.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Classic.ClassicBorderStyle">
      <summary>
            Specifies classic border style.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Classic.ClassicBorderStyle.None">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Classic.ClassicBorderStyle.Raised">
      <summary>
            Used for <see cref="T:EO.Wpf.Button" /> element in their normal state.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Classic.ClassicBorderStyle.RaisedPressed">
      <summary>
            Used for <see cref="T:EO.Wpf.Button" /> element in their pressed state.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Classic.ClassicBorderStyle.RaisedFocused">
      <summary>
            Used for <see cref="T:EO.Wpf.Button" /> element that have keyboard focus or are the default <see cref="T:EO.Wpf.Button" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Classic.ClassicBorderDecorator">
      <summary>
            Creates the theme-specific look for <see cref="T:System.Windows.Controls.Decorator" /> types, for use with the Classic theme.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Classic.ClassicBorderDecorator.BackgroundProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Classic.ClassicBorderDecorator.Background" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Classic.ClassicBorderDecorator.BorderBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Classic.ClassicBorderDecorator.BorderBrush" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Classic.ClassicBorderDecorator.BorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Classic.ClassicBorderDecorator.BorderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Classic.ClassicBorderDecorator.BorderThicknessProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Classic.ClassicBorderDecorator.BorderThickness" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Classic.ClassicBorderDecorator.Background">
      <summary>
            Gets or sets the background.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Classic.ClassicBorderDecorator.BorderBrush">
      <summary>
            Gets or sets the border brush.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Classic.ClassicBorderDecorator.BorderStyle">
      <summary>
            Gets or sets the border style.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Classic.ClassicBorderDecorator.BorderThickness">
      <summary>
            Gets or sets the border thickness.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Classic.ClassicBorderDecorator.ClassicBorderBrush">
      <summary>
            Gets the brush used to draw the border.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Classic.SystemDropShadowChrome">
      <summary>
            Create a theme specific look for drop shadow effects.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Classic.SystemDropShadowChrome.ColorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Classic.SystemDropShadowChrome.Color" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Classic.SystemDropShadowChrome.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Classic.SystemDropShadowChrome.CornerRadius" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Classic.SystemDropShadowChrome.Color">
      <summary>
            Gets or sets the color of the shadow.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Classic.SystemDropShadowChrome.CornerRadius">
      <summary>
            Gets or sets the corner radius.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Classic.ProgressBarBrushConverter">
      <summary>
            Creates the <see cref="T:System.Windows.Media.Brush" /> used to draw the <see cref="T:EO.Wpf.ProgressBar" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Luna.ThemeColor">
      <summary>
            Represents possible color themes for the Luna theme.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ThemeColor.NormalColor">
      <summary>
            The normal color theme.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ThemeColor.Homestead">
      <summary>
            The homestead theme.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ThemeColor.Metallic">
      <summary>
            The metallic theme.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Luna.ScrollGlyph">
      <summary>
            Describes the glyphs used to repesents the <see cref="T:System.Windows.Controls.Primitives.Thumb" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollGlyph.None">
      <summary>
            No glyph is used.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollGlyph.LeftArrow">
      <summary>
            An arrow glyph pointing to the left.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollGlyph.RightArrow">
      <summary>
            An arrow glyph pointing to the right.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollGlyph.UpArrow">
      <summary>
            An arrow glyph pointing up.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollGlyph.DownArrow">
      <summary>
            An arrow glyph pointing down.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollGlyph.VerticalGripper">
      <summary>
            A vertical gripper glyph.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollGlyph.HorizontalGripper">
      <summary>
            A horizontal gripper glyph.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Luna.ButtonChrome">
      <summary>
            Creates the theme-specific look for Button elements.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ButtonChrome.BorderBrushProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ButtonChrome.BorderBrush" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ButtonChrome.FillProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ButtonChrome.Fill" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ButtonChrome.RenderDefaultedProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ButtonChrome.RenderDefaulted" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ButtonChrome.RenderMouseOverProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ButtonChrome.RenderMouseOver" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ButtonChrome.RenderPressedProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ButtonChrome.RenderPressed" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ButtonChrome.ThemeColorProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ButtonChrome.ThemeColor" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ButtonChrome.Background">
      <summary>
            Gets or sets the background brush.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ButtonChrome.BorderBrush">
      <summary>
            Gets or sets the border brush.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ButtonChrome.Fill">
      <summary>
            Gets or sets the fill brush.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ButtonChrome.RenderDefaulted">
      <summary>
            Gets or sets a value indicating whether to render the button as the default button.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ButtonChrome.RenderMouseOver">
      <summary>
            Gets or sets a value indicating whether to render the button as if the mouse is over it.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ButtonChrome.RenderPressed">
      <summary>
            Gets or sets a value indicating whether to render the button as if it is pressed.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ButtonChrome.ThemeColor">
      <summary>
            Gets or sets the theme color.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Luna.ScrollChrome">
      <summary>
            Creates the theme-specific for <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> elements.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollChrome.HasOuterBorderProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ScrollChrome.HasOuterBorder" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollChrome.PaddingProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ScrollChrome.Padding" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollChrome.RenderMouseOverProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ScrollChrome.RenderMouseOver" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollChrome.RenderPressedProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ScrollChrome.RenderPressed" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollChrome.ThemeColorProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ScrollChrome.ThemeColor" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.ScrollChrome._ScrollGlyphProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Luna.ScrollChrome.ScrollGlyph" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Themes.Luna.ScrollChrome.GetScrollGlyph(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the ScrollGlyph attached property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Themes.Luna.ScrollChrome.SetScrollGlyph(System.Windows.DependencyObject,EO.Wpf.Themes.Luna.ScrollGlyph)">
      <summary>
            Sets the value of the ScrollGlyph attached property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ScrollChrome.HasOuterBorder">
      <summary>
            Gets or sets a value indicating whether the scroll bar has outter border.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ScrollChrome.Padding">
      <summary>
            Gets or sets the paddings.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ScrollChrome.RenderMouseOver">
      <summary>
            Gets or sets a value indicating whether to render as if the mouse is over the element.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ScrollChrome.RenderPressed">
      <summary>
            Gets or sets a value indicating whether to render as if the mouse is pressed on the element.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.ScrollChrome.ThemeColor">
      <summary>
            Gets or sets a value the theme color.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Luna.SystemDropShadowChrome">
      <summary>
            Creates a theme specific look for drop shadow effects.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.SystemDropShadowChrome.ColorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Luna.SystemDropShadowChrome.Color" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.SystemDropShadowChrome.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Luna.SystemDropShadowChrome.CornerRadius" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.SystemDropShadowChrome.Color">
      <summary>
            Gets or sets the color used by the drop shadow.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.SystemDropShadowChrome.CornerRadius">
      <summary>
            Gets or sets the radii of the drop shadow.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Luna.ProgressBarBrushConverter">
      <summary>
            Creates the <see cref="T:System.Windows.Media.Brush" /> used to draw the <see cref="T:EO.Wpf.ProgressBar" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Luna.BulletChrome">
      <summary>
            Creates the theme-specific look for <see cref="T:EO.Wpf.CheckBox" /> and <see cref="T:EO.Wpf.RadioButton" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.BulletChrome.BackgroundProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Luna.BulletChrome.Background" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.BulletChrome.BorderBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Luna.BulletChrome.BorderBrush" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.BulletChrome.BorderThicknessProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Luna.BulletChrome.BorderThickness" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.BulletChrome.IsCheckedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Luna.BulletChrome.IsChecked" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.BulletChrome.IsRoundProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Luna.BulletChrome.IsRound" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.BulletChrome.RenderMouseOverProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Luna.BulletChrome.RenderMouseOver" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Luna.BulletChrome.RenderPressedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Luna.BulletChrome.RenderPressed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.BulletChrome.Background">
      <summary>
            Gets or sets the background brush.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.BulletChrome.BorderBrush">
      <summary>
            Gets or sets the border brush.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.BulletChrome.BorderThickness">
      <summary>
            Gets or sets the border thickness.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.BulletChrome.IsChecked">
      <summary>
            Gets or sets a value indicating whether the bullet is checked.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.BulletChrome.IsRound">
      <summary>
            Gets or sets a value indicating whether the bullet is round.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.BulletChrome.RenderMouseOver">
      <summary>
            Gets or sets a value indicating whether to render the button as if the mouse is over it.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Luna.BulletChrome.RenderPressed">
      <summary>
            Gets or sets a value indicating whether to render the button as if it is pressed.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Royale.ButtonChrome">
      <summary>
            Creates the theme-specific look for Button elements.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ButtonChrome.BorderBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.ButtonChrome.BorderBrush" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ButtonChrome.FillProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.ButtonChrome.Fill" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ButtonChrome.RenderDefaultedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.ButtonChrome.RenderDefaulted" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ButtonChrome.RenderMouseOverProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.ButtonChrome.RenderMouseOver" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ButtonChrome.RenderPressedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.ButtonChrome.RenderPressed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.ButtonChrome.BorderBrush">
      <summary>
            Gets or sets the brush used to draw the outer border of the <see cref="T:EO.Wpf.Button" />. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.ButtonChrome.Fill">
      <summary>
            Gets or sets the brush used to fill the <see cref="T:EO.Wpf.Button" />. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.ButtonChrome.RenderDefaulted">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.Button" /> has the appearance of the default button on the form. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.ButtonChrome.RenderMouseOver">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.Button" /> appears as if the mouse is over it. 
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.ButtonChrome.RenderPressed">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.Button" /> appears pressed.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Royale.ScrollGlyph">
      <summary>
            Describes the glyphs used to repesents the <see cref="T:System.Windows.Controls.Primitives.Thumb" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollGlyph.None">
      <summary>
            No glyph is used.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollGlyph.LeftArrow">
      <summary>
            An arrow glyph pointing to the left.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollGlyph.RightArrow">
      <summary>
            An arrow glyph pointing to the right.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollGlyph.UpArrow">
      <summary>
            An arrow glyph pointing up.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollGlyph.DownArrow">
      <summary>
            An arrow glyph pointing down.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollGlyph.VerticalGripper">
      <summary>
            A vertical gripper glyph.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollGlyph.HorizontalGripper">
      <summary>
            A horizontal gripper glyph.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Royale.ScrollChrome">
      <summary>
            Creates the theme-specific for <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> elements.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollChrome.HasOuterBorderProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Royale.ScrollChrome.HasOuterBorder" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollChrome.PaddingProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Royale.ScrollChrome.Padding" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollChrome.RenderMouseOverProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Royale.ScrollChrome.RenderMouseOver" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollChrome.RenderPressedProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Royale.ScrollChrome.RenderPressed" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.ScrollChrome._ScrollGlyphProperty">
      <summary>
            Represents the <see cref="P:EO.Wpf.Themes.Royale.ScrollChrome.ScrollGlyph" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Themes.Royale.ScrollChrome.GetScrollGlyph(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the ScrollGlyph attached property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Themes.Royale.ScrollChrome.SetScrollGlyph(System.Windows.DependencyObject,EO.Wpf.Themes.Royale.ScrollGlyph)">
      <summary>
            Sets the value of the ScrollGlyph attached property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.ScrollChrome.HasOuterBorder">
      <summary>
            Gets or sets a value indicating whether the scroll bar has outter border.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.ScrollChrome.Padding">
      <summary>
            Gets or sets the paddings.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.ScrollChrome.RenderMouseOver">
      <summary>
            Gets or sets a value indicating whether to render as if the mouse is over the element.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.ScrollChrome.RenderPressed">
      <summary>
            Gets or sets a value indicating whether to render as if the mouse is pressed on the element.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Royale.SystemDropShadowChrome">
      <summary>
            Creates a theme specific look for drop shadow effects.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.SystemDropShadowChrome.ColorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.SystemDropShadowChrome.Color" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.SystemDropShadowChrome.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.SystemDropShadowChrome.CornerRadius" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.SystemDropShadowChrome.Color">
      <summary>
            Gets or sets the color used by the drop shadow.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.SystemDropShadowChrome.CornerRadius">
      <summary>
            Gets or sets the radii of the drop shadow.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Royale.ProgressBarBrushConverter">
      <summary>
            Creates the <see cref="T:System.Windows.Media.Brush" /> used to draw the <see cref="T:EO.Wpf.ProgressBar" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.Themes.Royale.BulletChrome">
      <summary>
            Creates the theme-specific look for <see cref="T:EO.Wpf.CheckBox" /> and <see cref="T:EO.Wpf.RadioButton" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.BulletChrome.BackgroundProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.BulletChrome.Background" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.BulletChrome.BorderBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.BulletChrome.BorderBrush" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.BulletChrome.BorderThicknessProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.BulletChrome.BorderThickness" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.BulletChrome.IsCheckedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.BulletChrome.IsChecked" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.BulletChrome.IsRoundProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.BulletChrome.IsRound" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.BulletChrome.RenderMouseOverProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.BulletChrome.RenderMouseOver" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Themes.Royale.BulletChrome.RenderPressedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Themes.Royale.BulletChrome.RenderPressed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.BulletChrome.Background">
      <summary>
            Gets or sets the background brush.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.BulletChrome.BorderBrush">
      <summary>
            Gets or sets the border brush.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.BulletChrome.BorderThickness">
      <summary>
            Gets or sets the border thickness.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.BulletChrome.IsChecked">
      <summary>
            Gets or sets a value indicating whether the bullet is checked.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.BulletChrome.IsRound">
      <summary>
            Gets or sets a value indicating whether the bullet is round.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.BulletChrome.RenderMouseOver">
      <summary>
            Gets or sets a value indicating whether to render the button as if the mouse is over it.
            </summary>
    </member>
    <member name="P:EO.Wpf.Themes.Royale.BulletChrome.RenderPressed">
      <summary>
            Gets or sets a value indicating whether to render the button as if it is pressed.
            </summary>
    </member>
    <member name="T:EO.Wpf.UIElementHelper">
      <summary>
            Provides utility functions about <see cref="T:System.Windows.UIElement" /> and <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.UIElementHelper.GetVisualChild(System.Windows.FrameworkElement,System.String)">
      <summary>
            Search for a visual children with the given name.
            </summary>
      <param name="root">The root element.</param>
      <param name="name">The name of the element to be returned.</param>
      <returns>
            Returns the matching <see cref="T:System.Windows.FrameworkElement" /> if a match is found, otherwise <b>null</b>.
            </returns>
    </member>
    <member name="T:EO.Wpf.UnitType">
      <summary>
            Represents the kind of value that a <see cref="T:EO.Wpf.Unit" /> object is holding.
            </summary>
      <remarks>
        <para>
            In XAML, a percentage value is expressed as <b>0.01</b> or <b>1%</b>. The first notation is true up to <b>0.99</b>,
            <b>100%</b> can't be expressed as <b>1</b> that value will be interpreted as a fixed value.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.UnitType.Fixed">
      <summary>
            The value is expressed in device-independent units.
            </summary>
    </member>
    <member name="F:EO.Wpf.UnitType.Percentage">
      <summary>
            The value is a expressed as a percentage of the available space.
            </summary>
    </member>
    <member name="T:EO.Wpf.Unit">
      <summary>
            Represents the length of elements that support fixed and percentage values.
            </summary>
    </member>
    <member name="M:EO.Wpf.Unit.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Unit" /> structure using the specified fixed value.
            </summary>
      <param name="value">
            The number of device-independent pixels (96 pixels-per-inch).
            </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is negative or equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> or 
            <see cref="F:System.Double.NaN" />.
            </exception>
    </member>
    <member name="M:EO.Wpf.Unit.#ctor(System.Double,EO.Wpf.UnitType)">
      <summary>
            Initializes a new instance of <see cref="T:EO.Wpf.Unit" /> and specifies what kind of values it holds.
            </summary>
      <param name="value">The value of this <see cref="T:EO.Wpf.Unit" /> instance.</param>
      <param name="type">The <see cref="T:EO.Wpf.UnitType" /> held by this instance.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="value" /> is negative or equal to <see cref="F:System.Double.PositiveInfinity" />,
            <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.NaN" />.
            </para>
        <para>
          <paramref name="type" /> is set to <see cref="F:EO.Wpf.UnitType.Percentage" /> and value greater than 100.
            </para>
      </exception>
    </member>
    <member name="P:EO.Wpf.Unit.IsFixed">
      <summary>
            Gets a value that indicates whether the value held by this <see cref="T:EO.Wpf.Unit" />
            instance is a fixed value.
            </summary>
    </member>
    <member name="P:EO.Wpf.Unit.IsPercentage">
      <summary>
            Gets a value that indicates whether the value held by this <see cref="T:EO.Wpf.Unit" />
            instance is a percentage value.
            </summary>
    </member>
    <member name="P:EO.Wpf.Unit.Value">
      <summary>
            Gets a <see cref="T:System.Double" /> that represents the value of this <see cref="T:EO.Wpf.Unit" /> instance.
            </summary>
    </member>
    <member name="P:EO.Wpf.Unit.UnitType">
      <summary>
            Gets the associated <see cref="T:EO.Wpf.UnitType" /> for this <see cref="T:EO.Wpf.Unit" /> instance.
            </summary>
    </member>
    <member name="P:EO.Wpf.Unit.EffectivePercentValue">
      <summary>
            Gets the effective percent value as a value between 0 and 1.
            </summary>
      <remarks>
        <para>
            If <see cref="P:EO.Wpf.Unit.Value" /> is less than 1, then it is directly interpreted 
            as the effective value. For example, if <see cref="P:EO.Wpf.Unit.Value" /> is 0.5, then
            the effective value is 0.5 (50%). However if <see cref="P:EO.Wpf.Unit.Value" />
            is greater than 1, then this function returns <see cref="P:EO.Wpf.Unit.Value" /> divided
            by 100. For example, if <see cref="P:EO.Wpf.Unit.Value" /> is 50, then this function
            returns 0.5 (50%).
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">In case 
            <see cref="P:EO.Wpf.Unit.UnitType" /> is not equal to 
            <see cref="F:EO.Wpf.UnitType.Percentage" />.</exception>
    </member>
    <member name="T:EO.Wpf.UnitConverter">
      <summary>
            Convert instance of other types to and from <see cref="T:EO.Wpf.Unit" /> instances.
            </summary>
      <remarks>
        <para>
          <see cref="T:EO.Wpf.UnitConverter" /> supports conversion to and from the following types: 
            <see cref="T:System.String" />, <see cref="T:System.Decimal" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />,
            <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt16" />, 
            <see cref="T:System.UInt32" />, <see cref="T:System.UInt64" />.
            </para>
      </remarks>
    </member>
    <member name="T:EO.Wpf.CheckBox">
      <summary>
            Represents a control that a user can select and clear. 
            </summary>
      <remarks>
            EO.Wpf <see cref="T:EO.Wpf.CheckBox" /> offers the same functionalities as WPF standard <see cref="T:EO.Wpf.CheckBox" /> control,
            but also offer the ability to switch skin/themes programatically.
            </remarks>
    </member>
    <member name="F:EO.Wpf.CheckBox.CheckStateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.CheckBox.CheckState" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.CheckBox.CheckState">
      <summary>
            Gets or sets the state of the checkbox.
            </summary>
    </member>
    <member name="F:EO.Wpf.CheckBox.ToggleThreeStateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.CheckBox.ToggleThreeState" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.CheckBox.ToggleThreeState">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.CheckBox" /> should automatically
            toggle between three states or just Checked/Unchecked states.
            </summary>
      <remarks>
            Both <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsThreeState" /> and <see cref="P:EO.Wpf.CheckBox.ToggleThreeState" /> must be set to true
            in order for the <see cref="T:EO.Wpf.CheckBox" /> to automatically toggle between three states.
            </remarks>
    </member>
    <member name="F:EO.Wpf.CheckBox.CheckStateChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.CheckBox.CheckStateChanged" /> event.
            </summary>
    </member>
    <member name="E:EO.Wpf.CheckBox.CheckStateChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.CheckBox.CheckState" /> changed.
            </summary>
    </member>
    <member name="M:EO.Wpf.CheckBox.OnCheckStateChanged">
      <summary>
            Raises the <see cref="E:EO.Wpf.CheckBox.CheckStateChanged" /> event.
            </summary>
    </member>
    <member name="T:EO.Wpf.CheckState">
      <summary>
            Specifies the state of a check box.
            </summary>
    </member>
    <member name="F:EO.Wpf.CheckState.Unchecked">
      <summary>
            The checkbox is unchecked.
            </summary>
    </member>
    <member name="F:EO.Wpf.CheckState.Checked">
      <summary>
            The checkbox is checked.
            </summary>
    </member>
    <member name="F:EO.Wpf.CheckState.Indeterminate">
      <summary>
            The checkbox is indeterminate.
            </summary>
    </member>
    <member name="T:EO.Wpf.EffectType">
      <summary>
            Specifies the effect type.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.None">
      <summary>
            Applies no effect.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.GlideTopToBottom">
      <summary>
            Glides the submenu from top to bottom. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.GlideBottomToTop">
      <summary>
            Glides the submenu from bottom to top. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.GlideLeftToRight">
      <summary>
            Glides the submenu from left to right. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.GlideRightToLeft">
      <summary>
            Glides the submenu from right to left. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.GlideTopLeftToBottomRight">
      <summary>
            Glides the submenu from top left corner to bottom right corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.GlideTopRightToBottomLeft">
      <summary>
            Glides the submenu from top right corner to bottom left corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.GlideBottomRightToTopLeft">
      <summary>
            Glides the submenu from bottom right corner to top left corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.GlideBottomLeftToTopRight">
      <summary>
            Glides the submenu from bottom left corner to top right corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.RevealTopToBottom">
      <summary>
            Reveals the submenu from top to bottom. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.RevealBottomToTop">
      <summary>
            Reveals the submenu from bottom to top. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.RevealLeftToRight">
      <summary>
            Reveals the submenu from left to right. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.RevealRightToLeft">
      <summary>
            Reveals the submenu from right to left. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.RevealTopLeftToBottomRight">
      <summary>
            Reveals the submenu from top left corner to bottom right corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.RevealTopRightToBottomLeft">
      <summary>
            Reveals the submenu from top right corner to bottom left corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.RevealBottomRightToTopLeft">
      <summary>
            Reveals the submenu from bottom right corner to top left corner. Applies to all browsers.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectType.RevealBottomLeftToTopRight">
      <summary>
            Reveals the submenu from bottom left corner to top right corner. Applies to all browsers.
            </summary>
    </member>
    <member name="T:EO.Wpf.Effect">
      <summary>
            Specifies the effect to be played when an element's visiblity changes.
            </summary>
      <remarks>
            See <a href="Wpf/Services/effect.html">here</a> for more information on how to use this class.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Effect.DefaultDuration">
      <summary>
            The default effect duration.
            </summary>
    </member>
    <member name="M:EO.Wpf.Effect.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.Effect" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.Effect.#ctor(EO.Wpf.EffectType,System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.Effect" /> class.
            </summary>
      <param name="type">The effect type.</param>
      <param name="duration">The effect duration.</param>
    </member>
    <member name="M:EO.Wpf.Effect.#ctor(EO.Wpf.EffectType,System.Int32,System.Boolean)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.Effect" /> class.
            </summary>
      <param name="type">The effect type.</param>
      <param name="duration">The effect duration.</param>
      <param name="frozen">Whether to create the object as frozen.</param>
    </member>
    <member name="P:EO.Wpf.Effect.DefaultDropDownEffect">
      <summary>
            Gets the default drop down effect.
            </summary>
    </member>
    <member name="F:EO.Wpf.Effect.TypeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Effect.Type" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Effect.DurationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Effect.Duration" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Effect.Type">
      <summary>
            Gets or sets the effect type.
            </summary>
    </member>
    <member name="P:EO.Wpf.Effect.Duration">
      <summary>
            Gets or sets the effect duration in milliseconds.
            </summary>
    </member>
    <member name="T:EO.Wpf.EffectManager">
      <summary>
            Manages expand or collapse effects on any <see cref="T:System.Windows.UIElement" />.
            </summary>
      <remarks>
            See <a href="Wpf/Services/effect.html">here</a> for more information on how to use this class.
            </remarks>
    </member>
    <member name="T:EO.Wpf.EffectManager._AP">
      <summary>
            dummy class for documentation purpose
            </summary>
    </member>
    <member name="P:EO.Wpf.EffectManager._AP.ExpandEffect">
      <summary>
            Gets or sets the expand effect for a <see cref="T:System.Windows.UIElement" />.
            </summary>
      <remarks>
            Expand effect is played when the element's <see cref="P:System.Windows.UIElement.Visibility" /> is changed from <see cref="F:System.Windows.Visibility.Hidden" /> or 
            <see cref="F:System.Windows.Visibility.Hidden" /> to <see cref="F:System.Windows.Visibility.Visible" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.EffectManager._AP.CollapseEffect">
      <summary>
            Gets or sets the collapse effect for a <see cref="T:System.Windows.UIElement" />.
            </summary>
      <remarks>
            Collapse effect is played when the element's <see cref="P:System.Windows.UIElement.Visibility" /> is changed from <see cref="F:System.Windows.Visibility.Visible" /> to
            <see cref="F:System.Windows.Visibility.Hidden" /> or <see cref="F:System.Windows.Visibility.Collapsed" />.
            </remarks>
    </member>
    <member name="F:EO.Wpf.EffectManager.ExpandEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.EffectManager._AP.ExpandEffect" /> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.EffectManager.CollapseEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.EffectManager._AP.CollapseEffect" /> attached property.
            </summary>
    </member>
    <member name="M:EO.Wpf.EffectManager.GetExpandEffect(System.Windows.UIElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.EffectManager._AP.ExpandEffect" /> for a specific <see cref="T:System.Windows.UIElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.EffectManager.SetExpandEffect(System.Windows.UIElement,EO.Wpf.Effect)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.EffectManager._AP.ExpandEffect" /> for a specific <see cref="T:System.Windows.UIElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.EffectManager.GetCollapseEffect(System.Windows.UIElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.EffectManager._AP.CollapseEffect" /> for a specific <see cref="T:System.Windows.UIElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.EffectManager.SetCollapseEffect(System.Windows.UIElement,EO.Wpf.Effect)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.EffectManager._AP.CollapseEffect" /> for a specific <see cref="T:System.Windows.UIElement" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.LinkButton">
      <summary>
            Represents a link button.
            </summary>
      <remarks>
            A <see cref="T:EO.Wpf.LinkButton" /> automatically applies different style for <see cref="T:System.Windows.Controls.TextBlock" /> controls
            inside the button when mouse is over the button. The default text style has a blue foreground color and
            also underline style when mouse is over the button. You can use <see cref="P:EO.Wpf.LinkButton.TextStyle" /> and 
            <see cref="P:EO.Wpf.LinkButton.TextHoverStyle" /> to customize these styles. See <a href="Wpf/Controls/Buttons/linkbutton.html">here</a>
            for more information about how to use this control.
            </remarks>
    </member>
    <member name="F:EO.Wpf.LinkButton.TextStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.LinkButton.TextStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.LinkButton.TextHoverStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.LinkButton.TextHoverStyle" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.LinkButton.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.LinkButton" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.LinkButton.TextStyle">
      <summary>
            Gets or sets the style for <see cref="T:System.Windows.Controls.TextBlock" /> controls inside the button.
            </summary>
      <remarks>
            The target type of this style must be <see cref="T:System.Windows.Controls.TextBlock" />. If not specified, the
            <see cref="T:EO.Wpf.LinkButton" /> use default blue foreground color for <see cref="T:System.Windows.Controls.TextBlock" />
            objects inside the <see cref="T:EO.Wpf.LinkButton" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.LinkButton.TextHoverStyle">
      <summary>
            Gets or sets the style for <see cref="T:System.Windows.Controls.TextBlock" /> controls inside the button when
            mouse is over the button.
            </summary>
      <remarks>
            The target type of this style must be <see cref="T:System.Windows.Controls.TextBlock" />. If not specified, the
            <see cref="T:EO.Wpf.LinkButton" /> use default blue foreground color and underline text style for 
            <see cref="T:System.Windows.Controls.TextBlock" /> objects inside the <see cref="T:EO.Wpf.LinkButton" />.
            </remarks>
    </member>
    <member name="T:EO.Wpf.Bitmap">
      <summary>
            Represents a control that displays a bitmap based on its pixel size instead
            of device independent size.
            </summary>
      <remarks>
            WPF's <see cref="T:System.Windows.Controls.Image" /> control displays an image based on the image's 
            device independent size, which can be different than the image's pixel size
            if the image's DPI is not the same as the target screen's DPI, in which case
            the image will be automatically scaled according to the target screen's DPI 
            settings, which often cause blurry images. EO.Wpf <see cref="T:EO.Wpf.Bitmap" /> control disables this logic and always 
            renders the image using its original pixel size.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Bitmap.RepeatXProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Bitmap.RepeatX" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Bitmap.RepeatYProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Bitmap.RepeatY" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Bitmap.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Bitmap" /> class.
            </summary>
    </member>
    <member name="F:EO.Wpf.Bitmap.SourceProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Bitmap.Source" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Bitmap.Source">
      <summary>
            Gets or sets the source of the bitmap.
            </summary>
    </member>
    <member name="P:EO.Wpf.Bitmap.RepeatX">
      <summary>
            Gets or sets a value indicating whether to repeat the image horizontally.
            </summary>
    </member>
    <member name="P:EO.Wpf.Bitmap.RepeatY">
      <summary>
            Gets or sets a value indicating whether to repeat the image vertically.
            </summary>
    </member>
    <member name="E:EO.Wpf.Bitmap.BitmapFailed">
      <summary>
            Occurs when the bitmap failed to load.
            </summary>
    </member>
    <member name="T:EO.Wpf.BitmapButton">
      <summary>
            A simple bitmap button with a border and an image.
            </summary>
    </member>
    <member name="F:EO.Wpf.BitmapButton.SourceProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.BitmapButton.Source" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.BitmapButton.BorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.BitmapButton.BorderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.BitmapButton.IsCheckedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.BitmapButton.IsChecked" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.BitmapButton.Source">
      <summary>
            Gets or sets the source of the bitmap.
            </summary>
    </member>
    <member name="P:EO.Wpf.BitmapButton.BorderStyle">
      <summary>
            Gets or sets the border style.
            </summary>
    </member>
    <member name="P:EO.Wpf.BitmapButton.IsChecked">
      <summary>
            Gets or sets a value indicating whether the button is in checked state.
            </summary>
      <remarks>
            This property does not automatically change the behavior or the appearance of the button.
            However it is often desired to have a bitmap button to display a different image when
            in "checked" or "pushed" state. In such case you can utilize this property to distinguish
            a different state of the button. For example, you can set this property to true in code,
            then use it as a trigger to switch <see cref="P:EO.Wpf.BitmapButton.Source" /> in your xaml.
            </remarks>
    </member>
    <member name="T:EO.Wpf.BooleanDependencyPropertyRoutedEventArgs">
      <summary>
            Provides event information for a boolean dependency property changed event.
            </summary>
    </member>
    <member name="P:EO.Wpf.BooleanDependencyPropertyRoutedEventArgs.OldValue">
      <summary>
            The old value.
            </summary>
    </member>
    <member name="P:EO.Wpf.BooleanDependencyPropertyRoutedEventArgs.NewValue">
      <summary>
            The new value.
            </summary>
    </member>
    <member name="M:EO.Wpf.BooleanDependencyPropertyRoutedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.BooleanDependencyPropertyRoutedEventArgs" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.BooleanDependencyPropertyRoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.BooleanDependencyPropertyRoutedEventArgs" /> class.
            </summary>
      <param name="routedEvent">The <see cref="T:System.Windows.RoutedEvent" /> object.</param>
      <param name="oldValue">The old value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="T:EO.Wpf.Button">
      <summary>
            Represents a push button.
            </summary>
      <remarks>
            This class provides the same functionalities as the standard WPF <see cref="T:System.Windows.Controls.Button" />
            control, but also supports dynamically switching themes like all other EO.Wpf controls.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Button.IsCancelProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Button.IsCancel" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Button.IsCancel">
      <summary>
            Gets or sets a value that indicates whether a Button is a Cancel button. 
            A user can activate the Cancel button by pressing the ESC key. 
            </summary>
    </member>
    <member name="F:EO.Wpf.Button.IsDefaultProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Button.IsDefault" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Button.IsDefault">
      <summary>
            Gets or sets a value that indicates whether a Button is the default button. A user 
            invokes the default button by pressing the ENTER key. 
            </summary>
    </member>
    <member name="F:EO.Wpf.Button.IsDefaultedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Button.IsDefaulted" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Button.IsDefaulted">
      <summary>
            Gets a value that indicates whether a Button is the button that is activated when a user presses ENTER. 
            </summary>
    </member>
    <member name="T:EO.Wpf.BareButton">
      <summary>
            Represents a button with no built-in background or border.
            </summary>
    </member>
    <member name="F:EO.Wpf.BareButton.BorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.BareButton.BorderStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.BareButton.BorderStyle">
      <summary>
            Gets or sets the border style.
            </summary>
    </member>
    <member name="T:EO.Wpf.DayNameFormat">
      <summary>
            Specifies the display format of the days of the week on the <see cref="T:EO.Wpf.Calendar" /> control.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayNameFormat.Full">
      <summary>
            The days of the week displayed in full format. For example, Monday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayNameFormat.Short">
      <summary>
            The days of the week displayed in abbreviated format. For example, Mon represents Monday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayNameFormat.FirstLetter">
      <summary>
            The days of the week displayed with just the first letter. For example, M represents Monday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayNameFormat.FirstTwoLetters">
      <summary>
            The days of the week displayed with just the first two letters. For example, Mo represents Monday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayNameFormat.Shortest">
      <summary>
            The days of the week displayed in the shortest abbreviation format possible for the current culture.
            </summary>
    </member>
    <member name="T:EO.Wpf.DayOfWeekFlags">
      <summary>
            Specifies the day of the week.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:EO.Wpf.DayOfWeekFlags.Sunday">
      <summary>
            Indicates Sunday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayOfWeekFlags.Monday">
      <summary>
            Indicates Monday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayOfWeekFlags.Tuesday">
      <summary>
            Indicates Tuesday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayOfWeekFlags.Wednesday">
      <summary>
            Indicates Wednesday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayOfWeekFlags.Thursday">
      <summary>
            Indicates Thursday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayOfWeekFlags.Friday">
      <summary>
            Indicates Friday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayOfWeekFlags.Saturday">
      <summary>
            Indicates Saturday.
            </summary>
    </member>
    <member name="F:EO.Wpf.DayOfWeekFlags.None">
      <summary>
      </summary>
    </member>
    <member name="T:EO.Wpf.WeekNumberFormat">
      <summary>
            Specifies whether week number should be relative to the month or to the year.
            </summary>
    </member>
    <member name="F:EO.Wpf.WeekNumberFormat.Monthly">
      <summary>
            The week number will be relative to the month.
            </summary>
    </member>
    <member name="F:EO.Wpf.WeekNumberFormat.Yearly">
      <summary>
            The week number will be relative to the whole year.
            </summary>
    </member>
    <member name="T:EO.Wpf.IDateRangeControl">
      <summary>
            The name of this interface is not important, its purpose is to share
            some code between <seealso cref="T:EO.Wpf.DatePicker" /> and the 
            <see cref="T:EO.Wpf.Calendar" /> controls.
            </summary>
    </member>
    <member name="T:EO.Wpf.Calendar">
      <summary>
            Displays a single or multiple months Calendar that allows the user to select dates.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.DayHeaderFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.DayHeaderFormat" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.ShowWeekNumberProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.ShowWeekNumber" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.WeekNumberFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.WeekNumberFormat" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.HighlightWeekendsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.HighlightWeekends" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.FirstDayOfWeekProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.FirstDayOfWeek" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.IsInMultiMonthViewProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.IsInMultiMonthView" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.MonthRowsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.MonthRows" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.MonthColumnsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.MonthColumns" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.HighlightTodayProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.HighlightToday" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.MinDateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.MinDate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.MaxDateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.MaxDate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.ShowDayHeadersProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.ShowDayHeaders" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.ShowHeaderProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.ShowHeader" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.SelectedDateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.SelectedDate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.SelectionModeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.SelectionMode" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.DayButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.DayButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.MonthStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.MonthStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.NextButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.NextButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.PreviousButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.PreviousButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.FirstVisibleMonthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.FirstVisibleMonth" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.LastVisibleMonthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.LastVisibleMonth" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.HeaderTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.WeekButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.WeekButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.MonthSelectorStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.MonthSelectorStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.DayHeaderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.DayHeaderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.MonthHeaderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.MonthHeaderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.WeekNumberSeparatorStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.WeekNumberSeparatorStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.DayHeaderSeparatorStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.DayHeaderSeparatorStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.MonthPickerStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.MonthPickerStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.HeaderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.HeaderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.FooterTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.FooterTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.ShowFooterProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.ShowFooter" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.FooterStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.FooterStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.TodayButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.TodayButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.DayColumnWidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.DayColumnWidth" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.EnableWeekSelectorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.EnableWeekSelector" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.EnableMonthSelectorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.EnableMonthSelector" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.EnableDayHeaderSelectorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.EnableDayHeaderSelector" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.ShowNonMonthDaysProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.ShowNonMonthDays" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.DisabledDaysOfWeekProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.DisabledDaysOfWeek" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.SelectedDateChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.Calendar.SelectedDateChanged" /> Routed Event.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.SelectedDatesChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.Calendar.SelectedDatesChanged" /> Routed Event.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.FirstVisibleMonthChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.Calendar.FirstVisibleMonthChanged" /> Routed Event.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.LastVisibleMonthChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.Calendar.LastVisibleMonthChanged" /> Routed Event.
            </summary>
    </member>
    <member name="M:EO.Wpf.Calendar.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Calendar" /> control.
            </summary>
    </member>
    <member name="M:EO.Wpf.Calendar.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Calendar" /> control.
            </summary>
    </member>
    <member name="P:EO.Wpf.Calendar.ShowWeekNumber">
      <summary>
            Gets or sets a value that indicates whether week numbers will be shown on each
            month within the <see cref="T:EO.Wpf.Calendar" />. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to show week numbers; otherwise <c>false</c>. The default value is <c>false</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.Calendar.EnableWeekSelector">
      <summary>
            Gets or sets a value that indicates whether week selection is
            enabled or not. This is a dependency property.
            </summary>
      <value>
        <c>True</c> to enable week selection; otherwise <c>false</c>. The
            default value is <c>false</c>.
            </value>
      <remarks>
        <para>
            Note that week selection can only be activated if the 
            <see cref="P:EO.Wpf.Calendar.SelectionMode" /> is set to 
            <see cref="F:System.Windows.Controls.SelectionMode.Multiple" /> or 
            <see cref="F:System.Windows.Controls.SelectionMode.Extended" />.
            </para>
        <para>
            Note that in order to use week selection after enabling it, 
            <see cref="P:EO.Wpf.Calendar.ShowWeekNumber" /> must be set to <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.EnableMonthSelector">
      <summary>
            Gets or sets a value that indicates whether month selection is
            enabled or not. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to enable month selection; otherwise <c>false</c>. The
            default value is <c>false</c>.
            </value>
      <remarks>
        <para>
            Note that month selection can only be enabled if the 
            <see cref="P:EO.Wpf.Calendar.SelectionMode" /> is set to 
            <see cref="F:System.Windows.Controls.SelectionMode.Multiple" /> or 
            <see cref="F:System.Windows.Controls.SelectionMode.Extended" />.
            </para>
        <para>
            After enabling month selection and the previous condition is met, a 
            <see cref="T:EO.Wpf.BareButton" /> appears at the top left corner of the 
            <see cref="T:EO.Wpf.Calendar" /> as illustrated in the following image:
            </para>
        <para>
          <img src="Wpf/Controls/Calendar/Calendar/month_selector.gif">
          </img>
        </para>
        <para>
            Note that the month <see cref="T:EO.Wpf.BareButton" /> can be styled via 
            <see cref="P:EO.Wpf.Calendar.MonthSelectorStyle" />.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.WeekNumberFormat">
      <summary>
            Gets or sets a value that indicates the strategy to use while computing the week number. This is a dependency property.
            </summary>
      <value>
            The default value is <see cref="F:EO.Wpf.WeekNumberFormat.Yearly" />.
            </value>
      <remarks>
        <para>
            Note that for the <c>WeekNumberFormat</c> property to be used, the <see cref="P:EO.Wpf.Calendar.ShowWeekNumber" /> property must be set to <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.HighlightWeekends">
      <summary>
            Gets or sets a value that indicates whether the weekend dates within
            the calendar should be highlighted. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to highlight weekends; otherwise <c>false</c>. The
            default is <c>false</c>. The default style highlights the weekend
            days as red when this property is set to <b>true</b>. 
            You can customize <see cref="P:EO.Wpf.Calendar.DayButtonStyle" /> to customize the highlight style.
            </value>
      <remarks>
        <para>
            The list of weekend days can be specified via the 
            <see cref="P:EO.Wpf.Calendar.WeekendDays" /> collection.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.HighlightToday">
      <summary>
            Gets or sets a value indicating whether today is highlighted.
            </summary>
      <value>
        <c>true</c> if the current date is highlighted; otherwise 
            <c>false</c>. The default value is <c>true</c>.
            </value>
      <remarks>
            You can customize <see cref="P:EO.Wpf.Calendar.DayButtonStyle" /> to customize the highlight style.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.FirstDayOfWeek">
      <summary>
            Gets or sets a value that indicates the day to use as the starting
            day of the calendar week. This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.DayOfWeek" /> values. The default value is 
            <see cref="F:System.DayOfWeek.Sunday" />.
            </value>
    </member>
    <member name="P:EO.Wpf.Calendar.WeekendDays">
      <summary>
            Gets or sets a collection of <see cref="T:System.DayOfWeek" /> values that
            represents the weekend days.
            </summary>
      <value>
            By default the collection is initialized using the following values:
            <see cref="F:System.DayOfWeek.Sunday" /> and <see cref="F:System.DayOfWeek.Saturday" />.
            </value>
      <example>
        <para>
            The following example changes the weekend days to
            <see cref="F:System.DayOfWeek.Friday" /> and <see cref="F:System.DayOfWeek.Saturday" />.
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:Calendar HighlightWeekends="True" Grid.Column="1" WeekendDays="Friday, Saturday"&gt;
            &lt;/eo:Calendar&gt;
            </code>
      </example>
    </member>
    <member name="P:EO.Wpf.Calendar.IsInMultiMonthView">
      <summary>
            Gets a value that indicates whether the <see cref="T:EO.Wpf.Calendar" /> is
            currently displaying more then one month. This is a dependency
            property.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:EO.Wpf.Calendar" /> is currently displaying
            more then one month; otherwise <c>false</c>. The default value is 
            <c>false</c>.
            </value>
      <remarks>
        <para>
            The following image illustrates the <see cref="T:EO.Wpf.Calendar" /> in multi-month view.
            <para><img src="Wpf/Controls/Calendar/Calendar/multi_month_view.gif"></img></para>
            The previous image can be created with the following XAML markup:
            <code lang="XML" title="XAML">
            &lt;eo:Calendar MonthRows="2" MonthColumns="2" /&gt;
            </code></para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.SelectionMode">
      <summary>
      </summary>
      <value>
            One of the <see cref="T:System.Windows.Controls.SelectionMode" /> enumeration values.
            The default value is <see cref="F:System.Windows.Controls.SelectionMode.Single" />.
            </value>
    </member>
    <member name="P:EO.Wpf.Calendar.SelectedDates">
      <summary>
            Gets or sets the currently selected dates.
            </summary>
      <remarks>
        <para>
            Note that this property is meant to be used when the 
            <see cref="P:EO.Wpf.Calendar.SelectionMode" /> is not 
            <see cref="F:System.Windows.Controls.SelectionMode.Single" />. Use 
            <see cref="P:EO.Wpf.Calendar.SelectedDate" /> if the selection  mode is 
            <see cref="F:System.Windows.Controls.SelectionMode.Single" />.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.SelectedDate">
      <summary>
            Gets or sets the first date in the current selection or null if the
            selection is empty. This is a dependency property.
            </summary>
      <value>The first date in the current selection or <c>null</c> if the
            selection is empty.</value>
    </member>
    <member name="P:EO.Wpf.Calendar.DisabledDaysOfWeek">
      <summary>
            Gets or sets which days in the week should be disabled. This is a dependency property.
            </summary>
      <remarks>
        <para>
            The following code disables Monday and Friday:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:Calendar DisabledDaysOfWeek="Friday,Monday"&gt;
            &lt;/eo:Calendar&gt;
            </code>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.DisabledDates">
      <summary>
            Gets a collection of disabled date ranges.
            </summary>
      <remarks>
        <para>
            Use this property to specify a collection of disabled date in the
            calendar. 
            </para>
        <para>
            The following code demonstrates how to set this property in XAML:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:Calendar.DisabledDates&gt;
                &lt;!--A DateRange that covers the whole year of 2011  --&gt;
                &lt;eo:DateRange StartDate="2011/1/1" EndDate="2011/12/31"&gt;
                &lt;/eo:DateRange&gt;
                &lt;!-- A DateRange that covers a single date --&gt;
                &lt;eo:DateRange StartDate="2012/3/1" /&gt;
            &lt;/eo:Calendar.DisabledDates&gt;
            </code>
        <para>
            The following code demonstrates how to use this property in code:
            </para>
        <code lang="C#" title="C#">
            //Add a DateRange that covers the whole year of 2011
            Calendar1.DisabledDates.Add(new DateRange(new DateTime(2011, 1, 1), new DateTime(2011, 12, 31)));
            
            //Add a DateRange that covers a single date
            Calendar1.DisabledDates.Add(new DateTime(2012, 3, 1));
            </code>
        <code lang="VB" title="Visual Basic.NET">
            'Add a DateRange that covers the whole year of 2011
            Calendar1.DisabledDates.Add(New DateRange(New DateTime(2011, 1, 1), New DateTime(2011, 12, 31)))
            
            'Add a DateRange that covers a single date
            Calendar1.DisabledDates.Add(New DateTime(2012, 3, 1))
            </code>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.MinDate">
      <summary>
            Gets or sets the minimum selectable date. This is a dependency property.
            </summary>
      <value>
            The minimum selectable date. The default value is <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>.
            </value>
    </member>
    <member name="P:EO.Wpf.Calendar.MaxDate">
      <summary>
            Gets or sets the maximum selectable date. This is a dependency property.
            </summary>
      <value>
            The maximum selectable date. The default value is <see cref="F:System.DateTime.MaxValue">DateTime.MaxValue</see>.
            </value>
    </member>
    <member name="P:EO.Wpf.Calendar.FirstVisibleMonth">
      <summary>
            Gets or sets a <see cref="T:System.DateTime" /> value that indicates the first
            visible month of the <see cref="T:EO.Wpf.Calendar" />. This is a dependency
            property.
            </summary>
      <value>
            A <see cref="T:System.DateTime" /> value that indicates the first visible
            month. Only the year and month portion of the <see cref="T:System.DateTime" />
            value are being used.
            </value>
      <remarks>
        <para>
            Note that if the calendar has a single month <b>FirstVisibleMonth
            </b> will have the same value as <see cref="P:EO.Wpf.Calendar.LastVisibleMonth" />.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.LastVisibleMonth">
      <summary>
            Gets or sets a <see cref="T:System.DateTime" /> value that indicates the last
            visible month of the <see cref="T:EO.Wpf.Calendar" />. This is a dependency
            property.
            </summary>
      <value>
            A <see cref="T:System.DateTime" /> value that indicates the last visible
            month. Only the year and month portion of the <see cref="T:System.DateTime" />
            value are being used.
            </value>
    </member>
    <member name="P:EO.Wpf.Calendar.ShowDayHeaders">
      <summary>
            Gets or sets a value that indicates whether the calendar days header
            is visible. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to the calendar days header; otherwise 
            <c>false</c>. The default value is <c>true</c>.</value>
    </member>
    <member name="P:EO.Wpf.Calendar.DayHeaderFormat">
      <summary>
            Gets or sets a value that indicates which format of day name to
            display in the day header area. This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.DayNameFormat" /> enumeration values. The
            default is <see cref="F:EO.Wpf.DayNameFormat.Short" />.
            </value>
      <remarks>
        <para>
            For all the possible formats see <see cref="T:EO.Wpf.DayNameFormat" />.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.ShowHeader">
      <summary>
            Gets or sets the visibility of the <see cref="T:EO.Wpf.Calendar" />'s control
            header section.
            </summary>
    </member>
    <member name="P:EO.Wpf.Calendar.HeaderTemplate">
      <summary>
            Gets or sets the data template used to display the content of the
            calendar header.
            </summary>
      <remarks>
        <para>
          <see cref="P:EO.Wpf.Calendar.ShowHeader" /> must be set to <b>true</b> in order for the
            <see cref="T:EO.Wpf.Calendar" /> control to display the header.
            </para>
        <para>
            See <a href="Wpf/Controls/Calendar/Calendar/header_footer.html">here</a>
            for more information about how to customize header and footer.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.MonthPickerStyle">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Style" /> for the <see cref="T:EO.Wpf.MonthPicker" />
            used within the <see cref="T:EO.Wpf.Calendar" />. This is a dependency
            property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Calendar/Calendar/header_footer.html#month_picker">here</a> for more
            details on how to use this property.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.HeaderStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> for the header section. This is a dependency property.
            </summary>
      <remarks>
            The target type for this style is <see cref="T:System.Windows.Controls.Border" />.
            See <a href="Wpf/Controls/Calendar/Calendar/header_footer.html">here</a>
            for more information about how to customize header and footer.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.FooterTemplate">
      <summary>
            Gets or sets the template for the footer section. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Calendar/Calendar/header_footer.html">here</a>
            for more information about how to customize header and footer.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.ShowFooter">
      <summary>
            Gets or sets a value that indicates whether the footer of the 
            <see cref="T:EO.Wpf.Calendar" /> is shown or not. This is a dependency
            property.
            </summary>
      <value>
        <c>true</c> to show the footer of the <see cref="T:EO.Wpf.Calendar" />;
            otherwise <c>false</c>. The default value is <c>true</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.Calendar.FooterStyle">
      <summary>
            Gets or sets the style for the footer section. This is a dependency property.
            </summary>
      <remarks>
            The target type for this style is <see cref="T:System.Windows.Controls.Border" />. 
            See <a href="Wpf/Controls/Calendar/Calendar/header_footer.html">here</a>
            for more information about how to customize header and footer.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.ShowNonMonthDays">
      <summary>
            Gets or sets a value that indicates whether non-month days are shown
            on the <see cref="T:EO.Wpf.Calendar" /> or not. This is a dependency property.
            </summary>
      <remarks>
            "Non-month days" are the days that does not belong to a month in which
            it is displayed. For example, 2/1/2013 may be displayed in month January, 2013's
            month view but does not belong to that month.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.TodayButtonStyle">
      <summary>
            Gets or sets the style for the "Today" button. This is a dependency property.
            </summary>
      <remarks>
            By default, the <see cref="T:EO.Wpf.Calendar" /> displays "Today" button in the footer.
            Clicking the button select today in the Calendar.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.DayColumnWidth">
      <summary>
            Gets or sets the width of each day column. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Calendar/Calendar/day_header.html#format">here</a> for more details
            about this property.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.MonthRows">
      <summary>
            Gets or sets a value that indicates the number of month rows in the <see cref="T:EO.Wpf.Calendar" />. This is a dependency property.
            </summary>
      <remarks>
        <para>
            The following image illustrates the <see cref="T:EO.Wpf.Calendar" /> in multi-month view.
            <para><img src="Wpf/Controls/Calendar/Calendar/multi_month_view.gif"></img></para>
            The previous image can be created with the following XAML markup:
            <code lang="XML" title="XAML">
            &lt;eo:Calendar MonthRows="2" MonthColumns="2" /&gt;
            </code></para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.MonthColumns">
      <summary>
            Gets or sets a value that indicates the number of month columns in the <see cref="T:EO.Wpf.CalendarMonth" />. This is a dependency property.
            </summary>
      <remarks>
        <para>
            The following image illustrates the <see cref="T:EO.Wpf.Calendar" /> in multi-month view.
            <para><img src="Wpf/Controls/Calendar/Calendar/multi_month_view.gif"></img></para>
            The previous image can be created with the following XAML markup:
            <code lang="XML" title="XAML">
            &lt;eo:Calendar MonthRows="2" MonthColumns="2" /&gt;
            </code></para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.DayButtonStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> for the <b>Calendar</b> day buttons. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Calendar/Calendar/day_style.html">here</a> for more details about this property.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.DayHeaderStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to each day header in
            the day header area. This is a dependency property.
            </summary>
      <remarks>
        <para>
            The target type of this style is <see cref="T:EO.Wpf.BareButton" />.
            The following XAML markup illustrates the usage of this property to
            make each day header text look bold:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:Calendar&gt;
               &lt;eo:Calendar.DayHeaderStyle&gt;
                   &lt;Style TargetType="eo:BareButton"&gt;
                       &lt;Setter Property="FontWeight" Value="Bold" /&gt;
                       &lt;Setter Property="Padding" Value="5,0" /&gt;
                   &lt;/Style&gt;
               &lt;/eo:Calendar.DayHeaderStyle&gt;
            &lt;/eo:Calendar&gt;
            </code>
        <para>
            The previous XAML markup produces the following result:
            </para>
        <img src="Wpf/Controls/Calendar/Calendar/day_header4.gif">
        </img>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.DayHeaderSeparatorStyle">
      <summary>
            Gets or sets the day header separator style. This is a dependency property.
            </summary>
      <remarks>
            The target type for this style is <see cref="T:System.Windows.Shapes.Rectangle" />.
            See <a href="Wpf/Controls/Calendar/Calendar/day_header.html#separator">here</a> for more
            information about this property.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.WeekNumberSeparatorStyle">
      <summary>
            Gets or sets the style to be applied to week number separator. This is a dependency property.
            </summary>
      <remarks>
            The target type for this style is <see cref="T:System.Windows.Shapes.Rectangle" />.
            See <a href="Wpf/Controls/Calendar/Calendar/date_selection.html#selector">here</a> for more details
            about this property.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.WeekButtonStyle">
      <summary>
            Gets or sets the style to be applied to week buttons. This is a dependency property.
            </summary>
      <remarks>
            Week buttons are the numbers displayed in front of each week when 
            <see cref="P:EO.Wpf.Calendar.ShowWeekNumber" /> is set to <b>true</b>. The target type
            of this style is <see cref="T:EO.Wpf.BareButton" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.MonthSelectorStyle">
      <summary>
            Gets or sets the style for the month selector. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Calendar/Calendar/date_selection.html#selector">here</a>
            for more information on how to use this property.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.MonthStyle">
      <summary>
            Gets or sets the styles applied to the <see cref="T:EO.Wpf.CalendarMonth" /> elements in this <see cref="T:EO.Wpf.Calendar" />. This is a dependency property.
            </summary>
      <remarks>
            The <see cref="T:EO.Wpf.Calendar" /> control creates one <see cref="T:EO.Wpf.CalendarMonth" /> element for each month.
            This style applies to those elements.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.MonthHeaderStyle">
      <summary>
            Gets or sets the month header style. This is a dependency property.
            </summary>
      <remarks>
            This property is only used in multi-month view. Do not confuse this property
            with <see cref="P:EO.Wpf.Calendar.HeaderStyle" />. <see cref="P:EO.Wpf.Calendar.HeaderStyle" /> applies to the whole
            <see cref="T:EO.Wpf.Calendar" /> header, where as <see cref="P:EO.Wpf.Calendar.MonthHeaderStyle" /> applies
            the header section for each month. The target type for this style is
            <see cref="T:System.Windows.Controls.Label" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.NextButtonStyle">
      <summary>
            Gets or sets the style for the "next month" button. This is a dependency property.
            </summary>
      <remarks>
            The target type for this style is <see cref="T:System.Windows.Controls.Primitives.RepeatButton" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.PreviousButtonStyle">
      <summary>
            Gets or sets the style for the "previous month" button. This is a dependency property.
            </summary>
      <remarks>
            The target type for this style is <see cref="T:System.Windows.Controls.Primitives.RepeatButton" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.EnableDayHeaderSelector">
      <summary>
            Gets or sets a value indicating whether user can click a day header to select the whole column in that month. This is a dependency property.
            </summary>
      <remarks>
            When this property is set to <b>true</b> and <see cref="P:EO.Wpf.Calendar.SelectionMode" /> is not set
            to <see cref="F:System.Windows.Controls.SelectionMode.Single" />, user will be able to click a day header to
            select the whole column in that month. For example, clicking the day header for "Monday"
            will select all Mondays in that month.
            </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.NextPage">
      <summary>
            Gets a command that navigates forward the <see cref="T:EO.Wpf.Calendar" /> by one page.
            </summary>
      <remarks>
        <para>
            A page is equal to the number of month instances in the <see cref="T:EO.Wpf.Calendar" />.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.PreviousPage">
      <summary>
            Gets a command that navigates back the <see cref="T:EO.Wpf.Calendar" /> by one page.
            </summary>
      <remarks>
        <para>
            A page is equal to the number of month instances in the <see cref="T:EO.Wpf.Calendar" />.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.Calendar.NextMonth">
      <summary>
            Gets a command that causes the Calendar scrolls to the next month.
            </summary>
    </member>
    <member name="P:EO.Wpf.Calendar.PreviousMonth">
      <summary>
            Gets a command that causes the Calendar scrolls to the previous month.
            </summary>
    </member>
    <member name="P:EO.Wpf.Calendar.Today">
      <summary>
            Gets a command that selects today in the <see cref="T:EO.Wpf.Calendar" />.
            </summary>
    </member>
    <member name="E:EO.Wpf.Calendar.SelectedDateChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.Calendar.SelectedDate" /> value change.
            </summary>
    </member>
    <member name="E:EO.Wpf.Calendar.SelectedDatesChanged">
      <summary>
            Occurs when the <see cref="P:EO.Wpf.Calendar.SelectedDates" /> collection change.
            </summary>
    </member>
    <member name="E:EO.Wpf.Calendar.FirstVisibleMonthChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.Calendar.FirstVisibleMonth" /> value change.
            </summary>
    </member>
    <member name="E:EO.Wpf.Calendar.LastVisibleMonthChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.Calendar.LastVisibleMonth" /> value change.
            </summary>
    </member>
    <member name="M:EO.Wpf.Calendar.OnSelectedDateChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Raises the <see cref="E:EO.Wpf.Calendar.SelectedDateChanged" /> routed event.
            </summary>
      <param name="oldSelectedDate">The old value of <see cref="P:EO.Wpf.Calendar.SelectedDate" />.</param>
      <param name="newSelectedDate">The new value of <see cref="P:EO.Wpf.Calendar.SelectedDate" />.</param>
    </member>
    <member name="M:EO.Wpf.Calendar.OnSelectedDatesChanged">
      <summary>
            Raises the <see cref="E:EO.Wpf.Calendar.SelectedDatesChanged" /> routed event.
            </summary>
    </member>
    <member name="M:EO.Wpf.Calendar.OnFirstVisibleMonthChanged(System.DateTime)">
      <summary>
            Raises the <see cref="E:EO.Wpf.Calendar.FirstVisibleMonthChanged" /> event.
            </summary>
      <param name="newDate">The new date.</param>
    </member>
    <member name="M:EO.Wpf.Calendar.OnLastVisibleMonthChanged(System.DateTime)">
      <summary>
            Raises the <see cref="E:EO.Wpf.Calendar.LastVisibleMonthChanged" /> event.
            </summary>
      <param name="newDate">The new date.</param>
    </member>
    <member name="M:EO.Wpf.Calendar.IsDateSelectable(System.DateTime)">
      <summary>
            Check if a date can be selected
            </summary>
      <param name="date">The <see cref="T:System.DateTime" /> instance.</param>
      <returns>True if the date can be selected.</returns>
    </member>
    <member name="M:EO.Wpf.Calendar.UpdateCalendarMonths(System.Boolean,System.Boolean)">
      <summary>
            Will generate <see cref="T:EO.Wpf.CalendarMonth" /> instances for the <see cref="T:EO.Wpf.Calendar" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Calendar.EnableTransitionEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Calendar.EnableTransitionEffect" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Calendar.EnableTransitionEffect">
      <summary>
            Gets or sets a value indicating whether the Calendar should play a slide effect when user
            scrolls the Calendar. This is a dependency property.
            </summary>
    </member>
    <member name="T:EO.Wpf.CalendarDayButton">
      <summary>
            Represents a single date in a <see cref="T:EO.Wpf.Calendar" /> control.
            </summary>
    </member>
    <member name="F:EO.Wpf.CalendarDayButton.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.CalendarDayButton.IsSelected" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.CalendarDayButton.IsDisabledProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.CalendarDayButton.IsDisabled" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.CalendarDayButton.IsWeekendProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.CalendarDayButton.IsWeekend" /> read-only dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.CalendarDayButton.IsNoneMonthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.CalendarDayButton.IsNoneMonth" /> read-only dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.CalendarDayButton.IsTodayProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.CalendarDayButton.IsToday" /> read-only dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.CalendarDayButton.SelectedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.CalendarDayButton.Selected" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.CalendarDayButton.UnselectedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.CalendarDayButton.Unselected" /> routed event.
            </summary>
    </member>
    <member name="M:EO.Wpf.CalendarDayButton.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.CalendarDayButton" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.CalendarDayButton.IsSelected">
      <summary>
            Gets or sets a value that indicates whether the <see cref="T:EO.Wpf.CalendarDayButton" />
            is selected. this is a dependency property.
            </summary>
      <remarks>
        <para> A <see cref="T:EO.Wpf.CalendarDayButton" /> instance can be selected, either:
            </para>
        <list type="number">
          <item>
            <description>By clicking on the button in the Calendar user interface,</description>
          </item>
          <item>
            <description>Or by setting the date represented by the <see cref="T:EO.Wpf.CalendarDayButton" />
            to the <see cref="P:EO.Wpf.Calendar.SelectedDate" /> or adding it to the <see cref="P:EO.Wpf.Calendar.SelectedDates" />
            collection.</description>
          </item>
        </list>
        <para>
            Note that when you selected a date through the Calendar UI, it will update
            <see cref="P:EO.Wpf.Calendar.SelectedDate" /> if <see cref="P:EO.Wpf.Calendar.SelectionMode" />
            is <see cref="F:System.Windows.Controls.SelectionMode.Single" /> or added to <see cref="P:EO.Wpf.Calendar.SelectedDates" />
            if <see cref="P:EO.Wpf.Calendar.SelectionMode" /> is <see cref="F:System.Windows.Controls.SelectionMode.Multiple" />.
            </para>
      </remarks>
      <value>
        <c>true</c> if the date represented by this isntance of <see cref="T:EO.Wpf.CalendarDayButton" /> is selected; otherwise <c>false</c>. The default value is <c>false</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.CalendarDayButton.IsDisabled">
      <summary>
            Gets a value that indicates whether the <see cref="T:System.DateTime">Date</see> represented
            by this <see cref="T:EO.Wpf.CalendarDayButton" /> instance belongs to the <see cref="P:EO.Wpf.Calendar.DisabledDates" /> collection.
            </summary>
      <value>
        <c>true</c> if the date represented by this <see cref="T:EO.Wpf.CalendarDayButton" /> is disabled; otherwise <c>false</c>.
            The default value is <c>false</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.CalendarDayButton.IsWeekend">
      <summary>
            Gets a value that indicates whether the <see cref="T:System.DateTime">date</see> represented
            by this <see cref="T:EO.Wpf.CalendarDayButton" /> instance is a weekend date.
            </summary>
      <value>
        <c>true</c> if the date is a weekend date; otherwise <c>false</c>. The default value is <c>false</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.CalendarDayButton.IsToday">
      <summary>
            Gets a value that indicates whether the <see cref="T:System.DateTime">date</see> represented
            by this <see cref="T:EO.Wpf.CalendarDayButton" /> instance is current system date.
            </summary>
      <value>
        <c>true</c> if the date is the current system date; otherwise <c>false</c>. The default value is <c>false</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.CalendarDayButton.IsNoneMonth">
      <summary>
            Gets a value that indicates whether the the <see cref="T:System.DateTime">Date</see>
            instance represented by this <see cref="T:EO.Wpf.CalendarDayButton" /> is not part of
            the current calendar's <see cref="P:EO.Wpf.CalendarDayButton.CalendarMonth" /> instance.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.DateTime">Date</see> instance represented by this <see cref="T:EO.Wpf.CalendarDayButton" /> is
            not part of the current calendar's <see cref="P:EO.Wpf.CalendarDayButton.CalendarMonth" /> instance; otherwise <c>false</c>.
            the default value is <c>false</c>.
            </value>
    </member>
    <member name="E:EO.Wpf.CalendarDayButton.Selected">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.CalendarDayButton" /> is selected.
            </summary>
    </member>
    <member name="E:EO.Wpf.CalendarDayButton.Unselected">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.CalendarDayButton" /> is unselected.
            </summary>
    </member>
    <member name="T:EO.Wpf.CalendarMonth">
      <summary>
            Represents a primitive control that displays a single month used within
            the <see cref="T:EO.Wpf.Calendar" /> control.
            </summary>
    </member>
    <member name="F:EO.Wpf.CalendarMonth.DisplayDateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.CalendarMonth.DisplayDate" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.CalendarMonth.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.CalendarMonth" /> control.
            </summary>
    </member>
    <member name="M:EO.Wpf.CalendarMonth.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.CalendarMonth" /> control.
            </summary>
    </member>
    <member name="P:EO.Wpf.CalendarMonth.DisplayDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime">Date</see> of the current visible month
            for this <see cref="T:EO.Wpf.CalendarMonth" /> instance.
            </summary>
      <value>
            The default value is <see cref="P:System.DateTime.Today" />.
            </value>
      <remarks>
        <para> Note that only the month and year of this date are used, both of the
            following values will produce the same result.</para>
        <list type="bullet">
          <item>
            <description>4/1/2013</description>
          </item>
          <item>
            <description>4/15/2013</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:EO.Wpf.DatePicker">
      <summary>
            Represents a control that allows the user to select a date from a
            drop-down <see cref="T:EO.Wpf.Calendar" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.IsDropDownOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DatePicker.IsDropDownOpen" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.SelectedDateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DatePicker.SelectedDate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.MinDateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DatePicker.MinDate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.MaxDateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DatePicker.MaxDate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.PickerFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DatePicker.PickerFormat" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.CalendarStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DatePicker.CalendarStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.CalendarButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DatePicker.CalendarButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.FirstDayOfWeekProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DatePicker.FirstDayOfWeek" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.DayHeaderFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DatePicker.DayHeaderFormat" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.DisabledDaysOfWeekProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DatePicker.DisabledDaysOfWeek" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.DatePicker.#cctor">
      <summary>
            Initializes static memebrs of the <see cref="T:EO.Wpf.DatePicker" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.DatePicker.IsDropDownOpen">
      <summary>
            Gets or sets a value that indicates whether the drop down 
            <see cref="T:EO.Wpf.Calendar" /> is open. This is a dependency property.
            </summary>
      <value>
        <c>True</c> if the drop down <see cref="T:EO.Wpf.Calendar" /> is open;
            otherwise <c>false</c>. The default value is <c>false</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.DatePicker.DisabledDaysOfWeek">
      <summary>
            Gets or sets which days in the week should be disabled. This is a
            dependency property.
            </summary>
      <value>
            One or more values of the <see cref="T:EO.Wpf.DayOfWeekFlags" /> separated
            by a comma. The default value is 
            <see cref="F:EO.Wpf.DayOfWeekFlags.None" />.
            </value>
      <example>
        <para>
            The following code disables Monday, Tuesday and Wednesday:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:DatePicker DisabledDaysOfWeek="Monday,Tuesday,Wednesday" /&gt;
            </code>
      </example>
    </member>
    <member name="P:EO.Wpf.DatePicker.PickerFormat">
      <summary>
            Gets or sets a string value that represents the format of the <see cref="P:EO.Wpf.DatePicker.SelectedDate" /> value. This is a dependency property.
            </summary>
      <value>
            A string value that represents the format of the 
            <see cref="P:EO.Wpf.DatePicker.SelectedDate" />value. The default value is "d".
            </value>
      <remarks>
        <para> The <see cref="T:EO.Wpf.DatePicker" /> control can recognize common 
            <see cref="T:System.DateTime" /> patterns, the following table illustrates the list
            of patterns supported:
            </para>
        <table class="dtTABLE" cellspacing="0">
          <tr>
            <th>Picker Format</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>d</td>
            <td>Short date pattern.</td>
          </tr>
          <tr>
            <td>D</td>
            <td>Long date pattern.</td>
          </tr>
          <tr>
            <td>f</td>
            <td>Full date/time pattern (short time).</td>
          </tr>
          <tr>
            <td>F</td>
            <td>Full date/time pattern (long time).</td>
          </tr>
          <tr>
            <td>g</td>
            <td>General date/time pattern (short time).</td>
          </tr>
          <tr>
            <td>G</td>
            <td>General date/time pattern (long time).</td>
          </tr>
          <tr>
            <td>M or m</td>
            <td>Month/day pattern.</td>
          </tr>
          <tr>
            <td>O or o</td>
            <td>Round-trip date/time pattern.</td>
          </tr>
          <tr>
            <td>R or r</td>
            <td>RFC1123 pattern.</td>
          </tr>
          <tr>
            <td>s</td>
            <td>Sortable date/time pattern.</td>
          </tr>
          <tr>
            <td>t</td>
            <td>Short time pattern.</td>
          </tr>
          <tr>
            <td>T</td>
            <td>Long time pattern.</td>
          </tr>
          <tr>
            <td>u</td>
            <td>Universal sortable date/time pattern.</td>
          </tr>
          <tr>
            <td>U</td>
            <td>Universal full date/time pattern.</td>
          </tr>
          <tr>
            <td>Y or y</td>
            <td>Year month pattern.</td>
          </tr>
        </table>
        <para>
            For more information on standard <see cref="T:System.DateTime" /> format
            string see 
            <a href="http://msdn.microsoft.com/en-us/library/az4se3k1.aspx">this MSDN page</a>.
            </para>
            If none of the standard <see cref="T:System.DateTime" /> format strings suit a
            user particular needs. A custom Picker format can be used, the following XAML usses a custom picker format values:
            <code lang="XML" title="XAML">
            &lt;eo:DatePicker SelectedDate="1/1/2013" PickerFormat="yyyy -- MMM -- dd dddd" /&gt;
            </code>
            The following table lists all the specifiers that can be used:
            <table class="dtTABLE" cellspacing="0"><tr><th>Specifier</th><th>Description</th></tr><tr><td>d</td><td>Displays the current day of the month, measured as a
                    number between 1 and 31, inclusive. If the day is a single
                    digit only (1-9), then it is displayed as a single digit.
                    </td></tr><tr><td>dd</td><td>Displays the current day of the month, measured as a
                    number between 1 and 31, inclusive. If the day is a single
                    digit only (1-9), it is formatted with a preceding 0
                    (01-09).</td></tr><tr><td>ddd</td><td>Displays the abbreviated name of the day for the
                    specified DateTime. It uses the 
                    <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" /> list
                    from the 
                    <see cref="P:System.Windows.FrameworkElement.Language" /> equivalent 
                    <see cref="T:System.Globalization.CultureInfo" /> object.</td></tr><tr><td>dddd</td><td>Displays the full name of the day for the specified
                    DateTime. It uses the 
                    <see cref="P:System.Globalization.DateTimeFormatInfo.DayNames" /> list from the 
                    <see cref="P:System.Windows.FrameworkElement.Language" /> equivalent 
                    <see cref="T:System.Globalization.CultureInfo" /> object.</td></tr><tr><td>M</td><td>Displays the month, measured as a number between 1 and
                    12, inclusive. If the month is a single digit (1-9), it is
                    displayed as a single digit.</td></tr><tr><td>MM</td><td>Displays the month, measured as a number between 1 and
                    12, inclusive. If the month is a single digit (1-9), it is
                    formatted with a preceding 0 (01-09).</td></tr><tr><td>MMM</td><td>Displays the abbreviated name of the month for the 
                    <see cref="P:EO.Wpf.DatePicker.SelectedDate" />. It uses the 
                    <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" /> from
                    the <see cref="P:System.Windows.FrameworkElement.Language" /> equivalent
                    <see cref="T:System.Globalization.CultureInfo" /> object.</td></tr><tr><td>MMMM</td><td>Displays the full name of the month for the 
                    <see cref="P:EO.Wpf.DatePicker.SelectedDate" />. It uses the 
                    <see cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" /> from the 
                    <see cref="P:System.Windows.FrameworkElement.Language" /> equivalent
                    <see cref="T:System.Globalization.CultureInfo" /> object.</td></tr><tr><td>y</td><td>Displays the year for the specified DateTime as a
                    maximum two-digit number. The first two digits of the year
                    are omitted. If the year is a single digit (1-9), it is
                    displayed as a single digit.</td></tr><tr><td>yy</td><td>Displays the year for the specified DateTime as a
                    maximum two-digit number. The first two digits of the year
                    are omitted. If the year is a single digit (1-9), it is
                    formatted with a preceding 0 (01-09).</td></tr><tr><td>yyy</td><td>Displays the year for the <see cref="P:EO.Wpf.DatePicker.SelectedDate" />,
                    as a three-digit number. If the year is less than three digits
                    in length, then preceding zeros are appended as necessary to
                    make the displayed year three digits long.</td></tr><tr><td>yyyy</td><td>Displays the year for the <see cref="P:EO.Wpf.DatePicker.SelectedDate" />,
                    including the century. If the year is less than four digits
                    in length, then preceding zeros are appended as necessary to
                    make the displayed year four digits long.</td></tr><tr><td>yyyyy</td><td>Displays the year for the <see cref="P:EO.Wpf.DatePicker.SelectedDate" />, as a
                    five-digit number. If the year is less then five digits in
                    length, then preceding zeros are appended as necessary to
                    make the displayed year five digits long.
                    </td></tr></table></remarks>
    </member>
    <member name="P:EO.Wpf.DatePicker.FirstDayOfWeek">
      <summary>
            Gets or sets a value that indicates the day to use as the starting
            day of the <see cref="T:EO.Wpf.DatePicker" /> dropdown <see cref="T:EO.Wpf.Calendar" />.
            This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.DayOfWeek" /> values. The default value is 
            <see cref="F:System.DayOfWeek.Sunday" />.
            </value>
    </member>
    <member name="P:EO.Wpf.DatePicker.DayHeaderFormat">
      <summary>
            Gets or sets the value that indicates which format of day name to
            display in the Calendar's day header area. This is a dependency
            property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.DayNameFormat" /> enumeration values. The
            default value is <see cref="F:EO.Wpf.DayNameFormat.Short" />.
            </value>
    </member>
    <member name="P:EO.Wpf.DatePicker.CalendarStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> for the drop down <see cref="T:EO.Wpf.Calendar" />.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.DatePicker.CalendarButtonStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> for the button that triggers
            the <see cref="T:EO.Wpf.DropDown" /><see cref="T:EO.Wpf.Calendar" />. This is a
            dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.DatePicker.MinDate">
      <summary>
            Gets or sets the minimum selectable date. This is a dependency
            property.
            </summary>
      <value>
            The minimum selectable date. The default value is
            <see cref="F:System.DateTime.MinValue" /> .
            </value>
    </member>
    <member name="P:EO.Wpf.DatePicker.MaxDate">
      <summary>
            Gets or sets the maximum selectable date. This is a dependency
            property.
            </summary>
      <value>
            The maximum selectable date. The default value is 
            <see cref="F:System.DateTime.MaxValue" />.
            </value>
    </member>
    <member name="P:EO.Wpf.DatePicker.SelectedDate">
      <summary>
            Gets or sets the selected <see cref="T:System.DateTime" /> value. This is a
            dependency property.
            </summary>
      <value>
            The selected <see cref="T:System.DateTime" /> value. The default value is 
            <c>null</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.DatePicker.DisabledDates">
      <summary>
            Gets a collection of disabled date ranges.
            </summary>
      <remarks>
        <para>
            For more details on how to use this property, <see cref="P:EO.Wpf.Calendar.DisabledDates">see here</see>.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.DatePicker.SelectedDateChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DatePicker.SelectedDateChanged" /> Routed Event.
            </summary>
    </member>
    <member name="E:EO.Wpf.DatePicker.SelectedDateChanged">
      <summary>
            Occurs after the <see cref="P:EO.Wpf.DatePicker.SelectedDate" /> has been changed.
            </summary>
    </member>
    <member name="M:EO.Wpf.DatePicker.RaiseSelectedDateChangedEvent(System.Windows.DependencyObject,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            A static helper method to raise the SelectedDateChanged event on a target element.
            </summary>
    </member>
    <member name="M:EO.Wpf.DatePicker.OnMinDateChanged(System.DateTime,System.DateTime)">
      <summary>
            Provides derived classes an opportunity to handle changes to the MinDate property.
            </summary>
    </member>
    <member name="M:EO.Wpf.DatePicker.OnMaxDateChanged(System.DateTime,System.DateTime)">
      <summary>
            Provides derived classes an opportunity to handle changes to the MaxDate property.
            </summary>
    </member>
    <member name="M:EO.Wpf.DatePicker.OnSelectedDateChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Provides derived classes an opportunity to handle changes to the SelectedDate property.
            </summary>
    </member>
    <member name="M:EO.Wpf.DatePicker.InvalidateMaskedEditText">
      <summary>
            This method ensures that the m_maskedEdit Text property has the
            SelectedDate value formatted using PickerFormat, or empty if no selected date.
            </summary>
    </member>
    <member name="M:EO.Wpf.DatePicker.BuildMaskSegments">
      <summary>
            Parses the <see cref="P:EO.Wpf.DatePicker.PickerFormat" /> value and build the corresponding <see cref="T:EO.Wpf.MaskedEdit" /> mask segments.
            </summary>
      <remarks>
        <para>
            Note that in case <see cref="P:EO.Wpf.DatePicker.PickerFormat" /> is empty or invalid the long date pattern is used instead.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.DatePicker.GetDate(System.Boolean@)">
      <summary>
            this method will return the SelectedDate if there is a value or
            make the selected date the current date if the user interact with the segments
            while no value is selected.
            </summary>
    </member>
    <member name="M:EO.Wpf.DatePicker.IsValidDateFormat(System.String)">
      <summary>
            Validates a date format string.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.DayOfWeekKind.SingleDigit">
      <summary>
            The day of week is represented as a single-digit formatted without a leading zero.
            For example 1,2,..31
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.DayOfWeekKind.SingleDigitFormatted">
      <summary>
            The day of week is represented as a single-digit formatted with a leading zero.
            For example 01,02,..31
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.DayOfWeekKind.Abbreviated">
      <summary>
            The day of week is represented in its abbreviated form using the Control.Language equivalent culture.
            For example Sat,Sun...etc.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.DayOfWeekKind.FullName">
      <summary>
            The day of week is represented in its full name.
            </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.MonthKind.SingleDigit">
      <summary>
      </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.MonthKind.SingleDigitFormatted">
      <summary>
      </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.MonthKind.Abbreviated">
      <summary>
      </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.MonthKind.FullName">
      <summary>
      </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.YearKind.SingleDigit">
      <summary>
      </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.YearKind.TwoDigit">
      <summary>
      </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.YearKind.ThreeDigit">
      <summary>
      </summary>
    </member>
    <member name="F:EO.Wpf.DatePicker.YearKind.FourDigit">
      <summary>
      </summary>
    </member>
    <member name="T:EO.Wpf.DateRange">
      <summary>
            Specifies a date range.
            </summary>
    </member>
    <member name="M:EO.Wpf.DateRange.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.DateRange" /> struct.
            </summary>
      <param name="startDate">
            The start date.
            </param>
      <param name="endDate">
            The end date.
            </param>
    </member>
    <member name="M:EO.Wpf.DateRange.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.DateRange" /> struct.
            </summary>
      <param name="date">
            The date that is both the start date and the end date.
            </param>
    </member>
    <member name="P:EO.Wpf.DateRange.StartDate">
      <summary>
            Gets or sets the start date, inclusive.
            </summary>
    </member>
    <member name="P:EO.Wpf.DateRange.EndDate">
      <summary>
            Gets or sets the end date, inclusive.
            </summary>
    </member>
    <member name="M:EO.Wpf.DateRange.Merge(EO.Wpf.DateRange,EO.Wpf.DateRange)">
      <summary>
            Merge two overlapping <see cref="T:EO.Wpf.DateRange" /> instances.
            </summary>
      <param name="dateRange1">The date range 1.</param>
      <param name="dateRange2">The date range 2.</param>
      <returns>The merged <see cref="T:EO.Wpf.DateRange" />.</returns>
      <exception cref="T:System.ArgumentException">
            thrown if <i>dateRange1</i> does not overlap with <i>dateRange2</i>.
            </exception>
    </member>
    <member name="M:EO.Wpf.DateRange.op_Equality(EO.Wpf.DateRange,EO.Wpf.DateRange)">
      <summary>
            Determines whether two specified <see cref="T:EO.Wpf.DateRange" /> objects have the same value.
            </summary>
      <param name="dateRange1">The first <see cref="T:EO.Wpf.DateRange" /> value.</param>
      <param name="dateRange2">The second <see cref="T:EO.Wpf.DateRange" /> value.</param>
    </member>
    <member name="M:EO.Wpf.DateRange.op_Inequality(EO.Wpf.DateRange,EO.Wpf.DateRange)">
      <summary>
            Determines whether two specified <see cref="T:EO.Wpf.DateRange" /> objects have different values.
            </summary>
      <param name="dateRange1">The first <see cref="T:EO.Wpf.DateRange" /> value.</param>
      <param name="dateRange2">The second <see cref="T:EO.Wpf.DateRange" /> value.</param>
    </member>
    <member name="M:EO.Wpf.DateRange.op_LessThan(EO.Wpf.DateRange,EO.Wpf.DateRange)">
      <summary>
            Determines whether the first <see cref="T:EO.Wpf.DateRange" /> is before the second <see cref="T:EO.Wpf.DateRange" />.
            </summary>
      <param name="dateRange1">The first <see cref="T:EO.Wpf.DateRange" /> value.</param>
      <param name="dateRange2">The second <see cref="T:EO.Wpf.DateRange" /> value.</param>
    </member>
    <member name="M:EO.Wpf.DateRange.op_GreaterThan(EO.Wpf.DateRange,EO.Wpf.DateRange)">
      <summary>
            Determines whether the first <see cref="T:EO.Wpf.DateRange" /> is after the second <see cref="T:EO.Wpf.DateRange" />.
            </summary>
      <param name="dateRange1">The first <see cref="T:EO.Wpf.DateRange" /> value.</param>
      <param name="dateRange2">The second <see cref="T:EO.Wpf.DateRange" /> value.</param>
    </member>
    <member name="M:EO.Wpf.DateRange.Contains(System.DateTime)">
      <summary>
            Returns whether the specified date is within the range of this <see cref="T:EO.Wpf.DateRange" /> object.
            </summary>
      <param name="date">
            The <see cref="T:System.DateTime" /> to check.
            </param>
      <returns>
            True if <i>date</i> is included in this <see cref="T:EO.Wpf.DateRange" /> instance.
            </returns>
    </member>
    <member name="M:EO.Wpf.DateRange.Contains(EO.Wpf.DateRange)">
      <summary>
            Returns whether the specified date is within the range of this <see cref="T:EO.Wpf.DateRange" /> object.
            </summary>
      <param name="dateRange">
            The <see cref="T:EO.Wpf.DateRange" /> to check.
            </param>
      <returns>
            True if <i>dateRange</i> is included in this <see cref="T:EO.Wpf.DateRange" /> instance.
            </returns>
    </member>
    <member name="M:EO.Wpf.DateRange.OverlapsWith(EO.Wpf.DateRange)">
      <summary>
            Checks if the given <see cref="T:EO.Wpf.DateRange" /> overlaps with the current instance.
            </summary>
      <param name="dateRange">the <see cref="T:EO.Wpf.DateRange" /> to check.</param>
      <returns>True if it overlaps</returns>
    </member>
    <member name="M:EO.Wpf.DateRange.Parse(System.String)">
      <summary>
            Converts the string representation of a date range to its 
            <see cref="T:EO.Wpf.DateRange" /> equivalent.
            </summary>
      <param name="dateRangeStr">A string that contains the date range to
            convert.</param>
      <returns>A <see cref="T:EO.Wpf.DateRange" /> object that contains the date
            range in the <paramref name="dateRangeStr" />.</returns>
    </member>
    <member name="M:EO.Wpf.DateRange.OverlapWith(EO.Wpf.DateRange,System.Boolean@)">
      <summary>
            Checks if <i>dateRange</i> overlaps with the current <see cref="T:EO.Wpf.DateRange" /> instance.
            </summary>
      <param name="dateRange">A <see cref="T:EO.Wpf.DateRange" /> object.</param>
      <param name="lowerBound">True if they overlap at <see cref="P:EO.Wpf.DateRange.StartDate" />, false otherwise.</param>
      <returns>True if <i>dateRange</i> overlaps with this <see cref="T:EO.Wpf.DateRange" /> instance.</returns>
    </member>
    <member name="T:EO.Wpf.DateRangeCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Wpf.DateRange" /> objects.
            </summary>
    </member>
    <member name="M:EO.Wpf.DateRangeCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.DateRangeCollection" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.DateRangeCollection.#ctor(System.Collections.Generic.List{EO.Wpf.DateRange})">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.DateRangeCollection" /> class.
            </summary>
      <param name="dateRanges">
      </param>
    </member>
    <member name="M:EO.Wpf.DateRangeCollection.Contains(System.DateTime)">
      <summary>
            Returns whether a specified date is within the range of any
            of the <see cref="T:EO.Wpf.DateRange" /> object in this collection.
            </summary>
      <param name="date">The <see cref="T:System.DateTime" /> value to be checked.</param>
      <returns>The System.Boolean.</returns>
    </member>
    <member name="M:EO.Wpf.DateRangeCollection.Add(System.DateTime)">
      <summary>
            Adds a new <see cref="T:System.DateTime" /> value into the collection.
            </summary>
      <param name="date">The new <see cref="T:System.DateTime" /> value to be added.</param>
      <remarks>
            This methods adds a single <see cref="T:EO.Wpf.DateRange" /> with the same <see cref="P:EO.Wpf.DateRange.StartDate" />
            and <see cref="P:EO.Wpf.DateRange.EndDate" />.
            </remarks>
    </member>
    <member name="M:EO.Wpf.DateRangeCollection.Add(System.DateTime,System.DateTime)">
      <summary>
            Adds a new date range into the collection. 
            </summary>
      <param name="startDate">The start date of the range.</param>
      <param name="endDate">The end date of the range.</param>
    </member>
    <member name="T:EO.Wpf.DockItem">
      <summary>
            Represents a dock item.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockItem.ItemIdProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockItem.ItemId" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockItem.IconProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockItem.Icon" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockItem.TitleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockItem.Title" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockItem.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockItem.IsSelected" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockItem.DockViewProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockItem.DockView" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockItem.StateDataProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockItem.StateData" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockItem.SaveStateEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DockItem.SaveState" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockItem.LoadStateEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DockItem.LoadState" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockItem.ClosingEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DockItem.Closing" /> event.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockItem.ClosedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DockItem.Closed" /> event.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockItem.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.DockItem" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockItem.ItemId">
      <summary>
            Gets or sets an ID string for the item.
            </summary>
      <remarks>
            You can use this property and <see cref="M:EO.Wpf.DockContainer.GetItemById(System.String)">DockContainer.GetItemById</see> together
            to locate a <see cref="T:EO.Wpf.DockItem" /> object inside the <see cref="T:EO.Wpf.DockContainer" />. This property is also
            important if you wish to load/activate a <see cref="T:EO.Wpf.DockItem" /> dynamically. See 
            <a href="Wpf/Controls/DockView/activate_item.html">activating a dock item</a> for more details.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockItem.Icon">
      <summary>
            Gets or sets the icon of the dock item.
            </summary>
      <remarks>
        <para>
            The following image demonstrates when a <see cref="T:EO.Wpf.DockItem" />'s <see cref="P:EO.Wpf.DockItem.Icon" /> is used:
            </para>
        <img src="images/dockitem_icon.gif">
        </img>
      </remarks>
    </member>
    <member name="P:EO.Wpf.DockItem.Title">
      <summary>
            Gets or sets the title of the dock item.
            </summary>
      <remarks>
        <para>
            A <see cref="T:EO.Wpf.DockItem" />'s <see cref="P:EO.Wpf.DockItem.Title" /> is used as the item's tab button 
            caption. The selected item's <see cref="P:EO.Wpf.DockItem.Title" /> is also used as the title of the dock view,
            as shown in the following image:
            </para>
        <img src="images/dockitem_title.gif">
        </img>
      </remarks>
    </member>
    <member name="P:EO.Wpf.DockItem.StateData">
      <summary>
            Gets or sets the state data for this dock item.
            </summary>
      <remarks>
            This property is used by <see cref="M:EO.Wpf.DockContainer.LoadLayoutXml(System.String)" /> and <see cref="M:EO.Wpf.DockContainer.SaveLayoutXml" /> to
            load and restore state. See <a href="Wpf/Controls/DockView/save_layout.html">Saving and Loading Layout</a> for more
            details.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockItem.IsSelected">
      <summary>
            Gets a value indicating whether this item is currently the selected item in the containing <see cref="P:EO.Wpf.DockItem.DockView" />.
            </summary>
      <remarks>
            A selected item may not be the active item. It is the active item only if the containing <see cref="P:EO.Wpf.DockItem.DockView" /> is active.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockItem.DockView">
      <summary>
            Gets the <see cref="P:EO.Wpf.DockItem.DockView" /> object that owns this <see cref="T:EO.Wpf.DockItem" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockItem.Activate">
      <summary>
            Activate this <see cref="T:EO.Wpf.DockItem" />.
            </summary>
    </member>
    <member name="E:EO.Wpf.DockItem.SaveState">
      <summary>
            Occurs when the <see cref="T:EO.Wpf.DockItem" /> needs to save state data.
            </summary>
      <remarks>
            If you handle this event, you should collect the <see cref="T:EO.Wpf.DockItem" />'s state information
            and save it to <see cref="P:EO.Wpf.DockItem.StateData" /> property.
            </remarks>
    </member>
    <member name="E:EO.Wpf.DockItem.LoadState">
      <summary>
            Occurs when the <see cref="T:EO.Wpf.DockItem" /> needs to load state data.
            </summary>
      <remarks>
            You can rely on state data you previously saved in <see cref="P:EO.Wpf.DockItem.StateData" /> to restore
            internal state for your <see cref="T:EO.Wpf.DockItem" /> object.
            </remarks>
    </member>
    <member name="E:EO.Wpf.DockItem.Closing">
      <summary>
            Occurs before this <see cref="T:EO.Wpf.DockItem" /> closes.
            </summary>
      <remarks>
            You can handle this event and set the event argument's <see cref="P:EO.Wpf.DockItemClosingEventArgs.IsCanceled" />
            to <b>true</b> to prevent the dock item from being closed.
            </remarks>
    </member>
    <member name="E:EO.Wpf.DockItem.Closed">
      <summary>
            Occurs after the <see cref="T:EO.Wpf.DockItem" /> is closed.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockItem.EncodeStateData(System.Object)">
      <summary>
            Helper functions to encode state data.
            </summary>
      <param name="state">State data to be encoded.</param>
      <returns>Returns the encoded state data.</returns>
      <remarks>
            Uses this function inside your <see cref="E:EO.Wpf.DockItem.SaveState" /> handler to encode your state data into a string.
            For example:
            <code lang="C#" title="C#">
            //Data type for the state information
            [Serializable()]
            private class StateData
            {
                public string FileName;
                public int CursorOffset;
            }
            
            private void DockContainer_SaveState(object sender, EO.Wpf.DockItemEventArgs e)
            {
            	//Collecting state data from your UI
            	StateData data = new StateData();	
            	data.FileName = ....
            	data.CursorOffset = ....
            	
                //Encode state data
            	return DockItem.EncodeStateData(data);
            }
            </code><code lang="VB" title="Visual Basic.NET">
            'Data type for the state information
            &lt;Serializable&gt; _
            Private Class StateData
                Public FileName As String
                Public CursorOffset As Integer
            End Class
            
            'Save state data as string
            Private Function SaveItemState(item As DockItem) As String
                'Collecting state data from your UI
                Dim data As New StateData()
                data.FileName = ....
                data.CursorOffset = ....
            
                'Encode state data
                Return DockItem.EncodeStateData(data)
            End Function
            </code></remarks>
    </member>
    <member name="M:EO.Wpf.DockItem.DecodeStateData(System.String)">
      <summary>
            Decode state information previously saved by <see cref="M:EO.Wpf.DockItem.EncodeStateData(System.Object)" />.
            </summary>
      <param name="stateData">State data previously encoded by <see cref="M:EO.Wpf.DockItem.EncodeStateData(System.Object)" />.</param>
      <returns>Returns the decoded data.</returns>
      <remarks>
            Use this function inside your <see cref="E:EO.Wpf.DockItem.LoadState" /> event handler, which works together with 
            <see cref="M:EO.Wpf.DockItem.EncodeStateData(System.Object)" /> inside <see cref="E:EO.Wpf.DockItem.SaveState" /> event handler to load
            and restore your <see cref="T:EO.Wpf.DockItem" />'s state. The following code demonstrates how to use
            this function:
            <code lang="C#" title="C#">
            private void LoadItemState(DockItem item, string stateData)
            {
                //Decode the previously saved state data
                StateData data = (StateData)DockItem.DecodeStateData(stateData);
            
                //Initialize your UI based on the state data
                ....
            }
            </code><code lang="VB" title="Visual Basic.NET">
            Private Sub LoadItemState(item As DockItem, stateData As String)
                'Decode the previously saved state data
                Dim data As StateData = DirectCast(DockItem.DecodeStateData(stateData), StateData)
            
                'Initialize your UI based on the state data
                ....
            End Sub
            </code></remarks>
    </member>
    <member name="M:EO.Wpf.DockItem.OnSaveState">
      <summary>
            Raises <see cref="E:EO.Wpf.DockItem.SaveState" /> event.
            </summary>
      <remarks>
            You can override this method to store the item's state information in the <see cref="T:EO.Wpf.DockItem" />'s <see cref="P:EO.Wpf.DockItem.StateData" /> property.
            </remarks>
    </member>
    <member name="M:EO.Wpf.DockItem.OnLoadState">
      <summary>
            Raises <see cref="E:EO.Wpf.DockItem.LoadState" /> event.
            </summary>
      <remarks>
            You can override this method to load the item's state information from the <see cref="T:EO.Wpf.DockItem" />'s <see cref="P:EO.Wpf.DockItem.StateData" /> property.
            </remarks>
    </member>
    <member name="M:EO.Wpf.DockItem.Close">
      <summary>
            Close this <see cref="T:EO.Wpf.DockItem" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockItem.LoadFrom(System.Uri,System.String)">
      <summary>
            Create a new <see cref="T:EO.Wpf.DockItem" /> based on an XAML file.
            </summary>
      <param name="uri">A Uri that maps to a relative XAML file.</param>
      <param name="title">The title of the new item.</param>
      <returns>
            Returns a newly created <see cref="T:EO.Wpf.DockItem" /> whose <see cref="P:System.Windows.Controls.ContentControl.Content" />
            is set to the componented loaded from the Uri.
            </returns>
    </member>
    <member name="T:EO.Wpf.DockItemCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Wpf.DockItem" /> objects.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockItemCollection.ToArray">
      <summary>
            Copy the elements into a new array object.
            </summary>
    </member>
    <member name="T:EO.Wpf.DocumentItem">
      <summary>
            Represents a document item.
            </summary>
      <remarks>
            A document item can only be docked into a <see cref="T:EO.Wpf.DockView" /> when the <see cref="T:EO.Wpf.DockView" />'s
            <see cref="P:EO.Wpf.DockView.IsDocumentView" /> is set to <b>true</b>.
            </remarks>
    </member>
    <member name="T:EO.Wpf.DockItemEventArgs">
      <summary>
            Contains information about events related to a <see cref="T:EO.Wpf.DockItem" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockItemEventArgs.#ctor(System.Windows.RoutedEvent,EO.Wpf.DockItem)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.DockItemEventArgs" /> class.
            </summary>
      <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:EO.Wpf.DockItemEventArgs" /> class.</param>
      <param name="item">The <see cref="T:EO.Wpf.DockItem" /> object associated to this event.</param>
    </member>
    <member name="P:EO.Wpf.DockItemEventArgs.Item">
      <summary>
            Gets the <see cref="T:EO.Wpf.DockItem" /> object associated to this event.
            </summary>
    </member>
    <member name="T:EO.Wpf.DockItemEventHandler">
      <summary>
            Represents the method that will handle events related to a <see cref="T:EO.Wpf.DockItem" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:EO.Wpf.DockItemEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:EO.Wpf.DockItemClosingEventArgs">
      <summary>
            Contains information about <see cref="E:EO.Wpf.DockItem.Closing">DockItem.Closing</see> event.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockItemClosingEventArgs.#ctor(System.Windows.RoutedEvent,EO.Wpf.DockItem)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.DockItemClosingEventArgs" /> class.
            </summary>
      <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:EO.Wpf.DockItemClosingEventArgs" /> class.</param>
      <param name="item">The <see cref="T:EO.Wpf.DockItem" /> object associated to this event.</param>
    </member>
    <member name="P:EO.Wpf.DockItemClosingEventArgs.IsCanceled">
      <summary>
            Gets or sets a value indicating whether this event should be canceled.
            </summary>
    </member>
    <member name="T:EO.Wpf.DockItemClosingEventHandler">
      <summary>
            Represents the method that will handle <see cref="E:EO.Wpf.DockItem.Closing">DockItem.Closing</see> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:EO.Wpf.DockItemClosingEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:EO.Wpf.RadialPanel">
      <summary>
      </summary>
    </member>
    <member name="T:EO.Wpf.RadialPanel._AP">
      <summary>
            dummy class for documentation purposes
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel._AP.Ring">
      <summary>
            Gets or sets that indicates the <see cref="T:EO.Wpf.RingDefinition" />
            index that an element is associated with.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel._AP.RingAlignment">
      <summary>
            Gets or sets a value that indicates the <see cref="T:EO.Wpf.RingAlignment" /> mode 
            associated with an element.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel._AP.Angle">
      <summary>
            Gets or sets the angle of an element within its containing <see cref="T:EO.Wpf.RingDefinition" />.
            </summary>
      <remarks>
            The value is in degrees, degrees starting from x-axis towards the right as 0 and grows
            clock wise. A full circle is 360 degrees. 
            </remarks>
    </member>
    <member name="P:EO.Wpf.RadialPanel._AP.RotationMode">
      <summary>
            Gets or sets the <see cref="T:EO.Wpf.RotationMode" /> mode associated with an element.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel._AP.Excluded">
      <summary>
            Gets or sets a value that indicates if an element is excluded
            from rings arranging.
            </summary>
      <remarks>
        <para>
            When an element an is excluded from ring arranging, it will take
            the whole available space of the <see cref="T:EO.Wpf.RadialPanel" /></para>
      </remarks>
      <example>
        <para>
            The following example illustrates the usage of this property on a <see cref="T:EO.Wpf.Button" />:
            <code lang="XML" title="XAML">
            &lt;eo:RadialPanel Width="100" Height="100"&gt;
                &lt;eo:Button eo:RadialPanel.Excluded="True"&gt;Click me&lt;/eo:Button&gt;
            &lt;/eo:RadialPanel&gt;
            </code></para>
      </example>
    </member>
    <member name="F:EO.Wpf.RadialPanel.RingProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel._AP.Ring" /> attached property.
            </summary>
    </member>
    <member name="M:EO.Wpf.RadialPanel.GetRing(System.Windows.UIElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.RadialPanel._AP.Ring" /> attached property for a <see cref="T:System.Windows.UIElement" /> object.
            </summary>
      <param name="element">The element from which the property value is read.</param>
      <returns>The element's <see cref="P:EO.Wpf.RadialPanel._AP.Ring" /> property value.</returns>
    </member>
    <member name="M:EO.Wpf.RadialPanel.SetRing(System.Windows.UIElement,System.Int32)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.RadialPanel._AP.Ring" /> attached property for an object.
            </summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="F:EO.Wpf.RadialPanel.RingAlignmentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel._AP.RingAlignment" /> attached property.
            </summary>
    </member>
    <member name="M:EO.Wpf.RadialPanel.GetRingAlignment(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.RadialPanel._AP.RingAlignment" /> attached property for a <see cref="T:System.Windows.UIElement" /> object.
            </summary>
      <param name="element">The element from which the property value is read.</param>
      <returns>The object's <see cref="P:EO.Wpf.RadialPanel._AP.RingAlignment" /> property value.</returns>
    </member>
    <member name="M:EO.Wpf.RadialPanel.SetRingAlignment(System.Windows.DependencyObject,EO.Wpf.RingAlignment)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.RadialPanel._AP.RingAlignment" /> attached property for an object.
            </summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:EO.Wpf.RadialPanel.RingAlignment">
      <summary>
            Gets or sets a value that indicates the ring alignment of all
            children.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.RingAlignment" /> enumeration values.
            The default is <see cref="F:EO.Wpf.RingAlignment.Center" />.
            </value>
    </member>
    <member name="F:EO.Wpf.RadialPanel.AngleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel._AP.Angle" /> attached property.
            </summary>
    </member>
    <member name="M:EO.Wpf.RadialPanel.GetAngle(System.Windows.UIElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.RadialPanel._AP.Angle" /> attached property for a <see cref="T:System.Windows.UIElement" /> object.
            </summary>
      <param name="element">The element from which the property value is read.</param>
      <returns>The element's <see cref="P:EO.Wpf.RadialPanel._AP.Angle" /> property value.</returns>
    </member>
    <member name="M:EO.Wpf.RadialPanel.SetAngle(System.Windows.UIElement,System.Double)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.RadialPanel._AP.Angle" /> attached property for a <see cref="T:System.Windows.UIElement" /> object.
            </summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="F:EO.Wpf.RadialPanel.ShowRingsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel.ShowRings" /> dependency property. This property is for visual debugging.
            When it is set to <c>true</c> Ellipses are drawn to show the location of the Rings.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel.ShowRings">
      <summary>
            Gets or sets a value that indicates whether the <see cref="T:EO.Wpf.RadialPanel" /> 
            should draw a line on the inner and outer edge of the ring to help
            visually see the rings boundaries. This is a dependency property.
            </summary>
      <c>true</c> is radial panel rings arcs are shown; otherwise 
            <c>false</c>. The default value is <c>false</c>.
            <remarks><para>
            This property should be used as a design tool to debug issues
            related to rings structure.
            </para></remarks></member>
    <member name="F:EO.Wpf.RadialPanel.RotationModeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel._AP.RotationMode" /> attached property.
            </summary>
    </member>
    <member name="M:EO.Wpf.RadialPanel.GetRotationMode(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.RadialPanel._AP.RotationMode" /> attached property for a <see cref="T:System.Windows.UIElement" /> object.
            </summary>
      <param name="element">The element from which the property value is read.</param>
      <returns>The element's <see cref="P:EO.Wpf.RadialPanel._AP.RotationMode" /> property value.</returns>
    </member>
    <member name="M:EO.Wpf.RadialPanel.SetRotationMode(System.Windows.DependencyObject,EO.Wpf.RotationMode)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.RadialPanel._AP.RotationMode" /> attached property for a <see cref="T:System.Windows.UIElement" /> object.
            </summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:EO.Wpf.RadialPanel.RotationMode">
      <summary>
            Gets or sets a value that indicates the rotation mode applied to all
            children.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.RotationMode" /> enumeration values. The
            default is <see cref="F:EO.Wpf.RotationMode.None" />.
            </value>
    </member>
    <member name="F:EO.Wpf.RadialPanel.ExcludedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel._AP.Excluded" /> attached property.
            </summary>
    </member>
    <member name="M:EO.Wpf.RadialPanel.GetExcluded(System.Windows.UIElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.RadialPanel._AP.Excluded" /> attached property for a <see cref="T:System.Windows.UIElement" /> object.
            </summary>
      <param name="element">The element from which the property value is read.</param>
      <returns>The object's <see cref="P:EO.Wpf.RadialPanel._AP.Excluded" /> property value.</returns>
    </member>
    <member name="M:EO.Wpf.RadialPanel.SetExcluded(System.Windows.UIElement,System.Boolean)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.RadialPanel._AP.Excluded" /> attached property for a <see cref="T:System.Windows.UIElement" /> object.
            </summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="F:EO.Wpf.RadialPanel.OriginXProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel.OriginX" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel.OriginX">
      <summary>
            Gets or sets a value that indicates the location of the origin point
            along the x-axis. This is a dependency property.
            </summary>
      <value>
            A <see cref="T:EO.Wpf.Unit" /> value that indicates the location of the origin
            point along the x-axis. The default value is <c>50%</c>, which represents
            the center of the control in x-axis.
            </value>
    </member>
    <member name="F:EO.Wpf.RadialPanel.OriginYProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel.OriginY" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel.OriginY">
      <summary>
            Gets or sets a value that indicates the location of the origin point
            along the y-axis. This is a dependency property.
            </summary>
      <value>
            A <see cref="T:EO.Wpf.Unit" /> value that indicates the location of the origin
            point along the y-axis. The default value is <c>50%</c>, which represents
            the center of the control in y-axis.
            </value>
    </member>
    <member name="F:EO.Wpf.RadialPanel.AutoDistributeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel.AutoDistribute" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel.AutoDistribute">
      <summary>
            Gets or sets a value that indicates whether a 
            <see cref="T:EO.Wpf.RadialPanel" /> will automatically compute the 
            <see cref="P:EO.Wpf.RadialPanel._AP.Angle" /> property of each child or not. This is a
            dependency property.
            </summary>
      <value>
        <c>true</c> to auto distribute the children of this 
            <see cref="T:EO.Wpf.RadialPanel" /> instance; otherwise <c>false</c>. The
            default value is <c>true</c>.
            </value>
      <remarks>
        <para>
            Note that the child's <see cref="P:EO.Wpf.RadialPanel._AP.Angle" /> property is affected
            by the <see cref="P:EO.Wpf.RadialPanel.StartAngle" /> and <see cref="P:EO.Wpf.RadialPanel.EndAngle" />
            properties.
            </para>
        <para>
            The following example demonstrates how to use this property, to
            center a group of <see cref="T:EO.Wpf.Button" /> controls along a ring
            without specifying the angle for each button:
            <code lang="XML" title="XAML">
            &lt;eo:RadialPanel Width="150" Height="150" AutoDistribute="True" StartAngle="0" EndAngle="180"&gt;
               &lt;eo:RadialPanel.RingDefinitions&gt;
                   &lt;eo:RingDefinition eo:RadialPanel.RingAlignment="Center" Width="40" Height="40" /&gt;
               &lt;/eo:RadialPanel.RingDefinitions&gt;
               
               &lt;eo:Button&gt;1&lt;/eo:Button&gt;
               &lt;eo:Button&gt;2&lt;/eo:Button&gt;
               &lt;eo:Button&gt;3&lt;/eo:Button&gt;
               &lt;eo:Button&gt;4&lt;/eo:Button&gt;
            &lt;/eo:RadialPanel&gt;
            </code></para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.RadialPanel.IsDirectionReversedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel.IsDirectionReversed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel.IsDirectionReversed">
      <summary>
            Gets or sets a value that indicates whether the arrangement of
            children is inverted or not. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to invert the direction of children arrangement;
            otherwise <c>false</c>. The default value is <c>false</c>.
            </value>
      <remarks>
        <para>
            Note that by default a <see cref="T:EO.Wpf.RadialPanel" /> arranges its
            children from left to right. When <see cref="P:EO.Wpf.RadialPanel.IsDirectionReversed" />
            is set to <c>true</c>, it arranges its children from right to left.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.RadialPanel.StartAngleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel.StartAngle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel.StartAngle">
      <summary>
            Gets or sets the start angle property. This is a dependency property.
            </summary>
      <remarks>
            A <see cref="T:EO.Wpf.RadialPanel" /> arranges child controls between <see cref="P:EO.Wpf.RadialPanel.StartAngle" /> and <see cref="P:EO.Wpf.RadialPanel.EndAngle" />.
            See <a href="Wpf/Controls/Misc/radial_panel.html">here</a> for more information on how to use the 
            <see cref="T:EO.Wpf.RadialPanel" /> control. Angle is in degree and grows clockwise.
            </remarks>
    </member>
    <member name="F:EO.Wpf.RadialPanel.EndAngleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadialPanel.EndAngle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel.EndAngle">
      <summary>
            Gets or sets the end angle. This is a dependency property.
            </summary>
      <remarks>
            A <see cref="T:EO.Wpf.RadialPanel" /> arranges child controls between <see cref="P:EO.Wpf.RadialPanel.StartAngle" /> and <see cref="P:EO.Wpf.RadialPanel.EndAngle" />.
            See <a href="Wpf/Controls/Misc/radial_panel.html">here</a> for more information on how to use the 
            <see cref="T:EO.Wpf.RadialPanel" /> control. Angle is in degree and grows clockwise.
            </remarks>
    </member>
    <member name="M:EO.Wpf.RadialPanel.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.RadialPanel" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.RadialPanel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.RadialPanel" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadialPanel.RingDefinitions">
      <summary>
            Returns a <see cref="T:EO.Wpf.RingDefinitionCollection" /> of <see cref="T:EO.Wpf.RingDefinition" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.RadialPanel.EnsureRingDefinitionsMeasureData(System.Double,System.Double)">
      <summary>
            Ensures that we have at least one ring (imaginary) in case
            no rings has been define by the user
            </summary>
      <param name="width">The panel computed width.</param>
      <param name="height">The panel computed height.</param>
    </member>
    <member name="M:EO.Wpf.RadialPanel.ComputeOrigin(System.Windows.Size)">
      <summary>
            Computes the Panel Origin point.
            </summary>
    </member>
    <member name="M:EO.Wpf.RadialPanel.GetChildAngle(System.Windows.UIElement,System.Int32,System.Double,System.Double)">
      <summary>
            returns the angle of the child if it is set; otherwise compute it.
            </summary>
    </member>
    <member name="M:EO.Wpf.RadialPanel.ChildMeasureData.Arrange">
      <summary>
            Arranges the child.
            </summary>
    </member>
    <member name="T:EO.Wpf.RotationMode">
      <summary>
            Specifies how children are rotated within their containing 
            <see cref="T:EO.Wpf.RingDefinition" /> in the <see cref="T:EO.Wpf.RadialPanel" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.RotationMode.None">
      <summary>
            No rotation is performed on the child control. As a result, 
            the element will always be horizontally aligned.
            </summary>
    </member>
    <member name="F:EO.Wpf.RotationMode.Radial">
      <summary>
            The child control will be rotated the same value as its 
            <see cref="F:EO.Wpf.RadialPanel.AngleProperty" /> value or the internally
            computed one in case <see cref="P:EO.Wpf.RadialPanel.AutoDistribute" /> is set
            to true. As a result, the left side of the control always points 
            to the center of the ring with the right side of the control pointing
            outwards.
            </summary>
    </member>
    <member name="F:EO.Wpf.RotationMode.Circular">
      <summary>
            The child control will be rotated so that the bottom of the control
            points to the center of the ring, while the top points outwards.
            </summary>
    </member>
    <member name="T:EO.Wpf.RingAlignment">
      <summary>
            Specifies how children are arranged within their containing 
            <see cref="T:EO.Wpf.RingDefinition" /> in the <see cref="T:EO.Wpf.RadialPanel" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.RingAlignment.Inward">
      <summary>
            Children are arranged along the inner edge of the containing 
            <see cref="T:EO.Wpf.RingDefinition" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.RingAlignment.Outward">
      <summary>
            Children are arranged along the outer edge of the containing 
            <see cref="T:EO.Wpf.RingDefinition" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.RingAlignment.Center">
      <summary>
            Children are arranged at the center of the containing 
            <see cref="T:EO.Wpf.RingDefinition" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.RingAlignment.Stretch">
      <summary>
            Children are stretched to occupy the whole space presented by the
            containing <see cref="T:EO.Wpf.RingDefinition" />.
            </summary>
      <remarks>
        <para>
            Note that this value behaves the same way <see cref="F:EO.Wpf.RingAlignment.Center" /> does
            in case the the element's  <see cref="F:EO.Wpf.RadialPanel.RotationModeProperty" />
            is set to a value other than <see cref="F:EO.Wpf.RotationMode.Radial" />.
            </para>
      </remarks>
    </member>
    <member name="T:EO.Wpf.RingDefinition">
      <summary>
            Provides information about a ring in
            <see cref="T:EO.Wpf.RadialPanel" /> and <see cref="T:EO.Wpf.Gauge.CircularScale" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.RingDefinition.WidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RingDefinition.Width" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RingDefinition.Width">
      <summary>
            Gets or sets a <see cref="T:EO.Wpf.Unit" /> value that represents the width
            of the ring (thickness on x-axis). This is a dependency property.
            </summary>
      <value>
            The <see cref="T:EO.Wpf.Unit" /> value that represents the width of the ring (thickness on x-axis).
            The default value is <b>30.0</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.RingDefinition.HeightProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RingDefinition.Height" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RingDefinition.Height">
      <summary>
            Gets or sets a <see cref="T:EO.Wpf.Unit" /> value that represents the height of
            the ring (thickness on y-axis). This is a dependency property.
            </summary>
      <value>
            The <see cref="T:EO.Wpf.Unit" /> value that represents the height of the ring (thickness on y-axis).
            The default value is <b>1.0</b>.
            </value>
    </member>
    <member name="F:EO.Wpf.RingDefinition.RadiusXProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RingDefinition.RadiusX" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RingDefinition.RadiusX">
      <summary>
            Gets or sets the radius on the x-axis.
            </summary>
    </member>
    <member name="F:EO.Wpf.RingDefinition.RadiusYProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RingDefinition.RadiusY" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RingDefinition.RadiusY">
      <summary>
            Gets or sets the radius on the y-axis.
            </summary>
    </member>
    <member name="P:EO.Wpf.RingDefinition.Alignment">
      <summary>
            Gets or sets a value that indicates the ring alignment of all the
            children that arranged in this ring.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.RingAlignment" /> enumeration values. The
            default is <see cref="F:EO.Wpf.RingAlignment.Center" />.
            </value>
    </member>
    <member name="P:EO.Wpf.RingDefinition.RotationMode">
      <summary>
            Gets or sets a value that indicates the rotation mode applied to all
            children arranged in this ring.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.RotationMode" /> enumeration values. The
            default value is <see cref="F:EO.Wpf.RotationMode.None" />.
            </value>
    </member>
    <member name="M:EO.Wpf.RingDefinition.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.RingDefinition" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.RingDefinitionCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Wpf.RingDefinition" /> instances.
            </summary>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.#ctor(EO.Wpf.RadialPanel)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.RingDefinitionCollection" /> for a <see cref="T:EO.Wpf.RadialPanel" />.
            </summary>
      <param name="radialPanel">
            The <see cref="T:EO.Wpf.RadialPanel" /> instance to attach this <b>RingDefinitionCollection</b> to.
            </param>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.Add(EO.Wpf.RingDefinition)">
      <summary>
            Adds a new <see cref="T:EO.Wpf.RingDefinition" /> into the collection.
            </summary>
      <param name="item">The new <see cref="T:EO.Wpf.RingDefinition" /> to be added.</param>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.Clear">
      <summary>
            Clear all <see cref="T:EO.Wpf.RingDefinition" /> in the collection.
            </summary>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.Contains(EO.Wpf.RingDefinition)">
      <summary>
            Determines whether an <see cref="T:EO.Wpf.RingDefinition" /> is in this <see cref="T:EO.Wpf.RingDefinitionCollection" />.
            </summary>
      <param name="item">The <see cref="T:EO.Wpf.RingDefinition" /> to locate.</param>
      <returns>
        <b>true</b> if <c>item</c> is found in this <see cref="T:EO.Wpf.RingDefinitionCollection" />,
            otherwise <b>false</b>.
            </returns>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.CopyTo(EO.Wpf.RingDefinition[],System.Int32)">
      <summary>
            Copy a range of <see cref="T:EO.Wpf.RingDefinition" /> objects from the <see cref="T:EO.Wpf.RingDefinitionCollection" />
            to a one-dimensional <see cref="T:EO.Wpf.RingDefinition" /> array, starting at the specified index of the
            target array.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:EO.Wpf.RingDefinition" /> array that is the destination of the elements copied from 
            the collection. The array must have zero-based indexing. 
            </param>
      <param name="arrayIndex">The zero-based index in array at which copying begins. 
            </param>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.Remove(EO.Wpf.RingDefinition)">
      <summary>
            Remove a <see cref="T:EO.Wpf.RingDefinition" /> from the collection.
            </summary>
      <param name="item">The <see cref="T:EO.Wpf.RingDefinition" /> object to be removed.</param>
      <returns>
        <b>true</b> if the item has been removed, otherwise <b>false</b>.
            </returns>
    </member>
    <member name="P:EO.Wpf.RingDefinitionCollection.Count">
      <summary>
            Gets the number of <see cref="T:EO.Wpf.RingDefinition" /> acutally contained in this collection.
            </summary>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.IndexOf(EO.Wpf.RingDefinition)">
      <summary>
            Searches for the specified <see cref="T:EO.Wpf.RingDefinition" /> and returns the zero-based index of the first occurrence within the collection.
            </summary>
      <param name="item">The <see cref="T:EO.Wpf.RingDefinition" /> to be searched.</param>
      <returns>
            The zero based index of the <see cref="T:EO.Wpf.RingDefinition" /> if it is found in the collection, otherwise -1.
            </returns>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.Insert(System.Int32,EO.Wpf.RingDefinition)">
      <summary>
            Inserts a <see cref="T:EO.Wpf.RingDefinition" /> into the collection at the specified index.
            </summary>
      <param name="index">The zero-based index at which <c>item</c> should be inserted.</param>
      <param name="item">The <see cref="T:EO.Wpf.RingDefinition" /> to be inserted.</param>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:EO.Wpf.RingDefinition" /> at the specified index of the collection.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:EO.Wpf.RingDefinition" /> to remove.</param>
    </member>
    <member name="P:EO.Wpf.RingDefinitionCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:EO.Wpf.RingDefinition" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:EO.Wpf.RingDefinition" /> to get or set. </param>
    </member>
    <member name="F:EO.Wpf.RingDefinitionCollection.Enumerator.m_version">
      <summary>
            Tracks the currently enumerated collection version
            </summary>
    </member>
    <member name="F:EO.Wpf.RingDefinitionCollection.Enumerator.m_owner">
      <summary>
            The collection owning the enumerator
            </summary>
    </member>
    <member name="F:EO.Wpf.RingDefinitionCollection.Enumerator.m_index">
      <summary>
            The current index of the enumerator in the collection
            </summary>
    </member>
    <member name="F:EO.Wpf.RingDefinitionCollection.Enumerator.m_current">
      <summary>
            Current property field
            </summary>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.Enumerator.#ctor(EO.Wpf.RingDefinitionCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.RingDefinitionCollection.Enumerator" /> class.
            </summary>
      <param name="owner">
            The owner.
            </param>
    </member>
    <member name="P:EO.Wpf.RingDefinitionCollection.Enumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">Enumeration has not started. Call MoveNext.</exception>
      <exception cref="T:System.InvalidOperationException">Enumeration already finished.</exception>
    </member>
    <member name="P:EO.Wpf.RingDefinitionCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
            Gets the current element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">Enumeration has not started. Call MoveNext.</exception>
      <exception cref="T:System.InvalidOperationException">Enumeration already finished.</exception>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. 
            </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. 
            </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:EO.Wpf.RingDefinitionCollection.Enumerator.ValidateVersion">
      <summary>
            Checks the version number between enumerator and owner
            </summary>
      <exception cref="T:System.InvalidOperationException">thrown in case of version mismatch.</exception>
    </member>
    <member name="T:EO.Wpf.RadioButton">
      <summary>
            Represents a button that can be selected, but not cleared, by a user. 
            </summary>
    </member>
    <member name="F:EO.Wpf.RadioButton.GroupNameProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RadioButton.GroupName" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.RadioButton.GroupName">
      <summary>
            Gets or sets the name of the group that the radio button belongs to.
            </summary>
    </member>
    <member name="T:EO.Wpf.DropDown">
      <summary>
            Represents a drop down window that can be associated to another control.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Misc/DropDown.html">here</a> for more information on how to use this control.
            </remarks>
    </member>
    <member name="F:EO.Wpf.DropDown.TargetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDown.Target" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.StaysOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDown.StaysOpen" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.IsOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDown.IsOpen" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.PlacementTargetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDown.PlacementTarget" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.PlacementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDown.Placement" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.MaxDropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDown.MaxDropDownHeight" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.HorizontalOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDown.HorizontalOffset" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.VerticalOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDown.VerticalOffset" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.ExpandEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDown.ExpandEffect" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.CollapseEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDown.CollapseEffect" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.OpenedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DropDown.Opened" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDown.ClosedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DropDown.Closed" /> routed event.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDown.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.DropDown" /> control.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDown.Target">
      <summary>
            Gets or sets the target of this drop down control.
            </summary>
      <remarks>
            The target of the control is the control that this <see cref="T:EO.Wpf.DropDown" /> is associated with.
            Clicking the target control triggers the drop down.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DropDown.StaysOpen">
      <summary>
            Gets or sets a value indicating whether the drop down should stay open after losing focus.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDown.IsOpen">
      <summary>
            Gets or sets a value indicating whether the drop down is open.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDown.Placement">
      <summary>
            Gets or sets the orientation of the popup.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDown.PlacementTarget">
      <summary>
            Gets or sets the <see cref="T:System.Windows.UIElement" /> relative to which the dorp down is positioned when it opens. 
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDown.MaxDropDownHeight">
      <summary>
            Gets or sets the maximum drop down height.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDown.HorizontalOffset">
      <summary>
            Gets or sets the horizontal offset.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDown.VerticalOffset">
      <summary>
            Gets or sets the vertical offset.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDown.ExpandEffect">
      <summary>
            Gets or sets the effect played when the drop down opens.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDown.CollapseEffect">
      <summary>
            Gets or sets the effect played when the drop down closes.
            </summary>
    </member>
    <member name="E:EO.Wpf.DropDown.Opened">
      <summary>
            Occurs when the <see cref="T:EO.Wpf.DropDown" /> is opened.
            </summary>
    </member>
    <member name="E:EO.Wpf.DropDown.Closed">
      <summary>
            Occurs when the <see cref="T:EO.Wpf.DropDown" /> is closed.
            </summary>
    </member>
    <member name="T:EO.Wpf.DropDownService">
      <summary>
            Manages various <see cref="T:EO.Wpf.DropDown" /> related properties.
            </summary>
      <remarks>
            This class is used together with <see cref="T:EO.Wpf.DropDown" /> control.
            See <a href="Wpf/Controls/Misc/DropDown.html">here</a> for more information.
            </remarks>
    </member>
    <member name="T:EO.Wpf.DropDownService._AP">
      <summary>
            dummy class for documentation purpose
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownService._AP.DropDown">
      <summary>
            Gets or sets the <see cref="P:EO.Wpf.DropDownService._AP.DropDown" /> associated to an <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownService._AP.StaysOpen">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:EO.Wpf.DropDownService._AP.DropDown" /> should be kept open when it loses focus.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownService._AP.IsOpen">
      <summary>
            Gets or sets a value indicating whether a drop down is currently open for an <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownService._AP.MaxHeight">
      <summary>
            Gets or sets the maximum drop down height.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownService._AP.Content">
      <summary>
            Gets or sets the drop down content.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownService._AP.Placement">
      <summary>
            Gets or sets the orientation of the popup. 
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownService._AP.PlacementTarget">
      <summary>
            Gets or sets the <see cref="T:System.Windows.UIElement" /> relative to which the drop down is positioned when it opens. 
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownService._AP.HorizontalOffset">
      <summary>
            Gets or sets the horizontal offset of the popup.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownService._AP.VerticalOffset">
      <summary>
            Gets or sets the vertical offset of the popup.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownService.DropDownProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownService._AP.DropDown" /> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownService.StaysOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownService._AP.StaysOpen" /> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownService.IsOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownService._AP.IsOpen" /> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownService.MaxHeightProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownService._AP.MaxHeight" /> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownService.ContentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownService._AP.Content" /> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownService.PlacementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownService._AP.Placement" /> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownService.PlacementTargetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownService._AP.PlacementTarget" /> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownService.HorizontalOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownService._AP.HorizontalOffset" /> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownService.VerticalOffsetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownService._AP.VerticalOffset" /> attached property.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.GetDropDown(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.DropDownService._AP.DropDown" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.SetDropDown(System.Windows.FrameworkElement,EO.Wpf.DropDown)">
      <summary>
            Set the value of the <see cref="P:EO.Wpf.DropDownService._AP.DropDown" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.GetStaysOpen(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.DropDownService._AP.StaysOpen" /> attached property for a specified <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.SetStaysOpen(System.Windows.FrameworkElement,System.Boolean)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.DropDownService._AP.StaysOpen" /> attached property for a specified <see cref="T:System.Windows.DependencyObject" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.SetIsOpen(System.Windows.FrameworkElement,System.Boolean)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.DropDownService._AP.IsOpen" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.GetIsOpen(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.DropDownService._AP.IsOpen" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.GetMaxHeight(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.DropDownService._AP.MaxHeight" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.SetMaxHeight(System.Windows.FrameworkElement,System.Double)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.DropDownService._AP.MaxHeight" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.GetContent(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.DropDownService._AP.Content" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.SetContent(System.Windows.FrameworkElement,System.Object)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.DropDownService._AP.Content" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.GetPlacement(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.DropDownService._AP.Placement" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.SetPlacement(System.Windows.FrameworkElement,System.Windows.UIElement)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.DropDownService._AP.Placement" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.GetPlacementTarget(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.DropDownService._AP.PlacementTarget" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.SetPlacementTarget(System.Windows.FrameworkElement,System.Windows.UIElement)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.DropDownService._AP.PlacementTarget" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.GetHorizontalOffset(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.DropDownService._AP.HorizontalOffset" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.SetHorizontalOffset(System.Windows.FrameworkElement,System.Double)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.DropDownService._AP.HorizontalOffset" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.GetVerticalOffset(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.DropDownService._AP.VerticalOffset" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DropDownService.SetVerticalOffset(System.Windows.FrameworkElement,System.Double)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.DropDownService._AP.VerticalOffset" /> attached property for a specific <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.SelectionTracker.IsActive">
      <summary>
            True if selection tracking is active
            </summary>
    </member>
    <member name="M:EO.Wpf.SelectionTracker.Begin">
      <summary>
            start the selection tracking process
            </summary>
    </member>
    <member name="T:EO.Wpf.SpinEdit">
      <summary>
            Represents an editor with an up/down button that allows the user to enter a
            value directly or use the up/down button to adjust the value.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.RangeIndicatorTemplateName">
      <summary>
            Part name used in the style, make sure the TemplatePartAttribute has the same name.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.TrackTemplateName">
      <summary>
            Part name used in the style, make sure the TemplatePartAttribute has the same name.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.EditableBoxTemplateName">
      <summary>
            Part name used in the style, make sure the TemplatePartAttribute has the same name.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.DisplayBoxTemplateName">
      <summary>
            Part name used in the style,
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.AllowEmptyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.AllowEmpty" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SpinEdit.AllowEmpty">
      <summary>
            Gets or sets a value indicating whether user is allowed to clear
            the <see cref="T:EO.Wpf.SpinEdit" />. This is a dependency property.
            </summary>
      <remarks>
            When this value is set to <b>true</b>, user can press DEL key to
            clear the <see cref="T:EO.Wpf.SpinEdit" />. In that case <see cref="P:EO.Wpf.SpinEdit.IsEmpty" />
            will be set to <b>true</b>, even though <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" />
            property still holds a value.
            </remarks>
    </member>
    <member name="F:EO.Wpf.SpinEdit.IsEmptyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.IsEmpty" /> read-only dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SpinEdit.IsEmpty">
      <summary>
            Gets a value that indicates whether the 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> is empty or not. This is a dependency
            property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.ValueFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.ValueFormat" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.NumberFormatInfoProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.NumberFormatInfo" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.ValueFormatStringProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.ValueFormatString" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.SpinButtonsOrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.SpinButtonsOrientation" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.IsReadOnlyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.IsReadOnly" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.ShowRangeIndicatorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.ShowRangeIndicator" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.IsIntegerProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.IsInteger" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.TextProperty">
      <summary>
            Identifies the <see cref="F:EO.Wpf.SpinEdit.TextProperty" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.DecimalDigitsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.DecimalDigits" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.DelayProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.Delay" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.IntervalProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.Interval" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.RangeIndicatorStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.RangeIndicatorStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.SpinUpButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.SpinUpButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.SpinDownButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SpinEdit.SpinDownButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.m_rangeIndicator">
      <summary>
            SpinEdit RangeIndicator.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.m_track">
      <summary>
            SpinEdit range indicator track.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEdit.m_maskedEdit">
      <summary>
            SpinEdit editable MaskedEdit
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.SpinEdit" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.SpinEdit" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.SpinEdit.SpinButtonsOrientation">
      <summary>
            Gets or sets the orientation of the spin buttons. This is a
            dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.Controls.Orientation" /> values. The default is <see cref="F:System.Windows.Controls.Orientation.Vertical" />.
            </value>
      <remarks>
        <para> The following table illustrates the <see cref="T:EO.Wpf.SpinEdit" />
            control in both states: 
            </para>
        <list type="table">
          <listheader>
            <term>Orientation</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>Vertical (default)</term>
            <description>
              <para>The spin buttons are arranged vertically. 
                <img src="images/spin_btn_vertical.gif"></img></para>
            </description>
          </item>
          <item>
            <term>Horizontal</term>
            <description>The spin buttons are arranged horizontally. 
              <img src="images/spin_btn_horizontal.gif"></img></description>
          </item>
        </list>
        <para>
        </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.IsReadOnly">
      <summary>
            Gets or sets a value that indicates whether the <see cref="T:EO.Wpf.SpinEdit" /> is
            read-only to a user interacting with the control. This is a
            dependency property.
            </summary>
      <value>
        <c>true</c> if the spin edit control is read-only to the user;
            otherwise <c>false</c>. The default value is <c>false</c>.
            </value>
      <remarks>
        <para>
            Note that in case the <b>IsReadOnly</b> property is set to 
            <c>true</c>, the  <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> can't be modified by
            the user, but it can always be modified via C# code.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.ShowRangeIndicator">
      <summary>
            Gets or sets a value indicating whether the range indicator control
            of a <see cref="T:EO.Wpf.SpinEdit" /> is shown or hidden. This is a dependency
            property.
            </summary>
      <value>
        <c>true</c> if the range indicator should be shown; otherwise 
            <c>false</c>. The default value is <c>false</c>.
            </value>
      <example>
        <para>
            The following code shows the range indicator for the 
            <c>SpinEdit</c>:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:SpinEdit Minimum="0" Maximum="10" Value="5" ShowRangeIndicator="True" /&gt;
            </code>
        <para>
            The above code produces the following result:
            </para>
        <para>
          <img src="Wpf/Controls/SpinEdit/range_indicator1.gif">
          </img>
        </para>
      </example>
    </member>
    <member name="P:EO.Wpf.SpinEdit.IsInteger">
      <summary>
            Gets or sets a value that indicates whether the 
            <see cref="T:EO.Wpf.SpinEdit" /> value is an integer. This is a dependency
            property.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:EO.Wpf.SpinEdit" /> value is an integer;
            otherwise false. The default value is <c>false</c>.
            </value>
      <remarks>
        <para>
            When the <c>IsInteger</c> is <c>true</c>, the following properties
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" />, <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" />, 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> will be rounded using 
            <see cref="M:System.Math.Round(System.Double)" /> prior to using them.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.Text">
      <summary>
            Gets the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:EO.Wpf.SpinEdit" />
            as a <see cref="T:System.String" />. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SpinEdit.DecimalDigits">
      <summary>
            Gets or sets the number of decimal places to use. This is a
            dependency property.
            </summary>
      <value>
            The number of decimal places to use. The default value is 0.
            </value>
      <remarks>
        <para>
            Note that the value of <b>DecimalDigits</b> has no effect if 
            the <see cref="P:EO.Wpf.SpinEdit.NumberFormatInfo" /> property is set, instead 
            use the provided instance to <see cref="P:EO.Wpf.SpinEdit.NumberFormatInfo" /> 
            to set the number of decimal digits.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.Delay">
      <summary>
            Gets or sets the amount of time, in milliseconds, the 
            <see cref="T:EO.Wpf.SpinEdit" />'s <see cref="T:EO.Wpf.Primitives.RepeatButton" /> waits, while its
            pressed, before it starts repeating. This is a dependency property.
            </summary>
      <value>
            A time delay in milliseconds. The default is the system key press
            delay. For more information, see 
            <see cref="P:System.Windows.SystemParameters.KeyboardDelay" />.
            </value>
      <remarks>
        <para>
            The value must be non-negative.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.Interval">
      <summary>
            Gets or sets the amount of time in milliseconds between repeats
            when users holds down the increase/decrease button that causes the
            commands to repeat. This is a dependency property.
            </summary>
      <value>
            A time in milliseconds between commands that changes the Value of a <see cref="T:EO.Wpf.SpinEdit" />.
            The default value is the system key repeat rate.
            </value>
    </member>
    <member name="P:EO.Wpf.SpinEdit.ValueFormat">
      <summary>
            Gets or sets the format to apply to the <see cref="T:EO.Wpf.SpinEdit" />value.
            This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.SpinEditValueFormat" /> enumeration values
            that is used to format the value of the <see cref="T:EO.Wpf.SpinEdit" />. The
            default value is <see cref="F:EO.Wpf.SpinEditValueFormat.Numeric" />.
            </value>
      <remarks>
        <para>
            Note that you can use the <b>ValueFormat</b> and 
            <see cref="P:EO.Wpf.SpinEdit.NumberFormatInfo" /> properties to provide advanced
            formatting. for more information see <see cref="P:EO.Wpf.SpinEdit.NumberFormatInfo" />.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.NumberFormatInfo">
      <summary>
            Gets or sets the <see cref="T:System.Globalization.NumberFormatInfo" />
            object used to format the value of the <see cref="T:EO.Wpf.SpinEdit" />. This is a
            dependency property.
            </summary>
      <value>
            The default value is <c>null</c>.
            </value>
      <remarks>
        <para>
            The <see cref="T:EO.Wpf.SpinEdit" /> control provides 
            <see cref="P:EO.Wpf.SpinEdit.ValueFormat" /> and <see cref="P:EO.Wpf.SpinEdit.DecimalDigits" /> that
            offers basic formating, if advanced formatting is required an
            instance of the <see cref="T:System.Globalization.NumberFormatInfo" />
            class can be used.
            </para>
        <para>
            Note that the <c>NumberFormatInfo</c> property is used together with
            <see cref="P:EO.Wpf.SpinEdit.ValueFormat" /> to format the 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" />;  for example, if you want to change
            the way currencies are formatted, make sure that the 
            <see cref="P:EO.Wpf.SpinEdit.ValueFormat" /> property is set to 
            <see cref="F:EO.Wpf.SpinEditValueFormat.Currency" />.
            </para>
        <para>
            The following example uses an instance of the 
            <see cref="T:System.Globalization.NumberFormatInfo" /> to override the
            default currency symbol and also use the minus sign (-) instead of
            the parenthesis for negative format:
            </para>
        <code lang="XML" title="XAML">
            &lt;Window x:Class="Test.MainWindow"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:eo="http://schemas.essentialobjects.com/wpf/"
                    xmlns:g="clr-namespace:System.Globalization;assembly=mscorlib"
                    Title="MainWindow" Height="250" Width="350"&gt;
                &lt;Window.Resources&gt;
                    &lt;g:NumberFormatInfo x:Key="CustomValueFormat" CurrencyNegativePattern="1" CurrencySymbol="£"&gt;&lt;/g:NumberFormatInfo&gt;
                &lt;/Window.Resources&gt;
                &lt;StackPanel Margin="10"&gt;
                    &lt;eo:SpinEdit HorizontalAlignment="Left" 
                        Minimum="-10" Maximum="10" Value="-1" Width="100" 
                        ValueFormat="Currency" NumberFormatInfo="{StaticResource CustomValueFormat}" /&gt;
                &lt;/StackPanel&gt;
            &lt;/Window&gt;
            </code>
        <para>
            The above code produces the following result:
            </para>
        <img src="Wpf/Controls/SpinEdit/format2.gif">
        </img>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.ValueFormatString">
      <summary>
            Gets or sets the value format string.
            </summary>
      <remarks>
        <para>
            Set this property to format the value of the <see cref="T:EO.Wpf.SpinEdit" /> when the
            <see cref="T:EO.Wpf.SpinEdit" /> is not in edit mode. For example, setting this property 
            to "C2" can format value 1345.6 to "$1,345.60".
            </para>
        <para>
            When this property is set, <see cref="P:EO.Wpf.SpinEdit.ValueFormat" /> is ignored.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.RangeIndicatorStyle">
      <summary>
             Gets or sets the <see cref="T:System.Windows.Style" /> applied to the range indicator
             control of this spin edit. This is a dependency property.
             </summary>
      <example>
        <para>
             The target type of this style is <see cref="T:System.Windows.Shapes.Rectangle" />. The
             following example, which sets a new style for the <c>SpinEdit</c>
             range indicator element:
             </para>
        <code lang="XML" title="XAML">
            &lt;Window x:Class="Test.MainWindow"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:eo="http://schemas.essentialobjects.com/wpf/"
                    xmlns:g="clr-namespace:System.Globalization;assembly=mscorlib"
                    Title="MainWindow" Height="250" Width="350"&gt;
                &lt;Window.Resources&gt;
                    &lt;g:NumberFormatInfo x:Key="CustomValueFormat" CurrencyNegativePattern="1" CurrencySymbol="£"&gt;&lt;/g:NumberFormatInfo&gt;
                &lt;/Window.Resources&gt;
                &lt;StackPanel Margin="10"&gt;
                    &lt;eo:SpinEdit HorizontalAlignment="Left" 
                        Minimum="-10" Maximum="10" Value="-1" Width="100" 
                        ValueFormat="Currency" NumberFormatInfo="{StaticResource CustomValueFormat}" /&gt;
                &lt;/StackPanel&gt;
            &lt;/Window&gt;
             </code>
        <para>
             The above code produces the following result:
             </para>
        <para>
          <img src="Wpf/Controls/SpinEdit/range_indicator2.gif">
          </img>
        </para>
      </example>
    </member>
    <member name="P:EO.Wpf.SpinEdit.SpinDownButtonStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the 
            <see cref="T:EO.Wpf.Primitives.RepeatButton" /> control used to decrease the 
            <see cref="T:EO.Wpf.SpinEdit" />'s <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property.
            This is a dependency property.
            </summary>
      <value>
            The default value is <c>null</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.SpinEdit.SpinUpButtonStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the 
            <see cref="T:EO.Wpf.Primitives.RepeatButton" /> control used to increase the 
            <see cref="T:EO.Wpf.SpinEdit" />'s <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property.
            This is a dependency property.
            </summary>
      <value>
            The default value is <c>null</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.SpinEdit.IncreaseLarge">
      <summary>
            Gets a command that increases the value of the <see cref="T:EO.Wpf.SpinEdit" /> by the same amount
             as <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> property.
            </summary>
      <remarks>
            This is the command that causes the value of <see cref="T:EO.Wpf.SpinEdit" /> to increase by the
            amount specified by <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" />. By default, <see cref="F:System.Windows.Input.Key.PageUp" /> 
            key triggers this command.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.DecreaseLarge">
      <summary>
            Gets a command that decreases the value of the <see cref="T:EO.Wpf.SpinEdit" /> by the same amount
             as <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> property.
            </summary>
      <remarks>
            This is the command that causes the value of <see cref="T:EO.Wpf.SpinEdit" /> to decrease by the
            amount specified by <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" />. By default, <see cref="F:System.Windows.Input.Key.PageDown" /> 
            key triggers this command.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.IncreaseSmall">
      <summary>
            Gets a command that increases the value of the <see cref="T:EO.Wpf.SpinEdit" /> by the same amount
             as <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" /> property.
            </summary>
      <remarks>
            This is the command that causes the value of <see cref="T:EO.Wpf.SpinEdit" /> to increase by the
            amount specified by <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" />. By default, <see cref="F:System.Windows.Input.Key.Up" /> 
            arrow key triggers this command.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.DecreaseSmall">
      <summary>
            Gets a command that decreases the value of the <see cref="T:EO.Wpf.SpinEdit" /> by the same amount 
            as the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" /> property.
            </summary>
      <remarks>
            This is the command that causes the value of <see cref="T:EO.Wpf.SpinEdit" /> to decrease by the
            amount specified by <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" />. By default, <see cref="F:System.Windows.Input.Key.Down" /> 
            arrow key triggers this command.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.MaximizeValue">
      <summary>
            Gets a command that sets the <see cref="T:EO.Wpf.SpinEdit" /><see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> 
            to the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> value.
            </summary>
      <remarks>
            This is the command that causes the value of <see cref="T:EO.Wpf.SpinEdit" /> to be set to the 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> value. By default, <see cref="F:System.Windows.Input.Key.End" /> key triggers
            this command.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.MinimizeValue">
      <summary>
            Gets a command that sets the <see cref="T:EO.Wpf.SpinEdit" /><see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> 
            to the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> value.
            </summary>
      <remarks>
            This is the command that causes the value of <see cref="T:EO.Wpf.SpinEdit" /> to be set to the 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> value. By default, <see cref="F:System.Windows.Input.Key.Home" /> key triggers
            this command.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SpinEdit.IsInEditMode">
      <summary>
            True when the template <see cref="T:EO.Wpf.MaskedEdit" /> IsKeyboardFocusWithin property is set true.
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.InitializeCommands">
      <summary>
            Initializes the SpinEdit commands
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.GetKeyboardDelay">
      <summary>
            Retrieves the keyboard repeat-delay setting, which is a value in the range from 0 
            (approximately 250 ms delay) through 3 (approximately 1 second delay). 
            The actual delay associated with each value may vary depending on the hardware.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EO.Wpf.SpinEdit.GetKeyboardSpeed">
      <summary>
            Retrieves the keyboard repeat-speed setting, which is a value in the range from 0 
            (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second). 
            The actual repeat rates are hardware-dependent and may vary from a linear scale by as much as 20%.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EO.Wpf.SpinEdit._OnMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            this is a class handler for OnMouseLeftButtonDown event.
            The purpose of this handler is to move input focus to the SpinEdit when user 
            pressed mouse left button on any part of the SpinEdit that is not focusable.
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit._OnMouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
      <summary>
            This is a class handler for the MouseWheelEvent.
            The purpose of this handler is to update the value (increase/decrease) when
            the user rotate the wheel up and down.
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit._OnKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
      <summary>
            this is a handler for the KeyDownEvent, only effective on The Template TextBox.
            The purpose of this handler is to update the value (increase/decrease) when the 
            user press Keyboard keys (up, down, page up and page down)
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.OnIncreaseLarge">
      <summary>
            Responds to the <see cref="P:EO.Wpf.SpinEdit.IncreaseLarge" /> command.
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.OnDecreaseLarge">
      <summary>
            Responds to the <see cref="P:EO.Wpf.SpinEdit.DecreaseLarge" /> command.
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.OnIncreaseSmall">
      <summary>
            Responds to the <see cref="P:EO.Wpf.SpinEdit.IncreaseSmall" /> command.
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.OnDecreaseSmall">
      <summary>
            Responds to the <see cref="P:EO.Wpf.SpinEdit.DecreaseSmall" /> command.
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.OnMaximizeValue">
      <summary>
            Responds to the <see cref="P:EO.Wpf.SpinEdit.MaximizeValue" /> command.
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.OnMinimizeValue">
      <summary>
            Responds to the <see cref="P:EO.Wpf.SpinEdit.MinimizeValue" /> command.
            </summary>
    </member>
    <member name="M:EO.Wpf.SpinEdit.UpdateValue(System.Double)">
      <summary>
            Increase/Decrease the value of the spin edit
            </summary>
      <param name="change">The new value to append.</param>
    </member>
    <member name="M:EO.Wpf.SpinEdit.UpdateRangeIndicatorLength">
      <summary>
            Resize the RangeIndicatorElement
            </summary>
    </member>
    <member name="T:EO.Wpf.SpinEditValueFormat">
      <summary>
            Specifies the formatting of the <see cref="T:EO.Wpf.SpinEdit" /> control.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEditValueFormat.Numeric">
      <summary>
            Formats the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> as numeric value.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEditValueFormat.Currency">
      <summary>
            Formats the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> as currecny value.
            </summary>
    </member>
    <member name="F:EO.Wpf.SpinEditValueFormat.Percentage">
      <summary>
            Formats the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> as percentage value.
            </summary>
    </member>
    <member name="T:EO.Wpf.SplitLineHeightConverter">
      <summary>
            This class is used by <see cref="T:EO.Wpf.SplitButton" /> to calculate the splitter line's height. 
            </summary>
      <remarks>
            The converter always returns a result that is the input value minus 4. The
            <see cref="T:EO.Wpf.SplitButton" /> passes the button's <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> to this converter
            and uses the result height as the split line height.
            </remarks>
    </member>
    <member name="T:EO.Wpf.TemplatePresenter">
      <summary>
            Utility class for rendering a <see cref="T:System.Windows.DataTemplate" />.
            </summary>
      <remarks>
            This class is used by various EO.Wpf controls to render <see cref="T:System.Windows.DataTemplate" /> inside
            a control template. If you replace such a control's control template, you must use this
            class instead of <see cref="T:System.Windows.Controls.ContentPresenter" /> for the corresponding part.
            </remarks>
    </member>
    <member name="F:EO.Wpf.TemplatePresenter.TemplateAppliedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TemplatePresenter.TemplateApplied" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.TemplatePresenter.TemplateApplied">
      <summary>
            Occurs when a new template is applied.
            </summary>
    </member>
    <member name="T:EO.Wpf.DockContainer">
      <summary>
            Represents the root control of a docking layout.
            </summary>
      <remarks>
        <para>
            Use a <see cref="T:EO.Wpf.DockContainer" /> to define a docking layout. See
            <a href="Wpf/Controls/DockView/getting_started.html">here</a> for more details on how to use this class.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.DockContainer.DockViewHeaderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.DockViewHeaderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.DockViewFooterStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.DockViewFooterStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.DockViewBorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.DockViewBorderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.FloatViewFrameStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.FloatViewFrameStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.AutoHideViewBorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.AutoHideViewBorderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.SplitViewStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.SplitViewStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.AutoHideTrayButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.AutoHideTrayButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.TabButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.TabButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.ActiveItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.ActiveItem" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.ActiveViewProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.ActiveView" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.AllowMultiDocumentViewsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockContainer.AllowMultiDocumentViews" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.AutoHideMarginProperty">
      <summary>
            Identifies the <see cref="F:EO.Wpf.DockContainer.AutoHideMarginProperty" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.DockViewNeededEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DockContainer.DockViewNeeded" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.DockViewAddedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DockContainer.DockViewAdded" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.DockItemNeededEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DockContainer.DockItemNeeded" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.ActiveViewChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DockContainer.ActiveViewChanged" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockContainer.ActiveItemChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DockContainer.ActiveItemChanged" /> routed event.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockContainer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.DockContainer" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockContainer.Views">
      <summary>
            Gets the <see cref="T:EO.Wpf.DockViewCollection" /> that contains all the <see cref="T:EO.Wpf.DockView" />
            objects for this <see cref="T:EO.Wpf.DockContainer" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockContainer.ActiveView">
      <summary>
            Gets or sets the active view.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockContainer.ActiveItem">
      <summary>
            Gets the current active <see cref="T:EO.Wpf.DockItem" />.
            </summary>
      <remarks>
            Call <see cref="M:EO.Wpf.DockContainer.ActivateItem(System.String)">ActivateItem</see> to change the current active item.
            </remarks>
    </member>
    <member name="E:EO.Wpf.DockContainer.ActiveViewChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.DockContainer.ActiveView" /> changed.
            </summary>
    </member>
    <member name="E:EO.Wpf.DockContainer.ActiveItemChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.DockContainer.ActiveItem" /> changed.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockContainer.SplitViewStyle">
      <summary>
            Gets or sets the styles for <see cref="T:EO.Wpf.SplitView" /> objects created by the <see cref="T:EO.Wpf.DockContainer" />.
            </summary>
      <remarks>
            Internally the <see cref="T:EO.Wpf.DockContainer" /> uses <see cref="T:EO.Wpf.SplitView" /> to separate <see cref="T:EO.Wpf.DockView" />s.
            Use this property to set the style of these <see cref="T:EO.Wpf.SplitView" /> controls. For example, you can use
            this property to customize the splitter bars.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockContainer.DockViewHeaderStyle">
      <summary>
            Gets or sets the style for the <see cref="T:EO.Wpf.DockView" /> header.
            </summary>
      <remarks>
        <para>
            The target for this style is a <see cref="T:EO.Wpf.TemplatePresenter" />. The <see cref="P:System.Windows.Controls.ContentPresenter.ContentTemplate" />
            of the <see cref="T:EO.Wpf.TemplatePresenter" /> should contain the following element:
            </para>
        <list type="table">
          <listheader>
            <term>Element Name</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>PART_Caption</term>
            <description>An <see cref="T:System.Windows.Controls.TextBlock" /> element used to display the 
            	caption of the dock view.
            	</description>
          </item>
          <item>
            <term>PART_Position</term>
            <description>An <see cref="T:EO.Wpf.DropDown" /> control.
            	Clicking the button triggers the drop down associated to this control, which
            	contains a menu with menu items such as closing or floating the dock view.
            	</description>
          </item>
          <item>
            <term>PART_AutoHide</term>
            <description>An <see cref="T:EO.Wpf.Button" /> control. 
            	Clicking the button switch the dock view into auto hide mode.
            	</description>
          </item>
          <item>
            <term>PART_Close</term>
            <description>An <see cref="T:EO.Wpf.Button" /> control.
            	Clicking the button closes the active item in this <see cref="T:EO.Wpf.DockView" />.
            	</description>
          </item>
          <item>
            <term>PART_Maximize</term>
            <description>An <see cref="T:EO.Wpf.Button" /> control.
            	Clicking the button maximize a floated <see cref="T:EO.Wpf.DockView" /> window. This element
            	is only visible when the <see cref="T:EO.Wpf.DockView" />'s <see cref="P:EO.Wpf.DockView.State" /> is set to
            	<see cref="F:EO.Wpf.DockViewState.Float" /> and the window is currently not maximized.
            	</description>
          </item>
          <item>
            <term>PART_Restore</term>
            <description>An <see cref="T:EO.Wpf.Button" /> control.
            	Clicking the button to restore a floated <see cref="T:EO.Wpf.DockView" /> window. This element
            	is only visible when the <see cref="T:EO.Wpf.DockView" />'s <see cref="P:EO.Wpf.DockView.State" /> is set to
            	<see cref="F:EO.Wpf.DockViewState.Float" /> and the window is currently maximized.
            	</description>
          </item>
          <item>
            <term>PART_TabButtonHolder</term>
            <description>A <see cref="T:EO.Wpf.Primitives.DockViewTabPanel" /> element used to holds the tab buttons for all
            	the <see cref="T:EO.Wpf.DockItem" />s.
            	</description>
          </item>
          <item>
            <term>PART_ItemList</term>
            <description>A <see cref="T:EO.Wpf.DropDownButton" /> control.
            	Clicking the button displays a menu that lists all <see cref="T:EO.Wpf.DockItem" />s in this dock view.
            	</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:EO.Wpf.DockContainer.DockViewFooterStyle">
      <summary>
            Gets or sets the style for a <see cref="T:EO.Wpf.DockView" /> footer.
            </summary>
      <remarks>
        <para>
            The target for this style is a <see cref="T:EO.Wpf.TemplatePresenter" />. The <see cref="P:System.Windows.Controls.ContentPresenter.ContentTemplate" />
            of the <see cref="T:EO.Wpf.TemplatePresenter" /> should contain the following element:
            </para>
        <list type="table">
          <listheader>
            <term>Element Name</term>
            <description>Remark</description>
          </listheader>
          <item>
            <term>PART_TabButtonHolder</term>
            <description>A <see cref="T:EO.Wpf.Primitives.DockViewTabPanel" /> element used to holds all the tab buttons.
            	</description>
          </item>
        </list>
        <para>
            The footer is only visible when the <see cref="T:EO.Wpf.DockView" /> has multiple 
            <see cref="T:EO.Wpf.DockItem" />s and its <see cref="P:EO.Wpf.DockView.IsDocumentView" /> is false.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.DockContainer.DockViewBorderStyle">
      <summary>
            Gets or sets the style to be applied to the <see cref="T:EO.Wpf.DockView" /> border.
            </summary>
      <remarks>
            The target type for this style is <see cref="T:System.Windows.Controls.Border" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockContainer.FloatViewFrameStyle">
      <summary>
            Gets or sets style for the border around the <see cref="T:EO.Wpf.DockView" /> when the <see cref="T:EO.Wpf.DockView" /> is floated.
            </summary>
      <remarks>
            When a <see cref="T:EO.Wpf.DockView" /> is floated, it is hosted inside a <see cref="T:EO.Wpf.WindowChrome" /> object (the 
            <see cref="T:EO.Wpf.WindowChrome" /> is hosted inside a <see cref="T:System.Windows.Window" />). This style applies to that
            <see cref="T:EO.Wpf.WindowChrome" /> object.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockContainer.AutoHideViewBorderStyle">
      <summary>
            Gets or sets style for the border around the <see cref="T:EO.Wpf.DockView" /> when the <see cref="T:EO.Wpf.DockView" /> is in auto hide mode.
            </summary>
      <remarks>
            When a <see cref="T:EO.Wpf.DockView" /> is in auto hide mode, a tab button is created for each <see cref="T:EO.Wpf.DockItem" />. Moving
            mouse over the tab button will display the corresponding <see cref="T:EO.Wpf.DockItem" />. A <see cref="T:System.Windows.Controls.Border" /> is being placed
            around the auto hide area to distinguish it from other UI elements. This style applies to that <see cref="T:System.Windows.Controls.Border" />
            element.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockContainer.AutoHideTrayButtonStyle">
      <summary>
            Gets or sets style for the auto hide tray button.
            </summary>
      <remarks>
            When a <see cref="T:EO.Wpf.DockView" /> is in auto hide mode, a tab button is created for each <see cref="T:EO.Wpf.DockItem" />. Moving
            mouse over the tab button will display the corresponding <see cref="T:EO.Wpf.DockItem" />. This style applies to these buttons.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockContainer.TabButtonStyle">
      <summary>
            Gets or sets the style for the tab buttons at the top or the bottom of the <see cref="T:EO.Wpf.DockView" />.
            </summary>
      <remarks>
            When multiple <see cref="T:EO.Wpf.DockItem" />s are placed in a regular <see cref="T:EO.Wpf.DockView" /> (when <see cref="P:EO.Wpf.DockView.IsDocumentView" /> 
            is false), the <see cref="T:EO.Wpf.DockView" /> displays a tab button for each <see cref="T:EO.Wpf.DockItem" /> at the bottom of the
            dock view. For a document view (when <see cref="P:EO.Wpf.DockView.IsDocumentView" /> is true), the tab buttons are displayed
            at the top of the view. User can use these buttons to switch dock items. This style applies to these buttons.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockContainer.AllowMultiDocumentViews">
      <summary>
            Gets or sets a value indicating whether to allow multiple document views.
            </summary>
      <remarks>
        <para>
            The default value is <b>false</b>, in which case a single <see cref="T:EO.Wpf.DockContainer" /> can have at most one
            <see cref="T:EO.Wpf.DockView" /> with its <see cref="P:EO.Wpf.DockView.IsDocumentView" /> set to <b>true</b>. If you try to set
            a second <see cref="T:EO.Wpf.DockView" />'s <see cref="P:EO.Wpf.DockView.IsDocumentView" /> to true when <see cref="P:EO.Wpf.DockContainer.AllowMultiDocumentViews" />
            is false, an exception is thrown.
            </para>
        <para>
            When <see cref="P:EO.Wpf.DockContainer.AllowMultiDocumentViews" /> is set true, user can also create new document views by dragging
            and dropping a <see cref="T:EO.Wpf.DocumentItem" /> to an area that would create a new view. For example, user can drag
            and drop a <see cref="T:EO.Wpf.DocumentItem" /> from an existing document view and drop it on the left edge of the
            <see cref="T:EO.Wpf.DockContainer" />. This would create a new document view that docks to the left edge of the
            <see cref="T:EO.Wpf.DockContainer" />, with the new document view contains the single dropped <see cref="T:EO.Wpf.DocumentItem" />.
            </para>
        <para>
            When <see cref="P:EO.Wpf.DockContainer.AllowMultiDocumentViews" /> is <b>false</b>, creating a second document view is not allowed,
            thus such drop operation would not be allowed, so user can only drop the <see cref="T:EO.Wpf.DocumentItem" /> back to
            the original document view.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.DockContainer.AutoHideMargin">
      <summary>
            Gets or sets the margin between auto hide buttons and other <see cref="T:EO.Wpf.DockView" />s.
            </summary>
    </member>
    <member name="E:EO.Wpf.DockContainer.DockItemNeeded">
      <summary>
            Occurs when <see cref="M:EO.Wpf.DockContainer.ActivateItem(System.String)" /> is called on an item that has not been created yet.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/DockView/activate_item.html">activating a DockItem</a> for more details.
            </remarks>
    </member>
    <member name="E:EO.Wpf.DockContainer.DockViewNeeded">
      <summary>
            Occurs when <see cref="M:EO.Wpf.DockContainer.ActivateItem(System.String)" /> is called on an item whose containing <see cref="T:EO.Wpf.DockView" /> has not been created yet.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/DockView/activate_item.html">activating a DockItem</a> for more details.
            </remarks>
    </member>
    <member name="E:EO.Wpf.DockContainer.DockViewAdded">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.DockView" /> is added into this <see cref="T:EO.Wpf.DockContainer" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockContainer.SaveLayoutXml">
      <summary>
            Saves the layout of this <see cref="T:EO.Wpf.DockContainer" /> into an XML string.
            </summary>
      <remarks>
            The returned XML can be later passed to <see cref="M:EO.Wpf.DockContainer.LoadLayoutXml(System.String)" /> to reload the layout.
            See <a href="Wpf/Controls/DockView/save_layout.html">here</a> for more information on how to load/save
            layout for a <see cref="T:EO.Wpf.DockContainer" />.
            </remarks>
    </member>
    <member name="M:EO.Wpf.DockContainer.SaveLayout(System.String)">
      <summary>
            Saves the layout of this <see cref="T:EO.Wpf.DockContainer" /> into an XML file.
            </summary>
      <param name="fileName">The XML file name.</param>
    </member>
    <member name="M:EO.Wpf.DockContainer.LoadLayoutXml(System.String)">
      <summary>
            Loads the layout from an XML string previous generated by <see cref="M:EO.Wpf.DockContainer.SaveLayoutXml" />.
            </summary>
      <param name="layoutXml">The layout XML previously created by <see cref="M:EO.Wpf.DockContainer.SaveLayoutXml" />.</param>.
            <remarks>
            See <a href="Wpf/Controls/DockView/save_layout.html">here</a> for more information on how to load/save
            layout for a <see cref="T:EO.Wpf.DockContainer" />.
            </remarks></member>
    <member name="M:EO.Wpf.DockContainer.LoadLayout(System.String)">
      <summary>
            Loads the layout from an XML file.
            </summary>
      <param name="fileName">The XML file name.</param>
      <returns>
            Returns <b>true</b> if the file exists and layout information is loaded, otherwise <b>false</b>.
            </returns>
    </member>
    <member name="M:EO.Wpf.DockContainer.GetViewById(System.String)">
      <summary>
            Returns the first <see cref="T:EO.Wpf.DockView" /> whose <see cref="P:EO.Wpf.DockView.ViewId" /> matches the given Id.
            </summary>
      <param name="viewId">The <see cref="P:EO.Wpf.DockView.ViewId" /> value to match.</param>
    </member>
    <member name="M:EO.Wpf.DockContainer.GetItemById(System.String)">
      <summary>
            Returns the first <see cref="T:EO.Wpf.DockItem" /> whose <see cref="P:EO.Wpf.DockItem.ItemId" /> matches the given Id.
            </summary>
      <param name="itemId">The <see cref="P:EO.Wpf.DockItem.ItemId" /> value to match.</param>
    </member>
    <member name="M:EO.Wpf.DockContainer.GetDocumentView">
      <summary>
            Returns the first document view.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/DockView/document_view.html">here</a> for more information about document view.
            </remarks>
    </member>
    <member name="M:EO.Wpf.DockContainer.GetDocumentViews">
      <summary>
            Returns an array that contains all document views.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/DockView/document_view.html">here</a> for more information about document view.
            </remarks>
    </member>
    <member name="M:EO.Wpf.DockContainer.ActivateItem(System.String)">
      <summary>
            Activate a <see cref="T:EO.Wpf.DockItem" /> object.
            </summary>
      <param name="itemId">The <see cref="P:EO.Wpf.DockItem.ItemId" /> of the <see cref="T:EO.Wpf.DockItem" /> to be activated.</param>
      <remarks>
            This function may create the <see cref="T:EO.Wpf.DockItem" /> or even the containing <see cref="T:EO.Wpf.DockView" /> if needed.
            See <a href="Wpf/Controls/DockView/activate_item.html">activating a DockItem</a> for more details.
            </remarks>
    </member>
    <member name="M:EO.Wpf.DockContainer.LoadItem(EO.Wpf.DockView,System.String)">
      <summary>
            Load a <see cref="T:EO.Wpf.DockItem" /> object without actually activating it.
            </summary>
      <param name="view">The <see cref="T:EO.Wpf.DockView" /> in which the new <see cref="T:EO.Wpf.DockItem" /> should be placed.</param>
      <param name="itemId">The <see cref="P:EO.Wpf.DockItem.ItemId" /> of the <see cref="T:EO.Wpf.DockItem" /> to be activated.</param>
      <remarks>
            This function may create the <see cref="T:EO.Wpf.DockItem" /> or even the containing <see cref="T:EO.Wpf.DockView" /> if <i>view</i>
            argument is <b>null</b>.
            See <a href="Wpf/Controls/DockView/activate_item.html">activating a DockItem</a> for more details.
            </remarks>
    </member>
    <member name="M:EO.Wpf.DockContainer.LoadItem(System.String)">
      <summary>
            Load a <see cref="T:EO.Wpf.DockItem" /> object without actually activating it.
            </summary>
      <remarks>
            This method calls <see cref="M:EO.Wpf.DockContainer.LoadItem(EO.Wpf.DockView,System.String)" /> with the <b>view</b> argument set to <b>null</b>.
            </remarks>
    </member>
    <member name="T:EO.Wpf.DockViewNeededEventArgs">
      <summary>
            Provides information for the <see cref="E:EO.Wpf.DockContainer.DockViewNeeded" /> event.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockViewNeededEventArgs.#ctor(System.Windows.RoutedEvent,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.DockViewNeededEventArgs" /> class.
            </summary>
      <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:EO.Wpf.DockItemEventArgs" /> class.</param>
      <param name="itemId">The <see cref="P:EO.Wpf.DockViewNeededEventArgs.ItemId" /> of the new <see cref="T:EO.Wpf.DockItem" /> for which the view is needed.</param>
    </member>
    <member name="P:EO.Wpf.DockViewNeededEventArgs.ItemId">
      <summary>
            The <see cref="P:EO.Wpf.DockViewNeededEventArgs.ItemId" /> of the new <see cref="T:EO.Wpf.DockItem" /> for which the view is needed.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockViewNeededEventArgs.DockView">
      <summary>
            The <see cref="P:EO.Wpf.DockViewNeededEventArgs.DockView" /> for the new <see cref="T:EO.Wpf.DockItem" />. You must set this property in
            your event handler.
            </summary>
    </member>
    <member name="T:EO.Wpf.DockViewNeededEventHandler">
      <summary>
            Represents the method that will handle <see cref="E:EO.Wpf.DockContainer.DockViewNeeded" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:EO.Wpf.DockViewNeededEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:EO.Wpf.DockViewEventArgs">
      <summary>
            Provides information for events related to a <see cref="P:EO.Wpf.DockViewEventArgs.DockView" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockViewEventArgs.#ctor(System.Windows.RoutedEvent,EO.Wpf.DockView)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.DockViewEventArgs" /> class.
            </summary>
      <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:EO.Wpf.DockViewEventArgs" /> class.</param>
      <param name="dockView">The <see cref="P:EO.Wpf.DockViewEventArgs.DockView" /> object associated to this event.</param>
    </member>
    <member name="P:EO.Wpf.DockViewEventArgs.DockView">
      <summary>
            The <see cref="P:EO.Wpf.DockViewEventArgs.DockView" /> object associated to this event.
            </summary>
      <remarks>
            This <see cref="P:EO.Wpf.DockViewEventArgs.DockView" /> is already added to the <see cref="T:EO.Wpf.DockContainer" /> when this event is raised.
            </remarks>
    </member>
    <member name="T:EO.Wpf.DockViewEventHandler">
      <summary>
            Represents the method that will handle events related to a <see cref="T:EO.Wpf.DockView" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:EO.Wpf.DockViewEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:EO.Wpf.DockItemNeededEventArgs">
      <summary>
            Provides information for the <see cref="E:EO.Wpf.DockContainer.DockItemNeeded" /> event.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockItemNeededEventArgs.#ctor(System.Windows.RoutedEvent,EO.Wpf.DockView,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.DockItemNeededEventArgs" /> class.
            </summary>
      <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:EO.Wpf.DockItemEventArgs" /> class.</param>
      <param name="dockView">The <see cref="T:EO.Wpf.DockView" /> object to which the new <see cref="T:EO.Wpf.DockItem" /> will be added to.</param>
      <param name="itemId">The <see cref="P:EO.Wpf.DockItemNeededEventArgs.ItemId" /> of the new <see cref="T:EO.Wpf.DockItem" /> for which the view is needed.</param>
    </member>
    <member name="P:EO.Wpf.DockItemNeededEventArgs.ItemId">
      <summary>
            The <see cref="P:EO.Wpf.DockItemNeededEventArgs.ItemId" /> of the new <see cref="T:EO.Wpf.DockItem" /> to be created.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockItemNeededEventArgs.Item">
      <summary>
            The newly created <see cref="T:EO.Wpf.DockItem" />.
            </summary>
      <remarks>
            You must set this property in your event handler.
            </remarks>
    </member>
    <member name="T:EO.Wpf.DockItemNeededEventHandler">
      <summary>
            Represents the method that will handle <see cref="E:EO.Wpf.DockContainer.DockItemNeeded" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:EO.Wpf.DockItemNeededEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:EO.Wpf.DockViewState">
      <summary>
            Specifies the state of a <see cref="T:EO.Wpf.DockView" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockViewState.Docked">
      <summary>
            The <see cref="T:EO.Wpf.DockView" /> is docked to one side of the <see cref="T:EO.Wpf.DockContainer" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockViewState.AutoHide">
      <summary>
            The <see cref="T:EO.Wpf.DockView" /> is in auto hide mode.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockViewState.Float">
      <summary>
            The <see cref="T:EO.Wpf.DockView" /> is a floating window.
            </summary>
    </member>
    <member name="T:EO.Wpf.DockView">
      <summary>
            Represents a docking view.
            </summary>
      <remarks>
            A docking view is a dockable panel inside a <see cref="T:EO.Wpf.DockContainer" />.
            A single <see cref="T:EO.Wpf.DockContainer" /> can contain multiple <see cref="T:EO.Wpf.DockView" />s. A
            <see cref="T:EO.Wpf.DockView" /> can also contain multiple child <see cref="T:EO.Wpf.DockView" />s or
            multiple <see cref="T:EO.Wpf.DockItem" />s.
            </remarks>
    </member>
    <member name="F:EO.Wpf.DockView.ViewIdProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.ViewId" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.IsActiveProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.IsActive" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.IsDocumentViewProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.IsDocumentView" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.DockProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.Dock" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.SelectedItemIndexProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.SelectedItemIndex" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.SelectedItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.SelectedItem" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.IconProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.Icon" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.TitleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.Title" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.StateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.State" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.ContainerProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.Container" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.IsFloatingDocumentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.IsFloatingDocument" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.HasItemsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.HasItems" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.HasMultiItemsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.HasMultiItems" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.HasChildViewsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.HasChildViews" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.HeaderTemplate" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.FooterTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.FooterTemplate" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.LeftProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.Left" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.TopProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.Top" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.HeaderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.HeaderStyle" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.FooterStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.FooterStyle" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.BorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.BorderStyle" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.HeaderVisibleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.HeaderVisible" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.AutoGenerateItemIdProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.AutoGenerateItemId" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.AutoItemIdPrefixProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DockView.AutoItemIdPrefix" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DockView.SelectedItemChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.DockView.SelectedItemChanged" /> event.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockView.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.DockView" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockView.Activate">
      <summary>
            Set this <see cref="T:EO.Wpf.DockView" /> as the active view.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockView.CloseSelectedItem">
      <summary>
            Close the current selected item.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.ViewId">
      <summary>
            Gets or sets an ID for this <see cref="T:EO.Wpf.DockView" />.
            </summary>
      <remarks>
            Use this property and <see cref="M:EO.Wpf.DockContainer.GetViewById(System.String)">DockContainer.GetViewById</see> method
            to locate a <see cref="T:EO.Wpf.DockView" /> inside a <see cref="T:EO.Wpf.DockContainer" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.Items">
      <summary>
            Gets a collection of <see cref="T:EO.Wpf.DockItem" /> object contained in this <see cref="T:EO.Wpf.DockView" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.ChildViews">
      <summary>
            Gets a collection of child <see cref="T:EO.Wpf.DockView" /> object contained in this <see cref="T:EO.Wpf.DockView" />.
            </summary>
      <remarks>
            Use this property to create nested dock views. See <a href="Wpf/Controls/DockView/getting_started.html">here</a>
            for more information.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.IsActive">
      <summary>
            Gets a value indicating whether this <see cref="T:EO.Wpf.DockView" /> is active.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.IsDocumentView">
      <summary>
            Gets or set a value indicating whether this <see cref="T:EO.Wpf.DockView" /> is a document view.
            </summary>
      <remarks>
        <para>
            See <a href="Wpf/Controls/DockView/document_view.html">here</a> for more information about
            document views.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.Dock">
      <summary>
            Gets or sets a value indicating to which side this <see cref="T:EO.Wpf.DockView" /> should be docked.
            </summary>
      <remarks>
            This property and the index of this <see cref="T:EO.Wpf.DockView" /> inside its parent
            <see cref="T:EO.Wpf.DockViewCollection" /> together determines the position of this view.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.SelectedItemIndex">
      <summary>
            Gets or sets the index of the selected item.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.SelectedItem">
      <summary>
            Gets the selected item.
            </summary>
      <remarks>
            Use <see cref="P:EO.Wpf.DockView.SelectedItemIndex" /> to change <see cref="P:EO.Wpf.DockView.SelectedItem" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.HeaderTemplate">
      <summary>
            Gets or sets template for the header of the <see cref="T:EO.Wpf.DockView" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.FooterTemplate">
      <summary>
            Gets or sets the template for the footer of the <see cref="T:EO.Wpf.DockView" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.Icon">
      <summary>
            Gets the icon of the <see cref="T:EO.Wpf.DockView" />.
            </summary>
      <remarks>
            The icon of the <see cref="T:EO.Wpf.DockView" /> is the icon of the selected <see cref="T:EO.Wpf.DockItem" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.Title">
      <summary>
            Gets the title of the <see cref="T:EO.Wpf.DockView" />.
            </summary>
      <remarks>
            The title of the <see cref="T:EO.Wpf.DockView" /> is the title of the selected <see cref="T:EO.Wpf.DockItem" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.State">
      <summary>
            Gets or sets the state of this <see cref="T:EO.Wpf.DockView" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.HasItems">
      <summary>
            Gets a value indicating whether this <see cref="T:EO.Wpf.DockView" /> has any items.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.HasMultiItems">
      <summary>
            Gets a value indicating whether this <see cref="T:EO.Wpf.DockView" /> contains multiple items.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.HasChildViews">
      <summary>
            Gets a value indicating whether this <see cref="T:EO.Wpf.DockView" /> has any child views.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.Container">
      <summary>
            Gets the <see cref="T:EO.Wpf.DockContainer" /> object that this <see cref="T:EO.Wpf.DockView" /> is associated with.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.HeaderStyle">
      <summary>
            Gets or sets the style for the <see cref="T:EO.Wpf.DockView" /> header.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.DockContainer.DockViewHeaderStyle">DockContainer.DockViewHeaderStyle</see>
            at runtime.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.FooterStyle">
      <summary>
            Gets or sets the style for the <see cref="T:EO.Wpf.DockView" /> footer.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.DockContainer.DockViewFooterStyle">DockContainer.DockViewFooterStyle</see>
            at runtime.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.BorderStyle">
      <summary>
            Gets or sets the style for the <see cref="T:EO.Wpf.DockView" /> footer.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.DockContainer.DockViewBorderStyle">DockContainer.DockViewBorderStyle</see>
            at runtime.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.HeaderVisible">
      <summary>
            Gets or sets a value indicating whether the header section is visible.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.AutoGenerateItemId">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.DockView" /> should automatically
            generate an <see cref="P:EO.Wpf.DockItem.ItemId" /> for each <see cref="T:EO.Wpf.DockItem" />.
            </summary>
      <remarks>
            When set to <b>true</b>, the <see cref="T:EO.Wpf.DockView" /> automatically generates an unique
            <see cref="P:EO.Wpf.DockItem.ItemId" /> for each <see cref="T:EO.Wpf.DockItem" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.AutoItemIdPrefix">
      <summary>
            Gets or sets the prefix used while automatically generates <see cref="P:EO.Wpf.DockItem.ItemId" /> for each
            <see cref="T:EO.Wpf.DockItem" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.IsFloatingDocument">
      <summary>
            Gets a value indicating whether this is a <see cref="T:EO.Wpf.DockView" /> used to host a floating <see cref="T:EO.Wpf.DocumentItem" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockView.Left">
      <summary>
            Gets or sets the left position of the <see cref="T:EO.Wpf.DockView" />.
            </summary>
      <remarks>
            This property is only used when the <see cref="T:EO.Wpf.DockView" /> is <see cref="F:EO.Wpf.DockViewState.Float" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.DockView.Top">
      <summary>
            Gets or sets the top position of the <see cref="T:EO.Wpf.DockView" />.
            </summary>
      <remarks>
            This property is only used when the <see cref="T:EO.Wpf.DockView" /> is <see cref="F:EO.Wpf.DockViewState.Float" />.
            </remarks>
    </member>
    <member name="E:EO.Wpf.DockView.SelectedItemChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.DockView.SelectedItem" /> changed.
            </summary>
    </member>
    <member name="T:EO.Wpf.DockViewCommands">
      <summary>
            Provides a set of <see cref="T:EO.Wpf.DockView" /> related commands.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockViewCommands.Float">
      <summary>
            Gets the command that would switch the <see cref="T:EO.Wpf.DockView" /> to <see cref="F:EO.Wpf.DockViewState.Float" /> state.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockViewCommands.Dock">
      <summary>
            Gets the command that would switch the <see cref="T:EO.Wpf.DockView" /> to <see cref="F:EO.Wpf.DockViewState.Docked" /> state.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockViewCommands.DockAsTabbedDocument">
      <summary>
            Gets the command that would switch all items in the <see cref="T:EO.Wpf.DockView" /> as tabs in the document view.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockViewCommands.AutoHide">
      <summary>
            Gets the command that would switch the <see cref="T:EO.Wpf.DockView" /> to <see cref="F:EO.Wpf.DockViewState.AutoHide" /> state.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockViewCommands.ToggleAutoHide">
      <summary>
            Gets the command that would toggle the <see cref="T:EO.Wpf.DockView" />'s <see cref="P:EO.Wpf.DockView.State" /> 
            between <see cref="F:EO.Wpf.DockViewState.AutoHide" /> and <see cref="F:EO.Wpf.DockViewState.Docked" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockViewCommands.Hide">
      <summary>
            Gets the command that would close the selected item of the <see cref="T:EO.Wpf.DockView" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockViewCommands.Maximize">
      <summary>
            Gets the value that would maximize the <see cref="T:EO.Wpf.DockView" /> if the <see cref="T:EO.Wpf.DockView" /> is 
            in <see cref="F:EO.Wpf.DockViewState.Float" /> state.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockViewCommands.Restore">
      <summary>
            Gets the value that would restore the <see cref="T:EO.Wpf.DockView" /> to its original size if the 
            <see cref="T:EO.Wpf.DockView" /> is in <see cref="F:EO.Wpf.DockViewState.Float" /> state and the window is
            currently maximized.
            </summary>
    </member>
    <member name="T:EO.Wpf.DockViewCollection">
      <summary>
            Represents a collection of <see cref="T:EO.Wpf.DockView" /> objects.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockViewCollection.IndexOf(EO.Wpf.DockView)">
      <summary>
            Returns the index of a specific <see cref="T:EO.Wpf.DockView" /> object in the collection.
            </summary>
      <param name="view">The <see cref="T:EO.Wpf.DockView" /> object to locate.</param>
    </member>
    <member name="M:EO.Wpf.DockViewCollection.Insert(System.Int32,EO.Wpf.DockView)">
      <summary>
            Inserts a <see cref="T:EO.Wpf.DockView" /> object at the specified index.
            </summary>
      <param name="index">The zero-based index at which <i>view</i> should be inserted.</param>
      <param name="view">The <see cref="T:EO.Wpf.DockView" /> object to be inserted.</param>
    </member>
    <member name="M:EO.Wpf.DockViewCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:EO.Wpf.DockView" /> object at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="P:EO.Wpf.DockViewCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:EO.Wpf.DockView" /> object at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to get or set.</param>
    </member>
    <member name="M:EO.Wpf.DockViewCollection.Add(EO.Wpf.DockView)">
      <summary>
            Add a new <see cref="T:EO.Wpf.DockView" /> object into the collection.
            </summary>
      <param name="item">The new <see cref="T:EO.Wpf.DockView" /> object to add.</param>
    </member>
    <member name="M:EO.Wpf.DockViewCollection.Clear">
      <summary>
            Clears all <see cref="T:EO.Wpf.DockView" /> objects in the collection.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockViewCollection.Contains(EO.Wpf.DockView)">
      <summary>
            Determines whether the collection contains a specific <see cref="T:EO.Wpf.DockView" /> object.
            </summary>
      <param name="item">The <see cref="T:EO.Wpf.DockView" /> object to check.</param>
    </member>
    <member name="M:EO.Wpf.DockViewCollection.CopyTo(EO.Wpf.DockView[],System.Int32)">
      <summary>
            Copies the <see cref="T:EO.Wpf.DockView" /> objects in the collection to an array.
            </summary>
      <param name="array">The destination array.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:EO.Wpf.DockViewCollection.Count">
      <summary>
            Returns the number of items in the collection.
            </summary>
    </member>
    <member name="P:EO.Wpf.DockViewCollection.IsReadOnly">
      <summary>
            Returns a value indicating whether the collection is readonly, always returns <b>false</b>.
            </summary>
    </member>
    <member name="M:EO.Wpf.DockViewCollection.Remove(EO.Wpf.DockView)">
      <summary>
            Removes a <see cref="T:EO.Wpf.DockView" /> from the collection.
            </summary>
      <param name="item">The <see cref="T:EO.Wpf.DockView" /> to be removed.</param>
      <returns>Returns <b>true</b> if the specified <see cref="T:EO.Wpf.DockView" /> was in the collection and has been removed,
            otherwise <b>false</b>.</returns>
    </member>
    <member name="M:EO.Wpf.DockViewCollection.GetEnumerator">
      <summary>
            Gets the enumerator for this collection.
            </summary>
    </member>
    <member name="T:EO.Wpf.DropDownButton">
      <summary>
            Represents a button that opens a drop down window when clicked.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Buttons/dropdownbutton.html">here</a> for more information about how to use this control.
            </remarks>
    </member>
    <member name="F:EO.Wpf.DropDownButton.DropDownProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownButton.DropDown" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownButton.IsDropDownOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownButton.IsDropDownOpen" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownButton.MaxDropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownButton.MaxDropDownHeight" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownButton.DropDownContentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownButton.DropDownContent" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownButton.DropDownPlacementTargetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.DropDownButton.DropDownPlacementTarget" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownButton.DropDown">
      <summary>
            Gets or sets the <see cref="P:EO.Wpf.DropDownButton.DropDown" /> associated to this button.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownButton.IsDropDownOpen">
      <summary>
            Gets or sets a value indicating whether the drop down is currently open.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownButton.MaxDropDownHeight">
      <summary>
            Gets or sets the maximum drop down height.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownButton.DropDownContent">
      <summary>
            Gets or sets the drop down content.
            </summary>
    </member>
    <member name="P:EO.Wpf.DropDownButton.DropDownPlacementTarget">
      <summary>
            Gets or sets the <see cref="T:System.Windows.UIElement" /> relative to which the dorp down is positioned when it opens. 
            </summary>
    </member>
    <member name="M:EO.Wpf.Extensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Execute an <see cref="T:System.Action`1" /> on the elements of a collection.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="collection">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="T:EO.Wpf.RangeSlider">
      <summary>
            Represents a <see cref="T:EO.Wpf.SliderBase" /> control where the end user can select
            two values from a range by moving two <see cref="T:System.Windows.Controls.Primitives.Thumb" /> controls along a <see cref="T:EO.Wpf.Primitives.RangeTrack" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.RangeSlider.RangeStartProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RangeSlider.RangeStart" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.RangeSlider.RangeEndProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RangeSlider.RangeEnd" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.RangeSlider.RangeStartChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.RangeSlider.RangeStartChanged" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.RangeSlider.RangeEndChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.RangeSlider.RangeEndChanged" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.RangeSlider.MiddleThumbStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.RangeSlider.MiddleThumbStyle" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.RangeSlider.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.RangeSlider" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.RangeSlider.RangeStart">
      <summary>
            Gets or sets a value that specifies the start of the range.
            </summary>
      <value>A <see cref="T:System.Double" /> value that specifies the start of the range. The default value is (0.0).</value>
    </member>
    <member name="P:EO.Wpf.RangeSlider.RangeEnd">
      <summary>
            Gets or sets a value that specifies the end of the range.
            </summary>
      <value>A <see cref="T:System.Double" /> value that specifies the end of the range. The default value is (0.0).</value>
    </member>
    <member name="P:EO.Wpf.RangeSlider.MiddleThumbStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the middle thumb.
            This is a dependency property.
            </summary>
      <remarks>
            The middle thumb is the region between the two thumbs. User can drag this area
            to move both the left/top thumb and the right/bottom thumb together. See
            <a href="Wpf/Controls/Slider/range_slider.html#customize">here</a> for more
            information about customizing thumbs.
            </remarks>
    </member>
    <member name="E:EO.Wpf.RangeSlider.RangeStartChanged">
      <summary>
            Occurs when the <see cref="P:EO.Wpf.RangeSlider.RangeStart" /> value change.
            </summary>
    </member>
    <member name="E:EO.Wpf.RangeSlider.RangeEndChanged">
      <summary>
            Occurs when the <see cref="P:EO.Wpf.RangeSlider.RangeEnd" /> value change.
            </summary>
    </member>
    <member name="T:EO.Wpf.SelectedDatesCollection">
      <summary>
            Represents a collection of <see cref="T:System.DateTime" /> values.
            </summary>
    </member>
    <member name="T:EO.Wpf.SideTickVisibility">
      <summary>
            Specifies which side tick of a <see cref="T:EO.Wpf.Slider" /> or <see cref="T:EO.Wpf.RangeSlider" /> is kept visible.
            </summary>
    </member>
    <member name="F:EO.Wpf.SideTickVisibility.Both">
      <summary>
            Both minimum and maximum ticks are visible.
            </summary>
    </member>
    <member name="F:EO.Wpf.SideTickVisibility.Min">
      <summary>
            Only the tick representing the minimum value is visible.
            </summary>
    </member>
    <member name="F:EO.Wpf.SideTickVisibility.Max">
      <summary>
            Only the tick representing the maximum value is visible.
            </summary>
    </member>
    <member name="T:EO.Wpf.SliderBase">
      <summary>
            Represents the base class for the <see cref="T:EO.Wpf.Slider" /> and the <see cref="T:EO.Wpf.RangeSlider" /> controls.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.IsDirectionReversedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.IsDirectionReversed" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.IsMoveToPointEnabledProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.IsMoveToPointEnabled" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.TickFrequencyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.TickFrequency" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.IsSnapToTickEnabledProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.IsSnapToTickEnabled" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.DelayProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.Delay" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.IntervalProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.Interval" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.TickPlacementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.TickPlacement" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.ShowIncreaseDecreaseButtonProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.ShowIncreaseDecreaseButton" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.EnableSideTicksProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.EnableSideTicks" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.AutoToolTipPrecisionProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.AutoToolTipPrecision" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.AutoTooltipPlacementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.AutoToolTipPlacement" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.TicksProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.Ticks" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.UiTicksProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.UiTicks" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.TrackBackgroundStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.TrackBackgroundStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.DecreaseButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.DecreaseButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.IncreaseButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.IncreaseButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.TopLeftTickTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.TopLeftTickTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.TopLeftTickTemplateSelectorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.TopLeftTickTemplateSelector" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.BottomRightTickTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.BottomRightTickTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.BottomRightTickTemplateSelectorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.BottomRightTickTemplateSelector" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SliderBase.ThumbStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SliderBase.ThumbStyle" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.SliderBase.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.SliderBase" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.Orientation">
      <summary>
            Gets or sets the orientation of a <see cref="T:EO.Wpf.SliderBase" /> derived
            control. This is a dependency property.
            </summary>
      <value>One of the <see cref="T:System.Windows.Controls.Orientation" />
            values. The default is 
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
            </value>
    </member>
    <member name="P:EO.Wpf.SliderBase.IsDirectionReversed">
      <summary>
            Gets or sets the direction of increasing value. This is a dependency
            property.
            </summary>
      <value>
        <c>true</c> if the direction of increasing value is to the left for
            a horizontal slider or down for a vertical slider; otherwise, 
            <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.SliderBase.ShowIncreaseDecreaseButton">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.SliderBase" />
            should display an increase and a decrease button.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.EnableSideTicks">
      <summary>
            This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.SideTickVisibility" /> enumeration. The default
            value is <see cref="F:EO.Wpf.SideTickVisibility.Both" />.
            </value>
    </member>
    <member name="P:EO.Wpf.SliderBase.AutoToolTipPlacement">
      <summary>
            Gets or sets whether a tooltip that contains the current value of
            the <see cref="T:EO.Wpf.SliderBase" /> derive control displays when the 
            <see cref="T:System.Windows.Controls.Primitives.Thumb" /> is pressed.  If a tooltip is displayed, this
            property also specifies the placement of the tooltip. 
            </summary>
      <value>
            One of the 
            <see cref="T:System.Windows.Controls.Primitives.AutoToolTipPlacement" />
            values that determines where to display the tooltip with respect to
            the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> of the <see cref="T:EO.Wpf.SliderBase" /> derived
            control, or that specifies to not show a tooltip. The default is 
            <see cref="F:System.Windows.Controls.Primitives.AutoToolTipPlacement.None" />
            , which specifies that a tooltip is not displayed.
            </value>
      <remarks>
            When <see cref="P:EO.Wpf.SliderBase.AutoToolTipPlacement" /> is set to a value other than
            <b>None</b>, a tooltip is displayed when user drags the thumb to
            display the current value of the thumb.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SliderBase.AutoToolTipPrecision">
      <summary>
            Gets or sets the number of digits that are displayed to the right
            side of the decimal point for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of
            the <see cref="T:EO.Wpf.SliderBase" /> derived control in a tooltip. 
            </summary>
      <value>The precision of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> that
            displays in the tooltip, specified as the number of digits that
            appear to the right of the decimal point. The default is zero (0).
            </value>
      <remarks>
            When <see cref="P:EO.Wpf.SliderBase.AutoToolTipPlacement" /> is set to a value other than
            <b>None</b>, a tooltip is displayed when user drags the thumb to
            display the current value of the thumb.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SliderBase.IsMoveToPointEnabled">
      <summary>
            Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.Primitives.Thumb" />
            of a <see cref="T:EO.Wpf.SliderBase" /> derived control moves immediately to
            the location of the mouse click that occurs while the mouse pointer
            pauses on the 
             <see cref="T:EO.Wpf.SliderBase" /> derived control track. This is a
             dependency property.
            </summary>
      <remarks>
            By default this property is <b>false</b>. In that case when user
            clicks on the track, the <see cref="T:EO.Wpf.SliderBase" /> increases or
            decreases its <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> by 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" />. When this property is set to 
            <b>true</b>, it moves the thumb directly to the click position.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SliderBase.IsSnapToTickEnabled">
      <summary>
            Gets or sets a value that indicates whether the 
            <see cref="T:EO.Wpf.SliderBase" /> derived control automatically moves the 
            <see cref="T:System.Windows.Controls.Primitives.Thumb" /> to the closest tick mark. This is a dependency
            property.
            </summary>
      <value>
        <c>true</c> to enable snapping to ticks; otherwise <c>false</c>. The
            default value is <c>false</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.SliderBase.TickFrequency">
      <summary>
            Gets or sets the interval between tick marks. This is a dependency
            property.
            </summary>
      <remarks>
            When this property is set, the <see cref="T:EO.Wpf.SliderBase" />
            automatically populates its <see cref="P:EO.Wpf.SliderBase.Ticks" />collection based on 
            <see cref="P:EO.Wpf.SliderBase.TickFrequency" /> and <see cref="P:EO.Wpf.SliderBase.EnableSideTicks" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SliderBase.TickPlacement">
      <summary>
            Gets or sets the position of tick marks with respect to the Track of
            the <see cref="T:EO.Wpf.SliderBase" /> derived control.  This is a dependency
            property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.Ticks">
      <summary>
            Gets or sets the positions of the tick marks to display for a 
            <see cref="T:EO.Wpf.SliderBase" /> derived control.  This is a dependency
            property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.IncreaseButtonStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the bottom/right
            handle. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.DecreaseButtonStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the top/left handle.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.ThumbStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the 
            <see cref="T:EO.Wpf.Slider" /> or <see cref="T:EO.Wpf.RangeSlider" /> thumb control.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.TopLeftTickTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used to display each
            top/left tick. This is a dependency property.
            </summary>
      <remarks>
        <para>
            You can use a <see cref="T:System.Windows.DataTemplate" /> to customize the appearance
            of each tick on the top/left tickbar. For example, the following code displays a black
            ellipse for each top tick:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:Slider TickFrequency="2" TickPlacement="TopLeft" VerticalAlignment="Center" Width="150"&gt;
               &lt;eo:Slider.TopLeftTickTemplate&gt;
                   &lt;DataTemplate&gt;
                       &lt;Ellipse Width="6" Height="6" Fill="Black" /&gt;
                   &lt;/DataTemplate&gt;
               &lt;/eo:Slider.TopLeftTickTemplate&gt;
            &lt;/eo:Slider&gt;
            </code>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SliderBase.TopLeftTickTemplateSelector">
      <summary>
            Gets or sets the custom logic for choosing a template used to
            display each item. This is a dependency property.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Slider/tick_template.html">using tick template
            </a> for more information on how to use this property.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SliderBase.BottomRightTickTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used to display each
            bottom/right tick. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.BottomRightTickTemplateSelector">
      <summary>
            Gets or sets the custom logic for choosing a template used to
            display each item property. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.Delay">
      <summary>
            Gets or sets the amount of time in milliseconds that a 
            <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> waits, while it is pressed,  before a
            command to move the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> executes, such as a 
            <see cref="P:EO.Wpf.SliderBase.DecreaseLarge" /> command.  This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.Interval">
      <summary>
            Gets or sets the amount of time in milliseconds between increase or
            decrease commands when a user  clicks the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" />
            of a <see cref="T:EO.Wpf.SliderBase" /> derived control. This is a dependency
            property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.TrackBackgroundStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the trach background
            element. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.DecreaseLarge">
      <summary>
            Gets a command that decreases the value of the 
            <see cref="T:EO.Wpf.SliderBase" /> derived control by the same amount  as the 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.DecreaseSmall">
      <summary>
            Gets a command that decreases the value of the 
            <see cref="T:EO.Wpf.SliderBase" /> derived control by the same amount  as the 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.IncreaseLarge">
      <summary>
            Gets a command that increases the value of the 
            <see cref="T:EO.Wpf.SliderBase" /> derived control by the same amount  as the 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.SliderBase.IncreaseSmall">
      <summary>
            Gets a command that increases the value of the 
            <see cref="T:EO.Wpf.SliderBase" /> derived control by the same amount  as the 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" /> property.
            </summary>
    </member>
    <member name="T:EO.Wpf.SplitButton">
      <summary>
            Represents a button control that is divided into two halves: the left half functions as a button and the
            right half functions as a drop down button.
            </summary>
    </member>
    <member name="T:EO.Wpf.SplitViewChildView">
      <summary>
            Specifies one of the child view of the <see cref="T:EO.Wpf.SplitView" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitViewChildView.None">
      <summary>
            Represents neither <see cref="P:EO.Wpf.SplitView.View1" /> nor <see cref="P:EO.Wpf.SplitView.View2" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitViewChildView.View1">
      <summary>
            Represents <see cref="P:EO.Wpf.SplitView.View1" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitViewChildView.View2">
      <summary>
            Represents <see cref="P:EO.Wpf.SplitView.View2" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.SplitView">
      <summary>
            Represents a control consisting of a movable bar that divides the control into two resizable regions.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View1Property">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View1" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View2Property">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View2" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View1BorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View1BorderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View2BorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View2BorderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View1WidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View1Width" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View1MinWidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View1MinWidth" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View1IconProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View1Icon" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View1TitleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View1Title" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View1TabButtonTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View1TabButtonTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View2WidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View2Width" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View2MinWidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View2MinWidth" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View2IconProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View2Icon" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View2TitleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View2Title" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.View2TabButtonTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.View2TabButtonTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.SwapViewProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.SwapView" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.SplitterModeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.SplitterMode" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.SplitterPositionProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.SplitterPosition" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.SplitterBorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.SplitterBorderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.SplitterBackgroundProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.SplitterBackground" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.SplitterWidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.SplitterWidth" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.SplitterTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.SplitterTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.DragIndicatorTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.DragIndicatorTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.ActiveViewProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.ActiveView" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.DocumentViewProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.DocumentView" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.CollapseStateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.SplitView.CollapseState" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.ActiveViewChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.SplitView.ActiveViewChanged" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.SplitterPositionChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.SplitView.SplitterPositionChanged" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitView.OrientationChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.SplitView.OrientationChanged" /> routed event.
            </summary>
    </member>
    <member name="M:EO.Wpf.SplitView.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.SplitView" /> control.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.View1">
      <summary>
            Gets or sets the contents of the first panel.
            </summary>
      <remarks>
            The following code demonstrates how to set the contents of the first panel:
            <code lang="XML" title="XAML">
            &lt;eo:SplitView&gt;
                &lt;!-- Specify the contents of the first panel --&gt;
                &lt;eo:SplitView.View1&gt;
                    &lt;TextBlock HorizontalAlignment="Center" VerticalAlignment="Center"&gt;
                        Some text 
                    &lt;/TextBlock&gt;
                &lt;/eo:SplitView.View1&gt;
                ....
            &lt;/eo:SplitView&gt;
            </code></remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.View2">
      <summary>
            Gets or sets the contents of the second panel.
            </summary>
      <remarks>
            The following code demonstrates how to set the contents of the second panel:
            <code lang="XML" title="XAML">
            &lt;eo:SplitView&gt;
                ....
                &lt;!-- Specify the contents of the second panel --&gt;
                &lt;eo:SplitView.View2&gt;
                    &lt;TextBlock HorizontalAlignment="Center" VerticalAlignment="Center"&gt;
                        Some text 
                    &lt;/TextBlock&gt;
                &lt;/eo:SplitView.View2&gt;
            &lt;/eo:SplitView&gt;
            </code></remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.View1BorderStyle">
      <summary>
            Gets or sets the style applied to the <see cref="T:System.Windows.Controls.Border" /> element around <see cref="P:EO.Wpf.SplitView.View1" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.View2BorderStyle">
      <summary>
            Gets or sets the style applied to the <see cref="T:System.Windows.Controls.Border" /> element around <see cref="P:EO.Wpf.SplitView.View2" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.View1MinWidth">
      <summary>
            Gets or sets the minimum width or height of the first panel.
            </summary>
      <remarks>
        <para>
            Use this property to specify the mimimum width or height of the first panel. When
            <see cref="P:EO.Wpf.SplitView.Orientation" /> is <b>Horizontal</b>, this property specifies the mimimum
            width. When <see cref="P:EO.Wpf.SplitView.Orientation" /> is <b>Vertical</b>, this property specifies
            the mimimum height.
            </para>
        <para>
            For example, if <see cref="P:EO.Wpf.SplitView.View1MinWidth" /> is set to 20 and <see cref="P:EO.Wpf.SplitView.Orientation" />
            is <b>Vertical</b>, then user will not be able to drag the splitter to reduce the
            height of the first panel to be less than 20.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.View1Width">
      <summary>
            Gets or sets the initial width or height of the first panel.
            </summary>
      <remarks>
        <para>
            Use this property to specify the initial width or height of the first panel. When
            <see cref="P:EO.Wpf.SplitView.Orientation" /> is <b>Horizontal</b>, this property specifies the initial
            width of the first panel. When <see cref="P:EO.Wpf.SplitView.Orientation" /> is <b>Vertical</b>, this
            property specifies the initial height of the first panel.
            </para>
        <para>
            You can use "star size" with this property. For example, if <see cref="P:EO.Wpf.SplitView.View1Width" />
            is set to "1*" and <see cref="P:EO.Wpf.SplitView.View2Width" /> is set to "2*", then the second panel
            would receive twice of the space as the first panel.
            </para>
        <para>
            This property is ignored if <see cref="P:EO.Wpf.SplitView.SplitterPosition" /> is set.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.View1Icon">
      <summary>
            Gets or sets the icon for the tab button associated to the first view.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.View1Title">
      <summary>
            Gets or sets the text for the tab button associated to the first view.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.View1TabButtonTemplate">
      <summary>
            Gets or sets the template for the tab button associated to the first view.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.View2MinWidth">
      <summary>
            Gets or sets the minimum width or height of the second panel.
            </summary>
      <remarks>
        <para>
            Use this property to specify the mimimum width or height of the second panel. When
            <see cref="P:EO.Wpf.SplitView.Orientation" /> is <b>Horizontal</b>, this property specifies the mimimum
            width. When <see cref="P:EO.Wpf.SplitView.Orientation" /> is <b>Vertical</b>, this property specifies
            the mimimum height.
            </para>
        <para>
            For example, if <see cref="P:EO.Wpf.SplitView.View2MinWidth" /> is set to 20 and <see cref="P:EO.Wpf.SplitView.Orientation" />
            is <b>Vertical</b>, then user will not be able to drag the splitter to reduce the
            height of the second panel to be less than 20.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.View2Width">
      <summary>
            Gets or sets the initial width or height of the second panel.
            </summary>
      <remarks>
        <para>
            Use this property to specify the initial width or height of the second panel. When
            <see cref="P:EO.Wpf.SplitView.Orientation" /> is <b>Horizontal</b>, this property specifies the initial
            width of the first panel. When <see cref="P:EO.Wpf.SplitView.Orientation" /> is <b>Vertical</b>, this
            property specifies the initial height of the first panel.
            </para>
        <para>
            You can use "star size" with this property. For example, if <see cref="P:EO.Wpf.SplitView.View1Width" />
            is set to "1*" and <see cref="P:EO.Wpf.SplitView.View2Width" /> is set to "2*", then the second panel
            would receive twice of the space as the first panel.
            </para>
        <para>
            This property is ignored if <see cref="P:EO.Wpf.SplitView.SplitterPosition" /> is set.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.View2Icon">
      <summary>
            Gets or sets the icon for the tab button associated to the second view.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.View2Title">
      <summary>
            Gets or sets the text for the tab button associated to the second view.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.View2TabButtonTemplate">
      <summary>
            Gets or sets the template for the tab button associated to the second view.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.SwapView">
      <summary>
            Gets or sets a value indicating whether <see cref="P:EO.Wpf.SplitView.View1" /> and <see cref="P:EO.Wpf.SplitView.View2" /> should swap position.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.SplitterMode">
      <summary>
            Gets or sets the splitter mode.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.SplitterPosition">
      <summary>
            Gets or sets the position of the splitter bar.
            </summary>
      <remarks>
            This property overrides both <see cref="P:EO.Wpf.SplitView.View1Width" /> and <see cref="P:EO.Wpf.SplitView.View2Width" />.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.SplitterBorderStyle">
      <summary>
            Gets or sets the splitter border style.
            </summary>
      <remarks>
            The target type of this style is <see cref="T:System.Windows.Controls.Border" />.
            See <a href="Wpf/Controls/SplitView/customize_splitter.html#drag_indicator">customizing drag indicator template</a>
            for more details on how to customize splitter.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.SplitterBackground">
      <summary>
            Gets or sets the background of the splitter bar.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/SplitView/customize_splitter.html#drag_indicator">customizing drag indicator template</a>
            for more details on how to customize splitter.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.SplitterTemplate">
      <summary>
            Gets or sets the splitter bar template.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/SplitView/customize_splitter.html#splitter_template">customizing splitter template</a> for more
            details.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.SplitterWidth">
      <summary>
            Gets or sets the width or height of the splitter bar.
            </summary>
      <remarks>
            If <see cref="P:EO.Wpf.SplitView.Orientation" /> is <b>Horizontal</b>, then this property
            specifies the width of the splitter bar. If <see cref="P:EO.Wpf.SplitView.Orientation" /> is 
            <b>Vertical</b>, then this property specifies the height of the splitter
            bar.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.DragIndicatorTemplate">
      <summary>
            Gets or sets the drag indicator template.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/SplitView/customize_splitter.html#drag_indicator">customizing drag indicator template</a>
            for more details.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.Orientation">
      <summary>
            Gets or sets the split view orientation.
            </summary>
      <remarks>
            When <see cref="P:EO.Wpf.SplitView.Orientation" /> is <see cref="F:System.Windows.Controls.Orientation.Horizontal" />, the two pane are arranged horizontally,
            in this case the splitter bar is vertical.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.CollapseState">
      <summary>
            Gets or sets the splitter collapse state.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Wpf.SplitView.SplitterMode" /> is set to <b>Advanced</b>.
            </remarks>
    </member>
    <member name="P:EO.Wpf.SplitView.ActiveView">
      <summary>
            Gets or sets the active view for this <see cref="T:EO.Wpf.SplitView" /> control.
            </summary>
    </member>
    <member name="P:EO.Wpf.SplitView.DocumentView">
      <summary>
            Gets or sets the primary view for this <see cref="T:EO.Wpf.SplitView" /> control.
            </summary>
      <remarks>
            When the <see cref="T:EO.Wpf.SplitView" /> resizes, the <see cref="P:EO.Wpf.SplitView.DocumentView" /> resizes accordingly.
            </remarks>
    </member>
    <member name="E:EO.Wpf.SplitView.ActiveViewChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.SplitView.ActiveView" /> property has changed.
            </summary>
    </member>
    <member name="E:EO.Wpf.SplitView.SplitterPositionChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.SplitView.SplitterPosition" /> property has changed.
            </summary>
    </member>
    <member name="E:EO.Wpf.SplitView.OrientationChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.SplitView.Orientation" /> property has changed.
            </summary>
    </member>
    <member name="T:EO.Wpf.SplitterMode">
      <summary>
            Specifies the splitter mode of a <see cref="T:EO.Wpf.SplitView" /> control.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitterMode.Basic">
      <summary>
            Displays a basic splitter which allows user to resize the two panels divided by the splitter.
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitterMode.Advanced">
      <summary>
            Displays an advanced splitter which not only allows user to resize the two panels divided
            by the splitter, but also provide additional features such as swap, expand and collapse the
            pannels.
            </summary>
    </member>
    <member name="T:EO.Wpf.SplitterCollapseState">
      <summary>
            Specifies whether the splitter bar is collapsed to one side of the <see cref="T:EO.Wpf.SplitView" /></summary>
    </member>
    <member name="F:EO.Wpf.SplitterCollapseState.TopLeft">
      <summary>
            The splitter bar is collapsed to the top (for vertical SplitView) or to the
            left (for Horizontal SplitView).
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitterCollapseState.BottomRight">
      <summary>
            The splitter bar is collapsed to the bottom (for vertical SplitView) or to the
            right (for Horizontal SplitView).
            </summary>
    </member>
    <member name="F:EO.Wpf.SplitterCollapseState.Middle">
      <summary>
            The splitter bar is not collapsed and appears in between two views.
            </summary>
    </member>
    <member name="T:EO.Wpf.TreeView">
      <summary>
            Represents a control that displays hierarchical data in a tree structure that has items that can expand and collapse. 
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.SelectedItemChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeView.SelectedItemChanged" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.TreeView.SelectedItemChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.TreeView.SelectedItem" /> changed.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.SelectedValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.SelectedValue" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.SelectedValue">
      <summary>
            Gets the selected value.
            </summary>
      <remarks>
        <see cref="P:EO.Wpf.TreeView.SelectedValue" /> is derived from <see cref="P:EO.Wpf.TreeView.SelectedItem" /> and <see cref="P:EO.Wpf.TreeView.SelectedValuePath" />.
            </remarks>
    </member>
    <member name="F:EO.Wpf.TreeView.SelectedValuePathProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.SelectedValuePath" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.SelectedValuePath">
      <summary>
            Gets or sets the path that is used to get the <see cref="P:EO.Wpf.TreeView.SelectedValue" /> of 
            the <see cref="P:EO.Wpf.TreeView.SelectedItem" /> in a TreeView.
            </summary>
      <remarks>
        <para>
            This property is used to populate <see cref="P:EO.Wpf.TreeView.SelectedValue" /> from <see cref="P:EO.Wpf.TreeView.SelectedItem" />.
            If <see cref="P:EO.Wpf.TreeView.SelectedItem" /> is an XML node, then this property should be an XPath that will
            be used to evaluate a value from the XML node. Otherwise it should be a property path that
            can be used to evaluate a value from the <see cref="P:EO.Wpf.TreeView.SelectedItem" /> object.
            </para>
        <para>
            The default value is an empty string. In this case if <see cref="P:EO.Wpf.TreeView.SelectedItem" /> is an
            XML node, then <see cref="P:EO.Wpf.TreeView.SelectedValue" /> is the <b>InnerText</b> of the node. If
            <see cref="P:EO.Wpf.TreeView.SelectedItem" /> is not an XML node, then <see cref="P:EO.Wpf.TreeView.SelectedValue" /> returns the
            same value as <see cref="P:EO.Wpf.TreeView.SelectedItem" />.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.TreeView.SelectedItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.SelectedItem" /> property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.SelectedItem">
      <summary>
            Gets the selected item in a <see cref="T:EO.Wpf.TreeView" />.
            </summary>
      <remarks>
        <para>
            The selected item maybe a <see cref="T:EO.Wpf.TreeViewItem" /> object or maybe the data object
            that is used to create the <see cref="T:EO.Wpf.TreeViewItem" /> object. For example, in the
            following case where all <see cref="T:EO.Wpf.TreeViewItem" />s are directly declared in XAML,
            the <see cref="P:EO.Wpf.TreeView.SelectedItem" /> is a <see cref="T:EO.Wpf.TreeViewItem" /> object:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:TreeView&gt;
                &lt;eo:TreeViewItem Header="Item 1"&gt;&lt;/eo:TreeViewItem&gt;
                &lt;eo:TreeViewItem Header="Item 2"&gt;&lt;/eo:TreeViewItem&gt;
                &lt;eo:TreeViewItem Header="Item 3"&gt;&lt;/eo:TreeViewItem&gt;
            &lt;/eo:TreeView&gt;
            </code>
        <para>
            In this case, you can use the following code to get the selected item text:
            <code lang="C#" title="C#">
            //Get the selected TreeViewItem
            TreeViewItem item = (TreeViewItem)TreeView1.SelectedItem;
            
            //Get the item text
            string itemText = (string)item.Header;
            </code><code lang="VB" title="Visual Basic.NET">
            'Get the selected TreeViewItem
            Dim item As TreeViewItem = DirectCast(TreeView1.SelectedItem, TreeViewItem)
            
            'Get the item text
            Dim itemText As String = DirectCast(item.Header, String)
            </code></para>
        <para>
            If the TreeView is populated from an <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" />, then <see cref="P:EO.Wpf.TreeView.SelectedItem" />
            will be the source data item object. For example, the following code initializes the
            TreeView with two <see cref="T:EO.Wpf.TreeViewItem" />s:
            </para>
        <code lang="C#" title="C#">
            TreeView1.ItemsSource = new string[]{"Item 1", "Item 2"};
            </code>
        <code lang="VB" title="Visual Basic.NET">
            TreeView1.ItemsSource = New String() {"Item 1", "Item 2"}
            </code>
        <para>
            In this case, <see cref="P:EO.Wpf.TreeView.SelectedItem" /> will be the string "Item 1" or "Item 2".
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.TreeView.ShowCheckBoxProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.ShowCheckBox" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.ShowCheckBox">
      <summary>
            Gets or sets the default value for <see cref="P:EO.Wpf.TreeViewItem.ShowCheckBox">TreeViewItem.ShowCheckBox</see>.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.AutoCheckChildrenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.AutoCheckChildren" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.AutoCheckChildren">
      <summary>
            Gets or sets a value indicating whether checking a <see cref="T:EO.Wpf.TreeViewItem" /> automatically
            checks all of its children items.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.AutoCheckParentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.AutoCheckParent" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.AutoCheckParent">
      <summary>
            Gets or sets a value indicating whether checking a <see cref="T:EO.Wpf.TreeViewItem" /> automatically
            updates its parent item's <see cref="T:EO.Wpf.CheckState" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.AllowDragItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.AllowDragItem" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.AllowDragItem">
      <summary>
            Gets or sets the default value for <see cref="P:EO.Wpf.TreeViewItem.AllowDragItem">TreeViewItem.AllowDragItem</see>.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.AllowDragCopyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.AllowDragCopy" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.AllowDragCopy">
      <summary>
            Gets or sets the default value for <see cref="P:EO.Wpf.TreeViewItem.AllowDragCopy">TreeViewItem.AllowDragCopy</see>.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.AllowDropItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.AllowDropItem" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.AllowDropItem">
      <summary>
            Gets or sets a value indicating whether to allow user to drop an item into this <see cref="T:EO.Wpf.TreeView" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.AllowDropBetweenItemsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.AllowDropBetweenItems" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.AllowDropBetweenItems">
      <summary>
            Gets or sets a value indicating whether an item should be allowed to drop in between two items.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.DropHighlightBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.DropHighlightBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.DropHighlightBrush">
      <summary>
            Gets or sets the brush used to highlight the drop target.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.AllowEditItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.AllowEditItem" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.AllowEditItem">
      <summary>
            Gets or sets the default value for <see cref="P:EO.Wpf.TreeViewItem.AllowEditItem">TreeViewItem.AllowEditItem</see> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.TextBoxStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.TextBoxStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.TextBoxStyle">
      <summary>
            Gets or sets the styles for the in place editing <see cref="T:System.Windows.Controls.TextBox" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.ItemBorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeView.ItemBorderStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeView.ItemBorderStyle">
      <summary>
            Gets or sets the styles to be applied to the outside <see cref="T:System.Windows.Controls.Border" /> element 
            around a <see cref="T:EO.Wpf.TreeViewItem" />'s text area.
            </summary>
      <remarks>
        <para>
            This property is typically used to customize the style of an <see cref="T:EO.Wpf.TreeViewItem" />
            when the item is selected. The following XAML is the default <see cref="P:EO.Wpf.TreeView.ItemBorderStyle" />:
            </para>
        <code lang="XML">
            &lt;Style TargetType="Border"&gt;
                &lt;Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type my:TreeViewItem}}, Path=Background}"&gt;&lt;/Setter&gt;
                &lt;Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type my:TreeViewItem}}, Path=BorderBrush}"&gt;&lt;/Setter&gt;
                &lt;Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type my:TreeViewItem}}, Path=BorderThickness}"&gt;&lt;/Setter&gt;
                &lt;Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type my:TreeViewItem}}, Path=Padding}"&gt;&lt;/Setter&gt;
                &lt;Style.Triggers&gt;
                    &lt;DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type my:TreeViewItem}}, Path=IsSelected}" Value="True"&gt;
                        &lt;Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/&gt;
                        &lt;Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/&gt;
                    &lt;/DataTrigger&gt;
                    &lt;MultiDataTrigger&gt;
                        &lt;MultiDataTrigger.Conditions&gt;
                            &lt;Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type my:TreeViewItem}}, Path=IsSelected}" Value="True"&gt;&lt;/Condition&gt;
                            &lt;Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type my:TreeViewItem}}, Path=IsSelectionActive}" Value="False"&gt;&lt;/Condition&gt;
                        &lt;/MultiDataTrigger.Conditions&gt;
                        &lt;Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/&gt;
                        &lt;Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/&gt;
                    &lt;/MultiDataTrigger&gt;
                &lt;/Style.Triggers&gt;
            &lt;/Style&gt;
            </code>
        <para>
            The above style applies different background and foreground color based on the values of the <see cref="T:EO.Wpf.TreeViewItem" />'s
            <see cref="P:EO.Wpf.TreeViewItem.IsSelected" /> and <see cref="P:EO.Wpf.TreeViewItem.IsSelectionActive" /> property.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.TreeView.ItemBeginDragEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeView.ItemBeginDrag" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.TreeView.ItemBeginDrag">
      <summary>
            Occurs when drag drop begins on a <see cref="T:EO.Wpf.TreeViewItem" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.ItemDragOverEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeView.ItemDragOver" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.TreeView.ItemDragOver">
      <summary>
            Occurs when an item drags over a <see cref="T:EO.Wpf.TreeViewItem" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeView.ItemDropEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeView.ItemDrop" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.TreeView.ItemDrop">
      <summary>
            Occurs when user drops an item over the <see cref="T:EO.Wpf.TreeView" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.TreeView.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.TreeView" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.TreeView.HighlightDropTarget(EO.Wpf.ItemDragOverEventArgs,System.Boolean)">
      <summary>
            Highlight the drop target.
            </summary>
      <param name="e">Event data for <see cref="E:EO.Wpf.TreeView.ItemDragOver" /> event.</param>
      <param name="allowDropBetweenItems">Whether to allow dropping an item in between two items.</param>
      <remarks>
            Use this method to highlight the drop target if you do wish to override
            the default handling of the <see cref="E:EO.Wpf.TreeView.ItemDragOver" /> event.
            </remarks>
    </member>
    <member name="T:EO.Wpf.Menu">
      <summary>
            Represents a Windows menu control that enables you to hierarchically organize elements associated with commands and event handlers. 
            </summary>
    </member>
    <member name="F:EO.Wpf.Menu.IsMainMenuProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Menu.IsMainMenu" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Menu.IsMainMenu">
      <summary>
            Gets or sets a value that indicates whether this Menu receives a main menu activation notification. This is a dependency property. 
            </summary>
      <remarks>
            If there are multiple <see cref="T:EO.Wpf.Menu" /> controls on a page, Menu controls that should not receive ALT or F10 key notifications should set this property to false.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Menu.IsDropDownMenuProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Menu.IsDropDownMenu" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Menu.IsDropDownMenu">
      <summary>
            Gets or sets a value indicating whether this menu is a drop down menu.
            </summary>
      <remarks>
            A drop down menu is basically a vertical menu. However a drop down menu
            displays top level items using the same style as sub menu items.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Menu.SpacerPositionProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Menu.SpacerPosition" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Menu.SpacerPosition">
      <summary>
            Gets or sets the position of the spacer item.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/spacer.html">spacer item</a> for more details about this feature.
            </remarks>
    </member>
    <member name="F:EO.Wpf.Menu.SpacerTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Menu.SpacerTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Menu.SpacerTemplate">
      <summary>
            Gets or sets the spacer item template.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/spacer.html">spacer item</a> for more details about this feature.
            </remarks>
    </member>
    <member name="M:EO.Wpf.Menu.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.Menu" /> control.
            </summary>
    </member>
    <member name="T:EO.Wpf.MenuBase">
      <summary>
            Defines the base class for <see cref="T:EO.Wpf.Menu" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuBase.TopLevelHeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.TopLevelHeaderTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.TopLevelHeaderTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> for top level items that
            has child items.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/item_template.html">here</a> for more information
            about how to use custom template.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.TopLevelItemTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.TopLevelItemTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.TopLevelItemTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> for top level items that
            does not have child items.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/item_template.html">here</a> for more information
            about how to use custom template.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.SubmenuHeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.SubmenuHeaderTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.SubmenuHeaderTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> for sub menu items that
            have child items.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/item_template.html">here</a> for more information
            about how to use custom template.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.SubmenuItemTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.SubmenuItemTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.SubmenuItemTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> for sub menu items that
            do not have child items.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/item_template.html">here</a> for more information
            about how to use custom template.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.SubmenuTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.SubmenuTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.SubmenuTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> for the sub menu frame.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/item_template.html">here</a> for more information
            about how to use custom template.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.SubmenuColumnTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.SubmenuColumnTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.SubmenuColumnTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> for the sub menu column.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/item_template.html">here</a> for more information
            about how to use custom template.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.SubmenuColumnDividerTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.SubmenuColumnDividerTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.SubmenuColumnDividerTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> for the sub menu column divider.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/item_template.html">here</a> for more information
            about how to use custom template.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.SeparatorTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.SeparatorTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.SeparatorTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> for separator items.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/item_template.html">here</a> for more information
            about how to use custom template.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.SubMenuIndicatorTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.SubMenuIndicatorTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.SubMenuIndicatorTemplate">
      <summary>
            Gets or sets the sub menu indicator template.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/Menu/submenu_indicator.html">here</a> for more information about this property.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.OrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.Orientation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.Orientation">
      <summary>
            Gets or sets the orientation of the menu.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuBase.ExpandEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.ExpandEffect" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.ExpandEffect">
      <summary>
            Gets or sets the effect played when the sub menu opens.
            </summary>
      <remarks>
            This property sets the default expand effect for all <see cref="T:EO.Wpf.MenuItem" />. A <see cref="T:EO.Wpf.MenuItem" />
            can overrides this value by setting <see cref="P:EO.Wpf.MenuItem.ExpandEffect">MenuItem.ExpandEffect</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.CollapseEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.CollapseEffect" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.CollapseEffect">
      <summary>
            Gets or sets the effect played when the sub menu closes.
            </summary>
      <remarks>
            This property sets the default collapse effect for all <see cref="T:EO.Wpf.MenuItem" />. A <see cref="T:EO.Wpf.MenuItem" />
            can overrides this value by setting <see cref="P:EO.Wpf.MenuItem.CollapseEffect">MenuItem.CollapseEffect</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.ExpandDelayProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.ExpandDelay" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.ExpandDelay">
      <summary>
            Gets or sets the expand delay in millisecond.
            </summary>
      <remarks>
        <para>
            Use this property to specify the amount of time (in milliseconds) between
            mouse is positioned over a menu item and the sub menu expands. The default
            value is 0. 
            </para>
        <para>
            This property is ignored if <see cref="P:EO.Wpf.MenuBase.SubItemExpandOnClick" /> is set to
            <b>true</b>.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.CollapseDelayProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.CollapseDelay" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.CollapseDelay">
      <summary>
            Use this property to specify the amount of time (in milliseconds) between
            user moving mouse out of a sub menu and the sub menu close.
            </summary>
      <remarks>
            The default value is 300. So the sub menu closes shortly after the mouse
            has left the sub menu. Setting this value to 0 to disable this behavior.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuBase.TopLevelItemExpandOnClickProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.TopLevelItemExpandOnClick" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.TopLevelItemExpandOnClick">
      <summary>
            Gets or sets a value indicating whether a top level menu item should expand when
            user clicks the item or when user moves mouse over the item.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuBase.SubItemExpandOnClickProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuBase.SubItemExpandOnClick" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuBase.SubItemExpandOnClick">
      <summary>
            Gets or sets a value indicating whether a sub menu item should expand when
            user clicks the item or when user moves mouse over the item.
            </summary>
    </member>
    <member name="T:EO.Wpf.MenuItem">
      <summary>
            Represents a menu item displayed in the <see cref="T:EO.Wpf.Menu" /> control.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.SeparatorTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.SeparatorTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.SeparatorTemplate">
      <summary>
            Gets or sets the separator template.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.MenuBase.SeparatorTemplate">MenuBase.SeparatorTemplate</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.TopLevelHeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.TopLevelHeaderTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.TopLevelHeaderTemplate">
      <summary>
            Gets or sets the top level header item template.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.MenuBase.TopLevelHeaderTemplate">MenuBase.TopLevelHeaderTemplate</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.TopLevelItemTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.TopLevelItemTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.TopLevelItemTemplate">
      <summary>
            Gets or sets the top level item template.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.MenuBase.TopLevelItemTemplate">MenuBase.TopLevelItemTemplate</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.SubmenuHeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.SubmenuHeaderTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.SubmenuHeaderTemplate">
      <summary>
            Gets or sets the sub menu header template.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.MenuBase.SubmenuHeaderTemplate">MenuBase.SubmenuHeaderTemplate</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.SubmenuItemTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.SubmenuItemTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.SubmenuItemTemplate">
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.MenuBase.SubmenuItemTemplate">MenuBase.SubmenuItemTemplate</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.SubItemExpandOnClickProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.SubItemExpandOnClick" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.SubItemExpandOnClick">
      <summary>
            Gets or sets a value indicating whether a sub menu item should expand when
            user clicks the item or when user moves mouse over the item.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.MenuBase.SubItemExpandOnClick">MenuBase.SubItemExpandOnClick</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.ExpandDelayProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.ExpandDelay" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.ExpandDelay">
      <summary>
            Gets or sets the expand delay in millisecond.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.MenuBase.ExpandDelay">MenuBase.ExpandDelay</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.CollapseDelayProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.CollapseDelay" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.CollapseDelay">
      <summary>
            Use this property to specify the amount of time (in milliseconds) between
            user moving mouse out of a sub menu and the sub menu close.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.MenuBase.CollapseDelay">MenuBase.CollapseDelay</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.CommandParameterProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.CommandParameter" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.CommandParameter">
      <summary>
            Gets or sets the parameter to pass to the Command property of a MenuItem.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.CommandProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.Command" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.Command">
      <summary>
            Gets or sets the command associated with the menu item.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.CommandTargetProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.CommandTarget" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.CommandTarget">
      <summary>
            Gets or sets the target element on which to raise the specified command.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.IconProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.Icon" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.Icon">
      <summary>
            Gets or sets the icon that appears in a <see cref="T:EO.Wpf.MenuItem" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.IconTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.IconTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.IconTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used for the menu item icon.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.IsSeparatorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.IsSeparator" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.IsSeparator">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EO.Wpf.MenuItem" /> is a separator.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.ColumnCountProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.ColumnCount" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.ColumnCount">
      <summary>
            Gets or sets the number of columns for the sub menu of this menu item.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.InputGestureTextProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.InputGestureText" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.InputGestureText">
      <summary>
            Sets the text describing an input gesture that will call the command tied to the specified item.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.IsCheckableProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.IsCheckable" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.IsCheckable">
      <summary>
            Gets a value that indicates whether a MenuItem can be checked.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.IsCheckedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.IsChecked" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.IsChecked">
      <summary>
            Gets or sets a value that indicates whether the MenuItem is checked.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.CheckGroupProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.CheckGroup" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.CheckGroup">
      <summary>
            Gets or sets the check group for this item.
            </summary>
      <remarks>
        <para>
            When multiple sibling menu items have the same <see cref="P:EO.Wpf.MenuItem.CheckGroup" /> value,
            only one menu item can be checked in these items. This results in the following
            behavior when <see cref="P:EO.Wpf.MenuItem.CheckGroup" /> is set:
            
            
            </para>
        <list type="bullet">
          <item>
                    Checking one item automatically uncheck any other items that are already 
                    checked in the same group;
                </item>
          <item>
                    If an item is already checked, clicking it again does not automatically
                    uncheck it;
                </item>
        </list>
      </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.IsHighlightedPropertyKey">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.IsHighlighted" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.IsHighlighted">
      <summary>
            Gets a value that indicates whether a MenuItem is highlighted.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.IsPressedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.IsPressed" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.IsPressed">
      <summary>
            Gets a value that indicates whether a MenuItem is pressed.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.IsSubmenuOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.IsSubmenuOpen" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.IsSubmenuOpen">
      <summary>
            Gets or sets a value that indicates whether the submenu of the <see cref="T:EO.Wpf.MenuItem" /> is open.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.RoleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.Role" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.Role">
      <summary>
            Gets a value that indicates the role of a <see cref="T:EO.Wpf.MenuItem" />.
            </summary>
      <remarks>
            The following table lists all possible values:
            <list type="table"><listheader><term>Value</term><description>Remark</description></listheader><item><term>TopLevelItem</term><description>
                    Top level item that does not have any sub items.
                </description></item><item><term>TopLevelHeader</term><description>
                    Top level item that does have sub items.
                </description></item><item><term>SubmenuItem</term><description>
                    Child item that does not have any sub items.
                </description></item><item><term>SubmenuHeader</term><description>
                    Child item that does have sub items.
                </description></item><item><term>Separator</term><description>
                    Separator item.
                </description></item></list></remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.StaysOpenOnClickProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.StaysOpenOnClick" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.StaysOpenOnClick">
      <summary>
            Gets or sets a value that indicates that the submenu in which this <see cref="T:EO.Wpf.MenuItem" /> is located should not close when this item is clicked.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.ExpandEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.ExpandEffect" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.ExpandEffect">
      <summary>
            Gets or sets the effect played when the sub menu opens.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.MenuBase.ExpandEffect">MenuBase.ExpandEffect</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.CollapseEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.CollapseEffect" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.CollapseEffect">
      <summary>
            Gets or sets the effect played when the sub menu closes.
            </summary>
      <remarks>
            This property is bound to <see cref="P:EO.Wpf.MenuBase.CollapseEffect">MenuBase.CollapseEffect</see>.
            </remarks>
    </member>
    <member name="F:EO.Wpf.MenuItem.SubmenuOrientationProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.MenuItem.SubmenuOrientation" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.SubmenuOrientation">
      <summary>
            Gets or sets the orientation of the sub menu.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.ClickEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.MenuItem.Click" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.MenuItem.Click">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.MenuItem" /> is clicked.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.CheckedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.MenuItem.Checked" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.MenuItem.Checked">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.MenuItem" /> is checked.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.UncheckedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.MenuItem.Unchecked" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.MenuItem.Unchecked">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.MenuItem" /> is unchecked.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.SubmenuClosedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.MenuItem.SubmenuClosed" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.MenuItem.SubmenuClosed">
      <summary>
            Occurs when <see cref="P:EO.Wpf.MenuItem.IsSubmenuOpen" /> changes to <b>false</b>.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItem.SubmenuOpenedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.MenuItem.SubmenuOpened" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.MenuItem.SubmenuOpened">
      <summary>
            Occurs when <see cref="P:EO.Wpf.MenuItem.IsSubmenuOpen" /> changes to <b>true</b>.
            </summary>
    </member>
    <member name="P:EO.Wpf.MenuItem.Level">
      <summary>
            Gets the level of this menu item.
            </summary>
      <remarks>
            Root level tree view items are level 0. Their childrens are level 1, their childrens'
            children are level 2, and so on.
            </remarks>
    </member>
    <member name="M:EO.Wpf.MenuItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.MenuItem" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.MenuItemRole">
      <summary>
            Defines the different roles that a <see cref="T:EO.Wpf.MenuItem" /> can have. 
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItemRole.TopLevelItem">
      <summary>
            A top level menu item that does not have any child items.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItemRole.TopLevelHeader">
      <summary>
            A top level menu item that has child items.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItemRole.SubmenuItem">
      <summary>
            A sub menu item that does not have any child items.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItemRole.SubmenuHeader">
      <summary>
            A sub menu item that has child items.
            </summary>
    </member>
    <member name="F:EO.Wpf.MenuItemRole.Separator">
      <summary>
            A separator item.
            </summary>
    </member>
    <member name="T:EO.Wpf.TabItem">
      <summary>
            Represents a selectable item inside a <see cref="T:EO.Wpf.TabControl" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabItem.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabItem.IsSelected" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabItem.TabStripPlacementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabItem.TabStripPlacement" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabItem.HeaderStringProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabItem.HeaderString" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabItem.MenuItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabItem.MenuItem" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.TabItem.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.TabControl" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabItem.IsSelected">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:EO.Wpf.TabItem" /> is
            selected. This is a depdency property.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:EO.Wpf.TabItem" /> is selected; otherwise 
            <c>false</c>. The default value is <c>false</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.TabItem.TabStripPlacement">
      <summary>
            Gets the tab strip placement of the parent <see cref="T:EO.Wpf.TabControl" />. This a dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.Controls.Dock" /> enumeration values. The default value
            is <see cref="F:System.Windows.Controls.Dock.Top" />.
            </value>
    </member>
    <member name="P:EO.Wpf.TabItem.HeaderString">
      <summary>
            Gets or sets a string value that represents this 
            <see cref="T:EO.Wpf.TabItem" />'s corresponding <see cref="T:EO.Wpf.MenuItem" />'s 
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" /> in the dropdown menu.
            This is a dependency property.
            </summary>
      <value>The default value is <c>null</c>.</value>
      <remarks>
        <para>
            EO.Wpf <see cref="T:EO.Wpf.TabControl" /> can display a drop down menu that
            contains a menu item for each tab item. User can select
            a menu item from this drop down menu to select the corresponding
            tab item.
            By default, if no value is given to <b>HeaderString</b>, the
            <see cref="T:EO.Wpf.TabControl" /> scans the header content/template for any 
            <see cref="T:System.Windows.Controls.TextBlock" /> visual element, and build a string value based on
            the <see cref="T:System.Windows.Controls.TextBlock" />'s <see cref="P:System.Windows.Controls.TextBlock.Text" /> property,
            then use this string for the menu item text.
            The shortcoming of this approach is that if there is no 
            <see cref="T:System.Windows.Controls.TextBlock" /> element in the header content/template,
            then the result value will be an empty string.
            </para>
        <para>
            Assigning a value to the <b>HeaderString</b> property ensures that
            this <see cref="T:EO.Wpf.TabItem" /> is properly represented in the dropdown
            menu.</para>
      </remarks>
      <example>
        <para>
            The following example demonstrates how this property is used:
            </para>
        <code lang="XML" title="XAML">
            &lt;Window x:Class="Test.MainWindow"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:eo="http://schemas.essentialobjects.com/wpf/"
                    Title="MainWindow" 
                    Height="350" 
                    Width="525"&gt;
                &lt;Grid&gt;
                    &lt;eo:TabControl x:Name="TabControl" DropDownMenuMode="Always"&gt;
                        &lt;eo:TabItem HeaderString="Red"&gt;
                            &lt;eo:TabItem.Header&gt;
                                &lt;Rectangle Fill="Red" Margin="2" Width="50" Height="20" /&gt;
                            &lt;/eo:TabItem.Header&gt;
                        &lt;/eo:TabItem&gt;
                        &lt;eo:TabItem HeaderString="Green"&gt;
                            &lt;eo:TabItem.Header&gt;
                                &lt;Rectangle Fill="Green" Margin="2" Width="50" Height="20" /&gt;
                            &lt;/eo:TabItem.Header&gt;
                        &lt;/eo:TabItem&gt;
                        &lt;eo:TabItem HeaderString="Blue"&gt;
                            &lt;eo:TabItem.Header&gt;
                                &lt;Rectangle Fill="Blue" Margin="2" Width="50" Height="20" /&gt;
                            &lt;/eo:TabItem.Header&gt;
                        &lt;/eo:TabItem&gt;
                    &lt;/eo:TabControl&gt;
                &lt;/Grid&gt;
            &lt;/Window&gt;
            </code>
        <para>
            The following image shows the result:
            </para>
        <para>
          <img src="Wpf/Controls/TabControl/tabcontrol3.gif">
          </img>
        </para>
      </example>
    </member>
    <member name="T:EO.Wpf.TabItemOverflowStrategy">
      <summary>
            Specifies the strategy a <see cref="T:EO.Wpf.TabControl" /> uses to arrange tab items when tab
            items exceeding one row.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabItemOverflowStrategy.Wrap">
      <summary>
            Wrap the items into multiple row.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabItemOverflowStrategy.Clip">
      <summary>
            Hide the items that can not be fully displayed and displays a drop down button at the end
            of the tab item row. Clicking the drop down button opens a drop down menu that allows user
            to switch tabs.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabItemOverflowStrategy.Scroll">
      <summary>
            Add a scroller at the end of the tab item row. User can use the scroller to scroll the
            tab items towards left or right.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabItemOverflowStrategy.Shrink">
      <summary>
            Automatically shrink the tab items so that they can still fits in one row.
            </summary>
    </member>
    <member name="T:EO.Wpf.DropDownMenuMode">
      <summary>
            Specifies the visibility level of a <see cref="T:EO.Wpf.TabControl" />'s dropdown
            menu button.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownMenuMode.Always">
      <summary>
            The dropdown menu button is visible for all <see cref="T:EO.Wpf.TabControl" />
            overflow strategies.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownMenuMode.Auto">
      <summary>
            The dropdown menu button will only be visible for the required 
            <see cref="T:EO.Wpf.TabControl" /> overflow strategies.
            </summary>
    </member>
    <member name="F:EO.Wpf.DropDownMenuMode.None">
      <summary>
            The dropdown menu is not visible at all.
            </summary>
    </member>
    <member name="T:EO.Wpf.TabItemEventArgs">
      <summary>
            Contains information about an event related to a <see cref="T:EO.Wpf.TabItem" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.TabItemEventArgs.#ctor(EO.Wpf.TabItem)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.TabItemEventArgs" /> class.
            </summary>
      <param name="item">The <see cref="T:EO.Wpf.TabItem" /> object related to this event.</param>
    </member>
    <member name="P:EO.Wpf.TabItemEventArgs.Item">
      <summary>
            Gets the <see cref="T:EO.Wpf.TabItem" /> related to this event.
            </summary>
    </member>
    <member name="T:EO.Wpf.NewItemRequestedEventArgs">
      <summary>
            Provides data for the <see cref="E:EO.Wpf.TabControl.NewItemRequested" /> event.
            </summary>
    </member>
    <member name="P:EO.Wpf.NewItemRequestedEventArgs.DataItem">
      <summary>
            Gets or sets the data item that has been added to the source collection.
            </summary>
    </member>
    <member name="T:EO.Wpf.NewItemRequestedEventHandler">
      <summary>
            Represents the method that handles the 
            <see cref="E:EO.Wpf.TabControl.NewItemRequested" /> event of a 
            <see cref="T:EO.Wpf.TabControl" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:EO.Wpf.TabItemEventHandler">
      <summary>
            Represents the method that will handle various events related to 
            <see cref="T:EO.Wpf.TabItem" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:EO.Wpf.TabItemCloseEventHandler">
      <summary>
            Represents the method that handles the 
            <see cref="E:EO.Wpf.TabControl.PreviewItemClose" /> and <see cref="E:EO.Wpf.TabControl.ItemClose" /> event of a 
            <see cref="T:EO.Wpf.TabControl" />.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:EO.Wpf.TabItemCloseEventArgs">
      <summary>
            Provides data for the <see cref="E:EO.Wpf.TabControl.PreviewItemClose" /> and <see cref="E:EO.Wpf.TabControl.ItemClose" /> event.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabItemCloseEventArgs.ItemIndex">
      <summary>
            Gets the index of the item that was closed.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabItemCloseEventArgs.Canceled">
      <summary>
            Gets or sets a value indicating whether the operation should be
            canceled, as a result the <see cref="T:EO.Wpf.TabItem" /> will not be closed.
            </summary>
      <remarks>
            This property is only used by <see cref="E:EO.Wpf.TabControl.PreviewItemClose" /> event.
            </remarks>
    </member>
    <member name="T:EO.Wpf.TabControl">
      <summary>
            Represents a control that contains multiple items that share the same space on the screen.
            </summary>
      <remarks>
        <para>
            EO.Wpf TabControl offers all the functionalities of the built-in WPF TabControl with the following
            enhancements:
            </para>
        <list type="bullet">
          <item>Dynamic theme support;</item>
          <item>Multiple built-in tab item styles;</item>
          <item>Scrolling tab buttons;</item>
          <item>Overlapping tab items;</item>
          <item>Closable tab items;</item>
          <item>New tab buttons;</item>
          <item>Tab selection menu;</item>
        </list>
      </remarks>
    </member>
    <member name="F:EO.Wpf.TabControl.ContentStringFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.ContentStringFormat" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.ContentTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.ContentTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.FixedContentTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.FixedContentTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.ContentTemplateSelectorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.ContentTemplateSelector" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.SelectedContentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.SelectedContent" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.SelectedContentStringFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.SelectedContentStringFormat" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.SelectedContentTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.SelectedContentTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.SelectedContentTemplateSelectorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.SelectedContentTemplateSelector" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.TabStripPlacementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.TabStripPlacement" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.TabItemOverflowStrategyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.TabItemOverflowStrategy" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.ShowNewTabButtonProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.ShowNewTabButton" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.NewTabButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.NewTabButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.ShowCloseTabButtonProperty">
      <summary>
            Identifies <see cref="P:EO.Wpf.TabControl.ShowCloseTabButton" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.CloseTabButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.CloseTabButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.OverlapDepthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.OverlapDepth" /> property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.ItemsDropDownButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.ItemsDropDownButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.DropDownMenuModeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.DropDownMenuMode" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.HeaderTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.HeaderElementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.HeaderElement" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.AutoRotateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.AutoRotate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.TopLeftScrollButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.TopLeftScrollButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.BottomRightScrollButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.BottomRightScrollButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.CornerRadius" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.HeaderPaddingProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TabControl.HeaderPadding" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.PreviewItemCloseEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TabControl.PreviewItemClose" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.ItemCloseEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TabControl.ItemClose" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.NewItemAddedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TabControl.NewItemAdded" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.NewItemRequestedEvent">
      <summary>
            NewItemRequested Routed Event
            </summary>
    </member>
    <member name="F:EO.Wpf.TabControl.NewTabItemCommand">
      <summary>
            The command that adds a new <see cref="T:EO.Wpf.TabItem" /> to the <see cref="T:EO.Wpf.TabControl" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.TabControl.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.TabControl" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.ContentStringFormat">
      <summary>
            Gets or sets a composite string that specifies how to format the
            contents of the <see cref="T:EO.Wpf.TabItem" /> objects if they are displayed
            as strings. This is a dependency property.
            </summary>
      <value>
            The default value is <c>null</c>.
            </value>
    </member>
    <member name="P:EO.Wpf.TabControl.ContentTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> to apply to any 
            <see cref="T:EO.Wpf.TabItem" /> that does not have a 
            <see cref="P:EO.Wpf.TabControl.ContentTemplate" /> or 
            <see cref="P:EO.Wpf.TabControl.ContentTemplateSelector" /> property defined. This is a
            dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.ContentTemplateSelector">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Controls.DataTemplateSelector" /> that provides
            custom logic for choosing the template that is  used to display the
            content of the control. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.FixedContentTemplate">
      <summary>
            Gets or sets a fixed <see cref="T:System.Windows.DataTemplate" /> to be applied to all
            tab items content.
            </summary>
      <remarks>
            When this property is set, the <see cref="T:EO.Wpf.TabControl" /> creates a single
            instance of the <see cref="P:EO.Wpf.TabControl.FixedContentTemplate" /> and does not switch
            or update it when user switches tab items. If you wish to display different
            contents using this property, you must handle the <see cref="T:EO.Wpf.TabControl" />'s
            <see cref="E:System.Windows.Controls.Primitives.Selector.SelectionChanged" /> event and then update the contents in this
            template.
            
            </remarks>
    </member>
    <member name="P:EO.Wpf.TabControl.SelectedContent">
      <summary>
            Gets the content of the currently selected <see cref="T:EO.Wpf.TabItem" />.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.SelectedContentStringFormat">
      <summary>
            Gets a composite string that specifies how to format the content of
            the currently  selected <see cref="T:EO.Wpf.TabItem" /> if it is displayed as
            a string. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.SelectedContentTemplate">
      <summary>
            Gets the <see cref="T:System.Windows.DataTemplate" /> of the currently selected item.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.SelectedContentTemplateSelector">
      <summary>
            Gets the <see cref="T:System.Windows.Controls.DataTemplateSelector" /> of the currently
            selected item. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.TabStripPlacement">
      <summary>
            Gets or sets how tab headers align relative to the tab content. This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:System.Windows.Controls.Dock" /> enumeration values. The default value is <see cref="F:System.Windows.Controls.Dock.Top" />.
            </value>
    </member>
    <member name="P:EO.Wpf.TabControl.HeaderTemplate">
      <summary>
            Gets or sets the HeaderTemplate property. This is a dependency
            property.
            </summary>
      <value>The default value is <b>null</b>.</value>
      <remarks>
        <para>
            The <see cref="P:EO.Wpf.TabControl.HeaderTemplate" /> property represents a shortcut for
            not individually defining the 
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" /> of each 
            <see cref="T:EO.Wpf.TabItem" /> contained in this <see cref="T:EO.Wpf.TabControl" />
            instance. 
            </para>
        <para>
            The following example uses an array of color strings as
            the items source of the <see cref="T:EO.Wpf.TabControl" />, and then the <b>
            HeaderTemplate</b> property is used to provide a common template
            with color preview at the header.
            <code lang="XML" title="XAML">
            &lt;Window x:Class="Test.MainWindow"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:eo="http://schemas.essentialobjects.com/wpf/"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    Title="MainWindow" Height="350" Width="450"&gt;
                &lt;Grid&gt;
                    &lt;Grid.Resources&gt;
                        &lt;x:Array x:Key="Themes" Type="sys:String"&gt;
                            &lt;sys:String&gt;Blue&lt;/sys:String&gt;
                            &lt;sys:String&gt;Green&lt;/sys:String&gt;
                            &lt;sys:String&gt;Silver&lt;/sys:String&gt;
                        &lt;/x:Array&gt;
                    &lt;/Grid.Resources&gt;
            
                    &lt;eo:TabControl ItemsSource="{StaticResource Themes}"&gt;
                        &lt;eo:TabControl.HeaderTemplate&gt;
                            &lt;DataTemplate&gt;
                                &lt;StackPanel Orientation="Horizontal"&gt;
                                    &lt;Rectangle Width="22" Height="22" Fill="{Binding}" Margin="0,0,6,0" /&gt;
                                    &lt;Label Content="{Binding}" ContentStringFormat="{}{0} Theme" VerticalAlignment="Center" /&gt;
                                &lt;/StackPanel&gt;
                            &lt;/DataTemplate&gt;
                        &lt;/eo:TabControl.HeaderTemplate&gt;
                    &lt;/eo:TabControl&gt;
                &lt;/Grid&gt;
            &lt;/Window&gt;
            </code><para>
            The following image shows the result:
            <para><img src="Wpf/Controls/TabControl/tabcontrol14.gif"></img></para></para></para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.TabControl.HeaderElement">
      <summary>
            Returns the <see cref="T:System.Windows.UIElement" /> that holds the header of the <see cref="T:EO.Wpf.TabControl" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.TabItemOverflowStrategy">
      <summary>
            Gets or sets the strategy to use when tab items can not fit into a
            single row. This is a dependency property.
            </summary>
      <value>
            One of the <see cref="T:EO.Wpf.TabItemOverflowStrategy" /> enumeration
            values. The default value is 
            <see cref="F:EO.Wpf.TabItemOverflowStrategy.Wrap" />.
            </value>
      <remarks>
        <para>
            See <a href="Wpf/Controls/TabControl/overflow.html">here</a> for more information
            on how to use this property.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.TabControl.DropDownMenuMode">
      <summary>
            Gets or sets the visibility mode of the <see cref="T:EO.Wpf.TabControl" />'s
            drop down menu. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.NewTabButtonStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> for the new tab button. This is
            a dependency property.
            </summary>
      <remarks>
        <para>
            When <see cref="P:EO.Wpf.TabControl.ShowNewTabButton" /> is set to true, the 
            <see cref="T:EO.Wpf.TabControl" /> displays an additional button of type 
            <see cref="T:EO.Wpf.BareButton" /> next to the last tab item. Clicking that
            button triggers the
            <see cref="E:EO.Wpf.TabControl.NewItemAdded" /> event if the <see cref="T:EO.Wpf.TabControl" />
            Items collection is being populated explicitly, or the 
            <see cref="E:EO.Wpf.TabControl.NewItemRequested" /> event if 
            <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> is used instead.
            </para>
        <para>
            See <a href="Wpf/Controls/TabControl/close_new_button.html">here</a> for more information
            on how to use this property.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.TabControl.ShowNewTabButton">
      <summary>
            Gets or sets a value indicating whether to display a button next to
            the last tab item that allows user to add new tab items. This is a
            dependency property.
            </summary>
      <value>
        <c>true</c> to show the new tab button next to the last 
            <see cref="T:EO.Wpf.TabItem" />; otherwise <c>false</c>. The default value is 
            <c>false</c>.
            </value>
      <remarks>
        <para>
            Note that the new tab button can be styled via the 
            <see cref="P:EO.Wpf.TabControl.NewTabButtonStyle" /> property.
            </para>
        <para>
            See <a href="Wpf/Controls/TabControl/close_new_button.html">here</a> for more information
            on how to use this property.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.TabControl.ShowCloseTabButton">
      <summary>
            Gets or sets a value indicating whether to display a close button on
            each tab item. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to show a close button on each tab item; otherwise 
            <c>false</c>. The default value is <c>false</c>.
            </value>
      <remarks>
        <para>
            The <see cref="T:EO.Wpf.TabItem" />'s close button can be styled via 
            <see cref="P:EO.Wpf.TabControl.CloseTabButtonStyle" /> property.
            </para>
        <para>
            See <a href="Wpf/Controls/TabControl/close_new_button.html">here</a> for more information
            on how to use this property.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.TabControl.CloseTabButtonStyle">
      <summary>
            Gets or sets the style applied to <see cref="T:EO.Wpf.TabItem" />'s close button. This is a dependency property.
            </summary>
      <remarks>
        <para>
          <see cref="P:EO.Wpf.TabControl.ShowCloseTabButton" /> must be set to true in order to display the close button.
            The target type for this style is <see cref="T:EO.Wpf.BareButton" />.
            </para>
        <para>
            See <a href="Wpf/Controls/TabControl/close_new_button.html">here</a> for more information
            on how to use this property.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.TabControl.OverlapDepth">
      <summary>
            Gets or sets the overlap depth. This is a dependency property.
            </summary>
      <value>
            A <see cref="T:System.Double" /> value that represents the space in pixels
            that a <see cref="T:EO.Wpf.TabItem" /> will overlap with it on its adjascent 
            <see cref="T:EO.Wpf.TabItem" />. The default value is <b>0</b>.
            </value>
      <remarks>
        <para>
            This property is usually used when the tab button is not rectangle. For example,
            the built-in "Chrome" skin uses this property so that the tab button overlaps
            with each other. 
            </para>
        <para>
            Note that in case a negative value is given, it will be coerced to 
            <b>0</b>.
            </para>
      </remarks>
      <example>
        <para>
            The following example sets the OverlapDepth to 5:
            </para>
        <code lang="XML" title="XAML">
            &lt;Window x:Class="Test.MainWindow"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:eo="http://schemas.essentialobjects.com/wpf/"
                    Title="MainWindow" Height="250" Width="350"&gt;
                &lt;DockPanel Margin="5"&gt;
                    &lt;eo:TabControl eo:ThemeManager.SkinName="Chrome" OverlapDepth="5"&gt;
                        &lt;eo:TabItem Header="Header1" /&gt;
                        &lt;eo:TabItem Header="Header2" /&gt;
                        &lt;eo:TabItem Header="Header3" /&gt;
                        &lt;eo:TabItem Header="Header4" /&gt;
                    &lt;/eo:TabControl&gt;
                &lt;/DockPanel&gt;
            &lt;/Window&gt;
            </code>
        <para>
            The following image shows the result:
            <para><img src="Wpf/Controls/TabControl/tabcontrol15.gif"></img></para></para>
      </example>
    </member>
    <member name="P:EO.Wpf.TabControl.TopLeftScrollButtonStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the scroll button used to
            scroll left or top. This is a dependency property.
            </summary>
      <remarks>
        <para>
            Note that this property is only used when
            <see cref="P:EO.Wpf.TabControl.TabItemOverflowStrategy" /> is set to
            <see cref="F:EO.Wpf.TabItemOverflowStrategy.Scroll" />.
            The target type for this style is <see cref="T:System.Windows.Controls.Primitives.RepeatButton" />.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.TabControl.BottomRightScrollButtonStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the scroll button
            used to scroll right or bottom. This is a dependency property.
            </summary>
      <remarks>
        <para>
            Note that this property is only used when 
            <see cref="P:EO.Wpf.TabControl.TabItemOverflowStrategy" /> is set to 
            <see cref="F:EO.Wpf.TabItemOverflowStrategy.Scroll" />.
            The target type for this style is <see cref="T:System.Windows.Controls.Primitives.RepeatButton" />.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.TabControl.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the tab contents area are rounded.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.HeaderPadding">
      <summary>
            Gets or sets the padding value for the header section.
            </summary>
    </member>
    <member name="P:EO.Wpf.TabControl.AutoRotate">
      <summary>
            Gets or sets a value that indicates whether the items header is
            auto-rotated or not. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to auto-rotate the tabItem header; otherwise 
            <c>false</c>. The default value is <c>false</c>.
            </value>
      <remarks>
        <para>
            Note that the TabItem's <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            is only rotated via XAML in the default style once the following
            conditions are met:
            <list type="bullet"><item>The <see cref="P:EO.Wpf.TabControl.AutoRotate" /> property is set to true.
                </item><item>The <see cref="P:EO.Wpf.TabControl.TabStripPlacement" /> property is set to
                either <see cref="F:System.Windows.Controls.Dock.Left" /> or <see cref="F:System.Windows.Controls.Dock.Right" />.
                </item></list></para>
      </remarks>
      <example>
        <para>The following example illustrates the effect of using this
            property:
            </para>
        <code lang="XML" title="XAML">
            &lt;Window x:Class="EO.Demos.MainWindow"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:eo="http://schemas.essentialobjects.com/wpf/"
                    Title="TabControl Development" 
                    Height="200" 
                    Width="400"&gt;
                &lt;Grid&gt;
                    &lt;eo:TabControl AutoRotate="True" TabStripPlacement="Left"&gt;
                        &lt;eo:TabItem Header="Header 1"&gt;&lt;/eo:TabItem&gt;
                        &lt;eo:TabItem Header="Header 2"&gt;&lt;/eo:TabItem&gt;
                    &lt;/eo:TabControl&gt;
                &lt;/Grid&gt;
            &lt;/Window&gt;
            </code>
        <para>
            The following image shows the result:
            </para>
        <para>
          <img src="Wpf/Controls/TabControl/tabcontrol2.gif">
          </img>
        </para>
        <para>
            If <see cref="P:EO.Wpf.TabControl.AutoRotate" /> was not set to <b>true</b>, the the tab item headers
            "Header 1" and "Header 2" would be horizontal.
            </para>
      </example>
    </member>
    <member name="P:EO.Wpf.TabControl.ItemsDropDownButtonStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the 
            <see cref="T:EO.Wpf.DropDownButton" /> used to display the list of available
            tab items. This is a dependency property.
            </summary>
    </member>
    <member name="E:EO.Wpf.TabControl.NewItemAdded">
      <summary>
            Occurs after user clicking the new item button causing a new item to be added.
            </summary>
      <remarks>
        <para>
            This event is raised only if the <see cref="T:EO.Wpf.TabControl" />'s <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" />
            is not set. In case the <see cref="T:EO.Wpf.TabControl" /> is populated from <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" />,
            <see cref="E:EO.Wpf.TabControl.NewItemRequested" /> event is raised instead. The new item has already
            been created and added into the <see cref="T:EO.Wpf.TabControl" /> when this event is raised.
            </para>
        <para>
            See <a href="Wpf/Controls/TabControl/close_new_button.html">here</a> for more information
            on how to use this event.
            </para>
      </remarks>
    </member>
    <member name="E:EO.Wpf.TabControl.NewItemRequested">
      <summary>
            Occurs after clicking the new item button when the <see cref="T:EO.Wpf.TabControl" />
            is populated from <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" />.
            </summary>
      <remarks>
        <para>
            This event is raised only if the <see cref="T:EO.Wpf.TabControl" />'s <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" />
            is set. In case the <see cref="T:EO.Wpf.TabControl" /> is not populated from <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" />,
            <see cref="E:EO.Wpf.TabControl.NewItemAdded" /> event is raised instead. The new item has not been
            created when this event is raised ---- you must add a new item into your <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" />
            in your event handler if you wish to create a new item.
            </para>
        <para>
            See <a href="Wpf/Controls/TabControl/close_new_button.html">here</a> for more information
            on how to use this event.
            </para>
      </remarks>
    </member>
    <member name="E:EO.Wpf.TabControl.PreviewItemClose">
      <summary>
            Occurs when user clicks the close button to close a tab item.
            </summary>
      <remarks>
            Set the event argument's <see cref="P:EO.Wpf.TabItemCloseEventArgs.Canceled" /> to true to prevent
            the tab item from being deleted.
            </remarks>
    </member>
    <member name="E:EO.Wpf.TabControl.ItemClose">
      <summary>
            Occurs when a tab item has been closed.
            </summary>
    </member>
    <member name="M:EO.Wpf.TabControl.OnPreviewItemClose(EO.Wpf.TabItemCloseEventArgs)">
      <summary>
            Raises the <see cref="E:EO.Wpf.TabControl.PreviewItemClose" /> routed event.
            </summary>
      <param name="e">The <see cref="T:EO.Wpf.TabItemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:EO.Wpf.TabControl.OnItemClose(EO.Wpf.TabItemCloseEventArgs)">
      <summary>
            Raises the <see cref="E:EO.Wpf.TabControl.ItemClose" /> routed event.
            </summary>
      <param name="e">The <see cref="T:EO.Wpf.TabItemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:EO.Wpf.TabControl.OnNewItemAdded(EO.Wpf.TabItemEventArgs)">
      <summary>
            Raises the <see cref="E:EO.Wpf.TabControl.NewItemAdded" /> routed event.
            </summary>
      <param name="e">The <see cref="T:EO.Wpf.TabItemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:EO.Wpf.TabControl.OnNewItemRequested(EO.Wpf.NewItemRequestedEventArgs)">
      <summary>
            Raises the <see cref="E:EO.Wpf.TabControl.NewItemRequested" /> routed event.
            </summary>
      <param name="e">The <see cref="T:EO.Wpf.NewItemRequestedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:EO.Wpf.ListBox">
      <summary>
            Contains a list of selectable items. 
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBox.SelectionModeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.SelectionMode" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.SelectionMode">
      <summary>
            Gets or sets the selection mode of the <see cref="T:EO.Wpf.ListBox" /> control.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBox.SelectedItemsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.SelectedItems" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.SelectedItems">
      <summary>
            Gets the currently selected items. 
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBox.ShowCheckBoxesProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.ShowCheckBoxes" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.ShowCheckBoxes">
      <summary>
            Gets or sets a value indicating whether to display a checkbox for each item in the ListBox.
            </summary>
      <remarks>
            Set this property to <b>true</b> enables multi-selection. See
            <a href="Wpf/Controls/ListBox/multi_select.html">Using Multi-Selection</a> for
            more details about this feature.
            </remarks>
    </member>
    <member name="F:EO.Wpf.ListBox.ShowFooterProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.ShowFooter" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.ShowFooter">
      <summary>
            Gets or sets a value indicating whether to display footer in the listbox.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/ListBox/header_footer.html">ListBox Header and Footer</a> for more details about
            this feature.
            </remarks>
    </member>
    <member name="F:EO.Wpf.ListBox.FooterTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.FooterTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.FooterTemplate">
      <summary>
            Gets or sets the template for the listbox footer.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/ListBox/header_footer.html">ListBox Header and Footer</a> for more details about
            this feature.
            </remarks>
    </member>
    <member name="F:EO.Wpf.ListBox.ShowHeaderProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.ShowHeader" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.ShowHeader">
      <summary>
            Gets or sets a value indicating whether to display header in the ListBox.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/ListBox/header_footer.html">ListBox Header and Footer</a> for more details about
            this feature.
            </remarks>
    </member>
    <member name="F:EO.Wpf.ListBox.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.HeaderTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.HeaderTemplate">
      <summary>
            Gets or sets the template for the listbox header.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/ListBox/header_footer.html">ListBox Header and Footer</a> for more details about
            this feature.
            </remarks>
    </member>
    <member name="F:EO.Wpf.ListBox.AllowDragItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.AllowDragItem" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.AllowDragItem">
      <summary>
            Gets or sets the default value for <see cref="P:EO.Wpf.ListBoxItem.AllowDragItem">ListBoxItem.AllowDragItem</see>.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBox.AllowDragCopyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.AllowDragCopy" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.AllowDragCopy">
      <summary>
            Gets or sets the default value for <see cref="P:EO.Wpf.ListBoxItem.AllowDragCopy">ListBoxItem.AllowDragCopy</see>.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBox.AllowDropItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.AllowDropItem" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.AllowDropItem">
      <summary>
            Gets or sets a value indicating whether to allow user to drop an item into this <see cref="T:EO.Wpf.ListBox" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBox.DropHighlightBrushProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBox.DropHighlightBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBox.DropHighlightBrush">
      <summary>
            Gets or sets the brush used to highlight the drop target.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBox.ItemBeginDragEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.ListBox.ItemBeginDrag" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.ListBox.ItemBeginDrag">
      <summary>
            Occurs when drag drop begins on a <see cref="T:EO.Wpf.TreeViewItem" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBox.ItemDragOverEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.ListBox.ItemDragOver" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.ListBox.ItemDragOver">
      <summary>
            Occurs when an item drags over a <see cref="T:EO.Wpf.TreeViewItem" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBox.ItemDropEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.ListBox.ItemDrop" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.ListBox.ItemDrop">
      <summary>
            Occurs when user drops an item over the <see cref="T:EO.Wpf.TreeView" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.ListBox.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.ListBox" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.ListBox.ScrollIntoView(System.Object)">
      <summary>
            Causes the item to scroll into view.
            </summary>
      <param name="item">Item to scroll.</param>
    </member>
    <member name="M:EO.Wpf.ListBox.SelectAll">
      <summary>
            Select all the items in a <see cref="T:EO.Wpf.ListBox" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.ListBox.UnselectAll">
      <summary>
            Unselect all the items in a <see cref="T:EO.Wpf.ListBox" />.
            </summary>
    </member>
    <member name="T:EO.Wpf.ProgressBar">
      <summary>
            Represents a control that indicates the progress of an operation.
            </summary>
    </member>
    <member name="F:EO.Wpf.ProgressBar.IsPercentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ProgressBar.IsPercent" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ProgressBar.ShowContentProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ProgressBar.ShowContent" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ProgressBar.ContentStringFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ProgressBar.ContentStringFormat" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ProgressBar.ContentTemplateSelectorProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ProgressBar.ContentTemplateSelector" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ProgressBar.ContentPresenterStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ProgressBar.ContentPresenterStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ProgressBar.ContentTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ProgressBar.ContentTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ProgressBar.DisplayValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ProgressBar.DisplayValue" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.ProgressBar.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.ProgressBar" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.ProgressBar.IsPercent">
      <summary>
            Gets or sets a value that indicates whether the 
            <see cref="P:EO.Wpf.ProgressBar.DisplayValue" /> is computed as a percentage. This is a
            dependency property.
            </summary>
      <value>
        <c>true</c> to compute the <see cref="P:EO.Wpf.ProgressBar.DisplayValue" /> as a
            percentage; otherwise, <c>false</c>. The default value is 
            <c>false</c>.
            </value>
      <remarks>
        <para>
            Note that in order to use this property, the 
            <see cref="P:EO.Wpf.ProgressBar.ShowContent" /> property must be set to <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.ProgressBar.ContentTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used to format the
            content of the <see cref="T:EO.Wpf.ProgressBar" />. This is a dependency
            property.
            </summary>
      <value>The default value is <b>null</b>.</value>
      <remarks>
        <para>
            Note that in order to use this property, the 
            <see cref="P:EO.Wpf.ProgressBar.ShowContent" /> property must be set to <c>true</c>.
            </para>
        <para>
            If <see cref="P:EO.Wpf.ProgressBar.ContentStringFormat" /> is not enough to show the
            information required, you can use the <b>ContentTemplate</b> to
            construct rich content inside the <see cref="T:EO.Wpf.ProgressBar" />.
            </para>
        <para>
            In the following example, we are going to construct a simple
            progress bar that shows the number of files downloaded from a
            repository:
            <code lang="XML" title="XAML">
            &lt;eo:ProgressBar x:Name="ProgressBar" 
                            VerticalAlignment="Center" 
                            Height="23" 
                            Minimum="0" 
                            Maximum="200" 
                            Value="135" 
                            ShowContent="True"&gt;
                &lt;eo:ProgressBar.ContentTemplate&gt;
                    &lt;DataTemplate&gt;
                        &lt;StackPanel Orientation="Horizontal"&gt;
                            &lt;TextBlock VerticalAlignment="Center" Text="Downloaded " /&gt;
                            &lt;TextBlock VerticalAlignment="Center" 
                                       Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=eo:ProgressBar}, Path=DisplayValue}" /&gt;
                            &lt;TextBlock VerticalAlignment="Center" 
                                       Text=" files out of " /&gt;
                            &lt;TextBlock VerticalAlignment="Center" 
                                       Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=eo:ProgressBar}, Path=Maximum}" /&gt;
                        &lt;/StackPanel&gt;
                    &lt;/DataTemplate&gt;
                &lt;/eo:ProgressBar.ContentTemplate&gt;
            &lt;/eo:ProgressBar&gt;
            </code>The previous XAML markup produces the following result:
            <para><img src="Wpf/Controls/ProgressBar/progressbar4.gif"></img></para></para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.ProgressBar.ContentTemplateSelector">
      <summary>
            Gets or sets the a template selector that enables custom
            template-selection logic. This is a dependency property.
            </summary>
      <value>
            The default value is <b>null</b>.
            </value>
      <remarks>
        <para>
            Note that in order to use this property, the 
            <see cref="P:EO.Wpf.ProgressBar.ShowContent" /> property must be set to <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.ProgressBar.ContentStringFormat">
      <summary>
            Gets or sets a string format that is used to format the display
            value. This is a dependency property.
            </summary>
      <value>
            A string format value that is used to format the display value. The
            default value is '{0}'.
            </value>
      <remarks>
        <para>
            Note that in order to use The <b>ContentStringFormat</b> property,
            the <see cref="P:EO.Wpf.ProgressBar.ShowContent" /> property must be set 
            <c>true</c> and no template is being used.
            </para>
        <para>
            The following example shows how to change the <b>ContentStringFormat</b> property:
            <code lang="XML" title="XAML">
            &lt;eo:ProgressBar Minimum="0" Maximum="100" Value="35" VerticalAlignment="Center" 
                     ShowContent="True" ContentStringFormat="{}{0}% Completed."&gt;&lt;/eo:ProgressBar&gt;
            </code>
            The previous code produces the following result:
            <para><img src="Wpf/Controls/ProgressBar/progressbar6.gif"></img></para></para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.ProgressBar.DisplayValue">
      <summary>
            Gets the display value that is used as the 
            <see cref="P:System.Windows.Controls.ContentPresenter.ContentSource" />. This is a dependency
            property.
            </summary>
      <remarks>
        <para>
            Note that by default the <b>DisplayValue</b> has the same value as 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" />, but when the 
            <see cref="P:EO.Wpf.ProgressBar.IsPercent" /> property is set to <c>true</c>, The <see cref="T:EO.Wpf.ProgressBar" />
            internally compute the percentage of the 
            <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> based on <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> 
            and <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> and store it in 
            <see cref="P:EO.Wpf.ProgressBar.DisplayValue" />. For example, if <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> is 0,
            and <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> is 200 and <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> is 100,
            then <see cref="P:EO.Wpf.ProgressBar.DisplayValue" /> will be 50.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.ProgressBar.ContentPresenterStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied to the 
            <see cref="T:EO.Wpf.ProgressBar" /> content presenter. This is a dependency
            property.
            </summary>
      <remarks>
        <para>
            Note that in order to use this property, the 
            <see cref="P:EO.Wpf.ProgressBar.ShowContent" /> property must be set to <c>true</c>.
            </para>
        <para>
            This style is primarly used to update the foreground property of the
            content presenter, because the <see cref="T:EO.Wpf.ProgressBar" /> is using
            the <see cref="P:System.Windows.Documents.TextElement.Foreground" /> property to change the
            brush of the progress indicator.
            </para>
        <para>
            The following example, changes the foreground of the 
            <see cref="T:EO.Wpf.ProgressBar" /> content to <b>DarkOrange</b> and the 
            <see cref="T:EO.Wpf.ProgressBar" /> progress indicator brush to <b>Orange</b>:
            <code lang="XML" title="XAML">
            &lt;eo:ProgressBar Minimum="0" Maximum="100" Value="65" VerticalAlignment="Center" 
                     Foreground="Orange" ShowContent="True"&gt;
                &lt;eo:ProgressBar.ContentPresenterStyle&gt;
                    &lt;Style TargetType="ContentPresenter"&gt;
                        &lt;Setter Property="TextElement.Foreground" Value="OrangeRed" /&gt;
                    &lt;/Style&gt;
                &lt;/eo:ProgressBar.ContentPresenterStyle&gt;
            &lt;/eo:ProgressBar&gt;
            </code>The previous XAML markup produces the following result:
            <para><img src="Wpf/Controls/ProgressBar/progressbar5.gif"></img></para></para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.ProgressBar.ShowContent">
      <summary>
            Gets or sets a values that indicates whether the 
            <see cref="T:EO.Wpf.ProgressBar" /> supports rich content in its client area
            or not. This is a dependency property.
            </summary>
      <value>
        <c>true</c> to show rich content; otherwise <c>false</c>. The
            default value is <c>false</c>.
            </value>
    </member>
    <member name="T:EO.Wpf.Expander">
      <summary>
            The Expander control allows a user to view a header and expand that header to see further details, 
            or to collapse a section up to a header.
            </summary>
    </member>
    <member name="F:EO.Wpf.Expander.ExpandDirectionProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Expander.ExpandDirection" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Expander.IsExpandedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Expander.IsExpanded" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Expander.CollapsedEvent">
      <summary>
            The collapsed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.Expander.ExpandedEvent">
      <summary>
            The expanded event.
            </summary>
    </member>
    <member name="F:EO.Wpf.Expander.ExpandEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Expander.ExpandEffect" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.Expander.CollapseEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Expander.CollapseEffect" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Expander.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Expander" /> class.
            </summary>
    </member>
    <member name="E:EO.Wpf.Expander.Expanded">
      <summary>
            Occurs when the content window of an <see cref="T:EO.Wpf.Expander" /> control opens 
            to display both its header and content.
            </summary>
    </member>
    <member name="E:EO.Wpf.Expander.Collapsed">
      <summary>
            Occurs when the content window of an <see cref="T:EO.Wpf.Expander" /> control closes 
            and only the <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" /> is visible.
            </summary>
    </member>
    <member name="P:EO.Wpf.Expander.ExpandDirection">
      <summary>
            Gets or sets the direction in which the <see cref="T:EO.Wpf.Expander" /> content opens.
            </summary>
    </member>
    <member name="P:EO.Wpf.Expander.IsExpanded">
      <summary>
            Gets or sets a value indicating whether <see cref="T:EO.Wpf.Expander" /> content is visible.
            </summary>
    </member>
    <member name="P:EO.Wpf.Expander.ExpandEffect">
      <summary>
            Gets or sets the effect played when the expander expands.
            </summary>
    </member>
    <member name="P:EO.Wpf.Expander.CollapseEffect">
      <summary>
            Gets or sets the effect played when the expander collapses.
            </summary>
    </member>
    <member name="M:EO.Wpf.Expander.OnCollapsed">
      <summary>
            Raises the <see cref="E:EO.Wpf.Expander.Collapsed" /> event when the <see cref="P:EO.Wpf.Expander.IsExpanded" /> property
            changes from <value>true</value> to <value>false</value>.
            </summary>
    </member>
    <member name="M:EO.Wpf.Expander.OnExpanded">
      <summary>
            Raises the <see cref="E:EO.Wpf.Expander.Expanded" /> event when the <see cref="P:EO.Wpf.Expander.IsExpanded" /> property
            changes from <value>false</value> to <value>true</value>.
            </summary>
    </member>
    <member name="T:EO.Wpf.ComboBoxItem">
      <summary>
            Implements a selectable item inside a <see cref="T:EO.Wpf.ComboBox" />. 
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBoxItem.IsHighlightedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBoxItem.IsHighlighted" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBoxItem.IsCheckedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBoxItem.IsChecked" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBoxItem.ValueProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBoxItem.Value" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBoxItem.Value">
      <summary>
            Gets or sets a value attached to the item.
            </summary>
    </member>
    <member name="M:EO.Wpf.ComboBoxItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.ComboBoxItem" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBoxItem.IsHighlighted">
      <summary>
            Gets a value indicating whether the item is highlighted.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBoxItem.Text">
      <summary>
            Gets the text of the item.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBoxItem.IsChecked">
      <summary>
            Gets or sets the value indicating whether the item is checked.
            </summary>
      <remarks>
            This property is different than <see cref="P:EO.Wpf.ListBoxItem.IsSelected" />. When <see cref="P:EO.Wpf.ComboBox.ShowCheckBoxes" /> is set to 
            <b>true</b>, the <see cref="T:EO.Wpf.ComboBox" /> displays a drop down with checkboxes to allow multiple selection. 
            If user checks the checkbox for one item (which updates <see cref="P:EO.Wpf.ComboBoxItem.IsChecked" /> property), but then click 
            "Cancel" to cancel the drop down, then the item's <see cref="P:EO.Wpf.ListBoxItem.IsSelected" /> will be not be updated. If user
            clicks "OK" to confirm the selection, then the item's <see cref="P:EO.Wpf.ListBoxItem.IsSelected" /> will be set to true.
            </remarks>
    </member>
    <member name="F:EO.Wpf.ComboBoxItem.CheckedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.ComboBoxItem.Checked" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.ComboBoxItem.Checked">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.ComboBoxItem" /> is checked.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBoxItem.UncheckedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.ComboBoxItem.Unchecked" /> routed event.
            </summary>
    </member>
    <member name="E:EO.Wpf.ComboBoxItem.Unchecked">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.MenuItem" /> is unchecked.
            </summary>
    </member>
    <member name="T:EO.Wpf.ListBoxItem">
      <summary>
            Represents an item in a <see cref="T:EO.Wpf.ListBox" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBoxItem.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBoxItem.IsSelected" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBoxItem.SelectedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.ListBoxItem.Selected" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBoxItem.UnselectedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.ListBoxItem.Unselected" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.ListBoxItem.AllowDragItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBoxItem.AllowDragItem" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBoxItem.AllowDragItem">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EO.Wpf.ListBoxItem" /> can be dragged.
            </summary>
      <remarks>
            This property is inheritable. It can inherit value from 
            the <see cref="T:EO.Wpf.ListBox" />'s <see cref="P:EO.Wpf.ListBox.AllowDragItem" /> property.
            </remarks>
    </member>
    <member name="F:EO.Wpf.ListBoxItem.AllowDragCopyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ListBoxItem.AllowDragCopy" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBoxItem.AllowDragCopy">
      <summary>
            Gets or sets a value indicating whether during a drag and drop operation
            this <see cref="T:EO.Wpf.ListBoxItem" /> can be copied.
            </summary>
      <remarks>
        <para>
            This property is inheritable. It can inherit value from the 
            <see cref="T:EO.Wpf.ListBox" />'s <see cref="P:EO.Wpf.ListBox.AllowDragCopy" /> property.
            </para>
        <para>
            By default this property is <b>false</b>, which means a drag and drop operation
            can only move the item to a different location. When this property is set <b>true</b>,
            user can hold down control key to copy the item to a different location.
            </para>
        <para>
            This property is ignored if a <see cref="T:EO.Wpf.ListBoxItem" />'s data item is the
            <see cref="T:EO.Wpf.ListBoxItem" /> itself (as in the case when <see cref="T:EO.Wpf.ListBoxItem" />
            are statically defined in XML, as oppose to populating the ListBox from a
            data source). User can not copy a <see cref="T:EO.Wpf.ListBoxItem" /> in this case.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.ListBoxItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.ListBoxItem" />.
            </summary>
    </member>
    <member name="E:EO.Wpf.ListBoxItem.Selected">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.ListBoxItem" /> is selected.
            </summary>
    </member>
    <member name="E:EO.Wpf.ListBoxItem.Unselected">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.ListBoxItem" /> is unselected.
            </summary>
    </member>
    <member name="P:EO.Wpf.ListBoxItem.IsSelected">
      <summary>
            Gets or sets a value that indicates whether a <see cref="T:EO.Wpf.ListBoxItem" /> is selected.
            </summary>
    </member>
    <member name="T:EO.Wpf.Slider">
      <summary>
            Represents a control that lets the user select from a range of values by moving a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> 
            control along a <see cref="T:System.Windows.Controls.Primitives.Track" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.Slider.RangeBarStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.Slider.RangeBarStyle" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.Slider.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.Slider" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.Slider.Ranges">
      <summary>
            Gets or sets a collection of <see cref="T:EO.Wpf.Gauge.Range" /> objects used to
            highlight different segments of the <see cref="T:EO.Wpf.Slider" /> track;
            </summary>
    </member>
    <member name="P:EO.Wpf.Slider.RangeBarStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> applied for the range bar used
            to render the <see cref="P:EO.Wpf.Slider.Ranges" /> collection. This is a dependency
            property.
            </summary>
    </member>
    <member name="P:EO.Wpf.Slider.MinimizeValue">
      <summary>
            Gets a command that sets the <see cref="T:EO.Wpf.Slider" /><see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> value.
            </summary>
    </member>
    <member name="P:EO.Wpf.Slider.MaximizeValue">
      <summary>
            Gets a command that sets the <see cref="T:EO.Wpf.Slider" /><see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> value.
            </summary>
    </member>
    <member name="T:EO.Wpf.NamedResourceKey">
      <summary>
            Provides a generic resource key based on a name.
            </summary>
      <remarks>
            This class is used to define theme styles. See <a href="Wpf/Theme/overview.html">here</a> for
            more details about using themes.
            </remarks>
    </member>
    <member name="M:EO.Wpf.NamedResourceKey.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.NamedResourceKey" /> class.
            </summary>
      <param name="name">The name of the resource.</param>
    </member>
    <member name="P:EO.Wpf.NamedResourceKey.Name">
      <summary>
            Gets the name of the resource.
            </summary>
    </member>
    <member name="P:EO.Wpf.NamedResourceKey.Assembly">
      <summary>
            Gets an assembly object that indicates which assembly's dictionary to look in for the value associated with this key. 
            </summary>
    </member>
    <member name="M:EO.Wpf.NamedResourceKey.GetHashCode">
      <summary>
            Serves as a hash function for this type. 
            </summary>
    </member>
    <member name="M:EO.Wpf.NamedResourceKey.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:EO.Wpf.NamedResourceKey" /> is equal to the current <see cref="T:EO.Wpf.NamedResourceKey" />.
            </summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <b>true</b> if the specified object equals to this object; otherwise <b>false</b>.</returns>
    </member>
    <member name="T:EO.Wpf.SkinStyleInfo">
      <summary>
            Provides information about a skin style.
            </summary>
      <remarks>
            See <a href="Wpf/theme/overview.html">using theme and skin</a> for more details about how to use class.
            </remarks>
    </member>
    <member name="M:EO.Wpf.SkinStyleInfo.#ctor(System.Type,System.String,System.Reflection.Assembly,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.ThemeStyleInfo" /> class.
            </summary>
      <param name="targetType">The type for which the style is intended.</param>
      <param name="skinName">The name of the skin. If this value is null, then the style is considered as the default style.</param>
      <param name="assembly">The assembly in which the style is defined.</param>
      <param name="styleName">The name of the style.</param>
    </member>
    <member name="P:EO.Wpf.SkinStyleInfo.TargetType">
      <summary>
            Returns the type for which the style is intended.
            </summary>
    </member>
    <member name="P:EO.Wpf.SkinStyleInfo.SkinName">
      <summary>
            Returns the skin name.
            </summary>
    </member>
    <member name="P:EO.Wpf.SkinStyleInfo.Assembly">
      <summary>
            Returns the assembly in which the style is defined.
            </summary>
    </member>
    <member name="P:EO.Wpf.SkinStyleInfo.StyleName">
      <summary>
            Returns the name of the style.
            </summary>
    </member>
    <member name="T:EO.Wpf.ThemeStyleInfo">
      <summary>
            Associate a skin to a theme.
            </summary>
      <remarks>
            See <a href="Wpf/theme/overview.html">using theme and skin</a> for more details about how to use class.
            </remarks>
    </member>
    <member name="M:EO.Wpf.ThemeStyleInfo.#ctor(System.String,System.Type,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.ThemeStyleInfo" /> class.
            </summary>
      <param name="themeName">The name of the theme.</param>
      <param name="targetType">The type for which the style is intended.</param>
      <param name="skinName">The name of the skin. If the argument is null, then the default style is used.</param>
    </member>
    <member name="P:EO.Wpf.ThemeStyleInfo.ThemeName">
      <summary>
            Returns the name of the theme.
            </summary>
    </member>
    <member name="P:EO.Wpf.ThemeStyleInfo.TargetType">
      <summary>
            Returns the type for which the style is intended.
            </summary>
    </member>
    <member name="P:EO.Wpf.ThemeStyleInfo.SkinName">
      <summary>
            Returns the skin name.
            </summary>
    </member>
    <member name="M:EO.Wpf.ThemeStyleInfo.System#IComparable#CompareTo(System.Object)">
      <summary>
            Compares two <see cref="T:EO.Wpf.ThemeStyleInfo" /> object.
            </summary>
    </member>
    <member name="T:EO.Wpf.ThemeNames">
      <summary>
            List all built-in theme names.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeNames.Classic">
      <summary>
            The name of the Windows Classic theme.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeNames.Aero">
      <summary>
            The name of the Windows Aero theme.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeNames.LunaNormalColor">
      <summary>
            The name of the Windows Luna Normal Color theme.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeNames.LunaHomestead">
      <summary>
            The name of the Windows Luna Homestead theme.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeNames.LunaMetallic">
      <summary>
            The name of the Windows Metallic theme.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeNames.Royale">
      <summary>
            The name of the Windows Royale theme.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeNames.MetroLight">
      <summary>
            The name of the Metro light theme.
            </summary>
    </member>
    <member name="T:EO.Wpf.ThemeManager">
      <summary>
            Manages all EO.Wpf themes.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeManager.ThemeNameProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ThemeManager._AP.ThemeName">ThemeName</see> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeManager.SkinNameProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ThemeManager._AP.SkinName">SkinName</see> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeManager.TrackAppThemeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ThemeManager._AP.TrackAppTheme">TrackAppTheme</see> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeManager.EffectiveAppThemeNameProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ThemeManager._AP.EffectiveAppThemeName">EffectiveAppThemeName</see> attached property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ThemeManager.EffectiveSkinNameProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ThemeManager._AP.EffectiveSkinName">EffectiveSkinName</see> attached property.
            </summary>
    </member>
    <member name="T:EO.Wpf.ThemeManager._AP">
      <summary>
            dummy class for documentation purpose
            </summary>
    </member>
    <member name="P:EO.Wpf.ThemeManager._AP.ThemeName">
      <summary>
            Gets or sets the name of theme to be applied to the control.
            </summary>
      <remarks>
            Set this property to automatically apply the skin associated to the specified theme for the target control type.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ThemeManager._AP.SkinName">
      <summary>
            Gets or sets the name of the skin to be applied to the control.
            </summary>
      <remarks>
            Set this property to apply the specified skin to the target control. When both <see cref="P:EO.Wpf.ThemeManager._AP.ThemeName" /> and
            <see cref="P:EO.Wpf.ThemeManager._AP.SkinName" /> are set, <see cref="P:EO.Wpf.ThemeManager._AP.SkinName" /> takes priority.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ThemeManager._AP.TrackAppTheme">
      <summary>
            Gets or sets a value indicating whether the theme manager should evaluate and updates
            <see cref="P:EO.Wpf.ThemeManager._AP.EffectiveAppThemeName" /> property for this <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.ThemeManager._AP.EffectiveAppThemeName">
      <summary>
            Get the current <see cref="P:EO.Wpf.ThemeManager.AppTheme" /> value.
            </summary>
    </member>
    <member name="P:EO.Wpf.ThemeManager._AP.EffectiveSkinName">
      <summary>
            Gets the effective skin applied to a <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
    </member>
    <member name="E:EO.Wpf.ThemeManager._AP.EffectiveAppThemeNameChanged">
      <summary>
            Occurs when the value of the <see cref="P:EO.Wpf.ThemeManager._AP.EffectiveAppThemeName" /> attached property is changed.
            </summary>
    </member>
    <member name="E:EO.Wpf.ThemeManager._AP.EffectiveSkinNameChanged">
      <summary>
            Occurs when the value of the <see cref="P:EO.Wpf.ThemeManager._AP.EffectiveSkinName" /> attached property is changed.
            </summary>
    </member>
    <member name="P:EO.Wpf.ThemeManager.AppTheme">
      <summary>
            Gets or sets the current application theme.
            </summary>
    </member>
    <member name="M:EO.Wpf.ThemeManager.GetThemeName(System.Windows.FrameworkElement)">
      <summary>
            Gets the current theme name for a <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
      <param name="fe">The framework element.</param>
    </member>
    <member name="M:EO.Wpf.ThemeManager.SetThemeName(System.Windows.FrameworkElement,System.String)">
      <summary>
            Sets the current theme name for a <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
      <param name="fe">The framework element.</param>
      <param name="themeName">The new theme name.</param>
    </member>
    <member name="M:EO.Wpf.ThemeManager.GetSkinName(System.Windows.FrameworkElement)">
      <summary>
            Gets the current skin name for a <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
      <param name="fe">The framework element.</param>
    </member>
    <member name="M:EO.Wpf.ThemeManager.SetSkinName(System.Windows.FrameworkElement,System.String)">
      <summary>
            Sets the current skin name for a <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
      <param name="fe">The framework element.</param>
      <param name="skinName">The new skin name.</param>
    </member>
    <member name="M:EO.Wpf.ThemeManager.GetTrackAppTheme(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.ThemeManager._AP.TrackAppTheme">TrackAppTheme</see> attached property.
            </summary>
      <param name="d">The dependency object.</param>
    </member>
    <member name="M:EO.Wpf.ThemeManager.SetTrackAppTheme(System.Windows.DependencyObject,System.Boolean)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.ThemeManager._AP.TrackAppTheme">TrackAppTheme</see> attached property.
            </summary>
      <param name="d">The dependency object.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:EO.Wpf.ThemeManager.GetEffectiveAppThemeName(System.Windows.DependencyObject)">
      <summary>
            Gets the current value of <see cref="P:EO.Wpf.ThemeManager.AppTheme" />.
            </summary>
      <param name="d">The dependency object.</param>
    </member>
    <member name="M:EO.Wpf.ThemeManager.GetEffectiveSkinName(System.Windows.DependencyObject)">
      <summary>
            Gets the effective skin name.
            </summary>
      <param name="d">The dependency object.</param>
    </member>
    <member name="M:EO.Wpf.ThemeManager.RegisterSkinStyles(EO.Wpf.SkinStyleInfo[])">
      <summary>
            Register a list of skin styles.
            </summary>
      <param name="styleInfos">A list of <see cref="T:EO.Wpf.SkinStyleInfo" /> objects that contain information about the styles.</param>
      <remarks>
        <para>
            Use this function to register custom skins. A custom skin is a named style for a specific
            control type. Once a skin is registered, it can be applied either directly through
            <see cref="P:EO.Wpf.ThemeManager._AP.SkinName" /> attached property, or indirectly through <see cref="P:EO.Wpf.ThemeManager._AP.ThemeName" /> attached property or
            <see cref="P:EO.Wpf.ThemeManager.AppTheme" /> property.
            </para>
        <para>
            All skins and thems must be registered before they can be used, so you must register 
            them skins as early as possible, such as in your App class's constructor.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.ThemeManager.RegisterThemeStyles(EO.Wpf.ThemeStyleInfo[])">
      <summary>
            Register a list of themes styles.
            </summary>
      <param name="styleInfos">A list of <see cref="T:EO.Wpf.ThemeStyleInfo" /> objects that contain information about the styles.</param>
      <remarks>
        <para>
            Use this function register custom themes. A theme is a collection of rules that
            defines the skin to be used for each type of controls. Each <see cref="T:EO.Wpf.ThemeStyleInfo" /> 
            donates such a rule. This allows you to associate different theme to the same skin. For
            example, while a <see cref="T:EO.Wpf.Button" /> control typically have two different skins for 
            "Classic" and "Aero", a <see cref="T:EO.Wpf.SplitView" /> control uses the same skin for
            both themes.
            </para>
        <para>
            All skins and thems must be registered before they can be used, so you must register 
            them skins as early as possible, such as in your App class's constructor.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.ThemeManager.GetSkinStyles(System.Type)">
      <summary>
            Gets all registered <see cref="T:EO.Wpf.SkinStyleInfo" /> objects for a specific control type.
            </summary>
    </member>
    <member name="M:EO.Wpf.ThemeManager.GetThemeStyles(System.Type)">
      <summary>
            Gets all registered <see cref="T:EO.Wpf.ThemeStyleInfo" /> objects for a specific control type.
            </summary>
    </member>
    <member name="P:EO.Wpf.ThemeManager.AllThemes">
      <summary>
            Gets the list of all registered theme names.
            </summary>
    </member>
    <member name="M:EO.Wpf.ThemeManager.Register(System.Windows.FrameworkElement)">
      <summary>
            Register a <see cref="T:System.Windows.FrameworkElement" /> with the theme manager.
            </summary>
      <param name="fe">The <see cref="T:System.Windows.FrameworkElement" /> to be registered.</param>
      <remarks>
            See <a href="Wpf/Theme/custom_themes2.html">skins for custom controls</a> for more
            information about this method.
            </remarks>
    </member>
    <member name="F:EO.Wpf.ThemeManager.EffectiveAppThemeNameChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.ThemeManager._AP.EffectiveAppThemeNameChanged" /> attached event.
            </summary>
    </member>
    <member name="M:EO.Wpf.ThemeManager.AddEffectiveAppThemeNameChangedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
      <summary>
            Add an event handler to the <see cref="E:EO.Wpf.ThemeManager._AP.EffectiveAppThemeNameChanged" /> attached event.
            </summary>
      <param name="d">The <see cref="T:System.Windows.DependencyObject" /> to which the event handler to be added.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:EO.Wpf.ThemeManager.RemoveEffectiveAppThemeNameChangedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
      <summary>
            Remove an event handler from the <see cref="E:EO.Wpf.ThemeManager._AP.EffectiveAppThemeNameChanged" /> attached event.
            </summary>
      <param name="d">The <see cref="T:System.Windows.DependencyObject" /> from which the event handler to be removed.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="F:EO.Wpf.ThemeManager.EffectiveSkinNameChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.ThemeManager._AP.EffectiveSkinNameChanged" /> attached event.
            </summary>
    </member>
    <member name="M:EO.Wpf.ThemeManager.AddEffectiveSkinNameChangedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
      <summary>
            Add an event handler to the <see cref="E:EO.Wpf.ThemeManager._AP.EffectiveSkinNameChanged" /> attached event.
            </summary>
      <param name="d">The <see cref="T:System.Windows.DependencyObject" /> to which the event handler to be added.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:EO.Wpf.ThemeManager.RemoveEffectiveSkinNameChangedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
      <summary>
            Remove an event handler from the <see cref="E:EO.Wpf.ThemeManager._AP.EffectiveSkinNameChanged" /> attached event.
            </summary>
      <param name="d">The <see cref="T:System.Windows.DependencyObject" /> from which the event handler to be removed.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="T:EO.Wpf.TreeViewItem">
      <summary>
            Represents an item in the <see cref="T:EO.Wpf.TreeView" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.IsExpandedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.IsExpanded" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.IsExpanded">
      <summary>
            Gets or sets whether the nested items in a <see cref="T:EO.Wpf.TreeViewItem" /> are expanded or collapsed.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.IsSelected" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.IsSelected">
      <summary>
            Gets or sets whether a <see cref="T:EO.Wpf.TreeViewItem" /> is selected.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.IsSelectionActiveProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.IsSelectionActive" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.IsSelectionActive">
      <summary>
            Gets a value that indicates whether the <see cref="T:EO.Wpf.TreeViewItem" /> is both selected and has keyboard focus. 
            </summary>
      <remarks>
            A selected <see cref="T:EO.Wpf.TreeViewItem" /> may apply different styles depending on whether it has
            keyboard focus. The default style applies a darker background when the item has the focus,
            and applies a lighter background when it does not have the focus.
            </remarks>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.ShowCheckBoxProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.ShowCheckBox" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.ShowCheckBox">
      <summary>
            Gets or sets a value indicating whether to display a checkbox for this item.
            </summary>
      <remarks>
            This property is inheritable. It can inherit value from a parent item's <see cref="P:EO.Wpf.TreeViewItem.ShowCheckBox" />
            property or from the <see cref="T:EO.Wpf.TreeView" />'s <see cref="P:EO.Wpf.TreeView.ShowCheckBox" /> property.
            </remarks>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.CheckStateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.CheckState" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.CheckState">
      <summary>
            Gets or sets the state of the checkbox.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.IconProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.Icon" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.Icon">
      <summary>
            Gets or sets the icon that appears in a <see cref="T:EO.Wpf.TreeViewItem" />.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.IconTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.IconTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.IconTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used for the <see cref="T:EO.Wpf.TreeViewItem" /> icon.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.AllowDragItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.AllowDragItem" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.AllowDragItem">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EO.Wpf.TreeViewItem" /> can be dragged.
            </summary>
      <remarks>
            This property is inheritable. It can inherit value from a parent item's <see cref="P:EO.Wpf.TreeViewItem.AllowDragItem" />
            property or from the <see cref="T:EO.Wpf.TreeView" />'s <see cref="P:EO.Wpf.TreeView.AllowDragItem" /> property.
            </remarks>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.AllowDragCopyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.AllowDragCopy" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.AllowDragCopy">
      <summary>
            Gets or sets a value indicating whether during a drag and drop operation
            this <see cref="T:EO.Wpf.TreeViewItem" /> can be copied.
            </summary>
      <remarks>
        <para>
            This property is inheritable. It can inherit value from a parent item's <see cref="P:EO.Wpf.TreeViewItem.AllowDragCopy" />
            property or from the <see cref="T:EO.Wpf.TreeView" />'s <see cref="P:EO.Wpf.TreeView.AllowDragCopy" /> property.
            </para>
        <para>
            By default this property is <b>false</b>, which means a drag and drop operation
            can only move the item to a different location. When this property is set <b>true</b>,
            user can hold down control key to copy the item to a different location.
            </para>
        <para>
            This property is ignored if a <see cref="T:EO.Wpf.TreeViewItem" />'s data item is the
            <see cref="T:EO.Wpf.TreeViewItem" /> itself (as in the case when <see cref="T:EO.Wpf.TreeViewItem" />
            are statically defined in XML, as oppose to populating the TreeViewItem from a
            data source). User can not copy a <see cref="T:EO.Wpf.TreeViewItem" /> in this case.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.AllowDropItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.AllowDropItem" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.AllowDropItem">
      <summary>
            Gets or sets a value indicating whether user can drop another item
            onto this item.
            </summary>
      <remarks>
        <para>
            This property is inheritable. It can inherit value from a parent item's <see cref="P:EO.Wpf.TreeViewItem.AllowDropItem" />
            property or from the <see cref="T:EO.Wpf.TreeView" />'s <see cref="P:EO.Wpf.TreeView.AllowDropItem" /> property.
            </para>
      </remarks>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.AllowEditItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.AllowEditItem" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.AllowEditItem">
      <summary>
            Gets or sets a value indicating whether user can edit an item.
            </summary>
      <remarks>
            This property is inheritable. It can inherit value from a parent item's <see cref="P:EO.Wpf.TreeViewItem.AllowEditItem" />
            property or from the <see cref="T:EO.Wpf.TreeView" />'s <see cref="P:EO.Wpf.TreeView.AllowEditItem" /> property.
            </remarks>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.Level">
      <summary>
            Gets the level of this tree view item.
            </summary>
      <remarks>
            Root level tree view items are level 0. Their childrens are level 1, their childrens'
            children are level 2, and so on.
            </remarks>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.LoadChildrenOnExpandProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.TreeViewItem.LoadChildrenOnExpand" /> dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.TreeViewItem.LoadChildrenOnExpand">
      <summary>
            Gets or sets a value indicating whether this item may have child items.
            </summary>
      <remarks>
            When this property is set to <b>true</b>, the <see cref="T:EO.Wpf.TreeViewItem" /> will display
            the expand button even if it currently does not have child items. When user clicks
            the expand button, the <see cref="E:EO.Wpf.TreeViewItem.Expanded" /> event is fired. You can then load the
            child items inside that event handler.
            </remarks>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.CollapsedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeViewItem.Collapsed" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.ExpandedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeViewItem.Expanded" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.SelectedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeViewItem.Selected" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.UnselectedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeViewItem.Unselected" /> routed event.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.CheckStateChangedEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeViewItem.CheckStateChanged" /> event.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.EnterEditModeEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeViewItem.EnterEditMode" /> event.
            </summary>
    </member>
    <member name="F:EO.Wpf.TreeViewItem.ExitEditModeEvent">
      <summary>
            Identifies the <see cref="E:EO.Wpf.TreeViewItem.ExitEditMode" /> event.
            </summary>
    </member>
    <member name="E:EO.Wpf.TreeViewItem.Collapsed">
      <summary>
            Occurs when the <see cref="P:EO.Wpf.TreeViewItem.IsExpanded" /> property changes from true to false.
            </summary>
    </member>
    <member name="E:EO.Wpf.TreeViewItem.Expanded">
      <summary>
            Occurs when the <see cref="P:EO.Wpf.TreeViewItem.IsExpanded" /> property changes from false to true.
            </summary>
    </member>
    <member name="E:EO.Wpf.TreeViewItem.Selected">
      <summary>
            Occurs when the <see cref="P:EO.Wpf.TreeViewItem.IsSelected" /> property changes from true to false.
            </summary>
    </member>
    <member name="E:EO.Wpf.TreeViewItem.Unselected">
      <summary>
            Occurs when the <see cref="P:EO.Wpf.TreeViewItem.IsSelected" /> property changes from false to true.
            </summary>
    </member>
    <member name="E:EO.Wpf.TreeViewItem.CheckStateChanged">
      <summary>
            Occurs when <see cref="P:EO.Wpf.TreeViewItem.CheckState" /> changed.
            </summary>
    </member>
    <member name="E:EO.Wpf.TreeViewItem.EnterEditMode">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.TreeViewItem" /> enters the edit mode.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/TreeView/editnode.html">editing tree view item</a> for more
            details about how to use this event.
            </remarks>
    </member>
    <member name="E:EO.Wpf.TreeViewItem.ExitEditMode">
      <summary>
            Occurs when a <see cref="T:EO.Wpf.TreeViewItem" /> leaves edit mode.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/TreeView/editnode.html">editing tree view item</a> for more
            details about how to use this event.
            </remarks>
    </member>
    <member name="M:EO.Wpf.TreeViewItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.TreeViewItem" /> class.
            </summary>
    </member>
    <member name="T:EO.Wpf.EditItemEventArgs">
      <summary>
            Provides data for an item editing event.
            </summary>
    </member>
    <member name="P:EO.Wpf.EditItemEventArgs.Container">
      <summary>
            The container <see cref="T:System.Windows.UIElement" /> of the item being edited.
            </summary>
    </member>
    <member name="P:EO.Wpf.EditItemEventArgs.Item">
      <summary>
            The item being edited.
            </summary>
    </member>
    <member name="P:EO.Wpf.EditItemEventArgs.Text">
      <summary>
            The initial text when the item enters edit mode or the final text when the item leaves edit mode.
            </summary>
    </member>
    <member name="T:EO.Wpf.EditItemEventHandler">
      <summary>
            Represents the method that handles an item editing event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:EO.Wpf.ComboBox">
      <summary>
            Represents a selection control with a drop-down list that can be shown or hidden by clicking the arrow on the control.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.IsEditableProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.IsEditable" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.IsDropDownOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.IsDropDownOpen" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.IsSelectedItemsDropDownOpenProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.IsSelectedItemsDropDownOpen" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.StaysOpenOnEditProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.StaysOpenOnEdit" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.SelectionBoxItemProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.SelectionBoxItem" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.TextProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.Text" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.IsReadOnlyProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.IsReadOnly" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.MultiSelectionItemTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.MultiSelectionItemTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.SelectionBoxItemTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.SelectionBoxItemTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.SelectionBoxItemStringFormatProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.SelectionBoxItemStringFormat" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.DropDownMaxHeightProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.DropDownMaxHeight" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.DropDownMaxWidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.DropDownMaxWidth" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.DropDownMinHeightProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.DropDownMinHeight" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.DropDownMinWidthProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.DropDownMinWidth" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.DropDownMaxItemCountProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.DropDownMaxItemCount" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.EmptyPromptProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.EmptyPrompt" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.ShowClearButtonProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.ShowClearButton" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.ClearButtonTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.ClearButtonTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.ShowCheckBoxesProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.ShowCheckBoxes" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.DropDownExpandEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.DropDownExpandEffect" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.DropDownCollapseEffectProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.DropDownCollapseEffect" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.DropDownBorderStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.DropDownBorderStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.FooterTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.FooterTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.ShowFooterProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.ShowFooter" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.HeaderTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.ShowHeaderProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.ShowHeader" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.ComboBox.MoreItemsButtonTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.ComboBox.MoreItemsButtonTemplate" /> dependency property.
            </summary>
    </member>
    <member name="E:EO.Wpf.ComboBox.DropDownOpened">
      <summary>
            Occurs when the drop-down list of the <see cref="T:EO.Wpf.ComboBox" /> opens.
            </summary>
    </member>
    <member name="E:EO.Wpf.ComboBox.DropDownClosed">
      <summary>
            Occurs when the drop-down list of the <see cref="T:EO.Wpf.ComboBox" /> closes.
            </summary>
    </member>
    <member name="M:EO.Wpf.ComboBox.#cctor">
      <summary>
            Static constructor of the <see cref="T:EO.Wpf.ComboBox" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.ComboBox.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.ComboBox" /> class.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBox.IsEditable">
      <summary>
            Gets or sets a value that enables or disables editing of the text in text box of the <see cref="T:EO.Wpf.ComboBox" />.
            </summary>
      <remarks>
            When <see cref="P:EO.Wpf.ComboBox.IsEditable" /> is set to <b>true</b>, the <see cref="T:EO.Wpf.ComboBox" /> creates a <see cref="P:EO.Wpf.ComboBox.TextBox" />
            in the selection box to allow user to enter text directly (when <see cref="P:EO.Wpf.ComboBox.IsReadOnly" /> is <b>false</b>),
            or select and copy item text (when <see cref="P:EO.Wpf.ComboBox.IsReadOnly" /> is set to <b>true</b>).
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.IsReadOnly">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:EO.Wpf.ComboBox.TextBox" /> control inside the selection box is read-only.
            </summary>
      <remarks>
            When <see cref="P:EO.Wpf.ComboBox.IsEditable" /> is set to <b>true</b>, the <see cref="T:EO.Wpf.ComboBox" /> creates a <see cref="P:EO.Wpf.ComboBox.TextBox" />
            in the selection box. By default, user can enter text directly in the textbox. However if <see cref="P:EO.Wpf.ComboBox.IsReadOnly" />
            is set to <b>true</b>, user can no longer do so. User will still be able to select an item from the drop down,
            and once an item appears in the selection box, user will be able to select and copy item text.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.IsSelectionBoxHighlighted">
      <summary>
            Gets whether the <see cref="P:EO.Wpf.ComboBox.SelectionBoxItem" /> is highlighted.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBox.StaysOpenOnEdit">
      <summary>
            Gets or sets whether a <see cref="T:EO.Wpf.ComboBox" /> that is open and displays a drop-down control will remain open when a user clicks the textbox.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBox.IsDropDownOpen">
      <summary>
            Gets or sets a value that indicates whether the drop-down for a combo box is currently open.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBox.IsSelectedItemsDropDownOpen">
      <summary>
            Gets or sets a value that indicates whether the drop-down for selected items is currently open.
            </summary>
      <remarks>
        <para>
            This property is different than <see cref="P:EO.Wpf.ComboBox.IsDropDownOpen" />. EO <see cref="T:EO.Wpf.ComboBox" /> can display
            two different drop-downs: one contains all items, the other only contains selected items when
            <see cref="P:EO.Wpf.ComboBox.ShowCheckBoxes" /> is <b>true</b>. The purpose of the second drop down is display all
            selected (checked) items so that user can uncheck them. This property indicates whether the
            second drop down is open.
            </para>
        <para>
            See <a href="Wpf/Controls/ComboBox/Multi_select.html">Multi-Selection for ComboBox</a> for more
            details about this feature.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.SelectionBoxItem">
      <summary>
            Gets the item that is displayed in the selection box.
            </summary>
      <remarks>
            The <see cref="T:EO.Wpf.ComboBox" /> uses this property to show the selected item in the <see cref="T:EO.Wpf.ComboBox" />.
            To get the selected item(s) of the <see cref="T:EO.Wpf.ComboBox" /> control, use 
            <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem" /> property
            or <see cref="P:EO.Wpf.ComboBox.SelectedItems" /> property respectively.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.EmptyPrompt">
      <summary>
            Get the object to be displayed when the <see cref="T:EO.Wpf.ComboBox" /> is empty.
            </summary>
      <remarks>
            Use this property to offer a visual feedback and hint to the user when the <see cref="T:EO.Wpf.ComboBox" /> is empty.
            For example, you can set it to "-- Please select a city --" for a "City" drop down. It is possible to
            use <see cref="T:System.Windows.UIElement" /> for this property. See <a href="Wpf/Controls/ComboBox/empty_prompt.html">using empty prompt</a> for
            more details about this feature.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.DropDownMaxItemCount">
      <summary>
            Gets or sets the maximum items to be displayed in the dropdown. 
            </summary>
      <remarks>
            If both <see cref="P:EO.Wpf.ComboBox.DropDownMaxItemCount" /> and <see cref="P:EO.Wpf.ComboBox.DropDownMaxHeight" /> are set,
            <see cref="P:EO.Wpf.ComboBox.DropDownMaxItemCount" /> takes priority over <see cref="P:EO.Wpf.ComboBox.DropDownMaxHeight" />.
            Also the value of this property is suggestive in nature --- the <see cref="T:EO.Wpf.ComboBox" />
            may not be able to honor this value sometimes. For example, if different items have
            different height, then as user scrolls the drop down list, the number of visible items
            will change, thus making maintain a fixed number of visible items impossible.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.DropDownMaxWidth">
      <summary>
            Gets or sets the maximum width for the drop-down of the <see cref="T:EO.Wpf.ComboBox" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBox.DropDownMaxHeight">
      <summary>
            Gets or sets the maximum height for the drop-down of the <see cref="T:EO.Wpf.ComboBox" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBox.DropDownMinWidth">
      <summary>
            Gets or sets the minimum width for the drop-down of the <see cref="T:EO.Wpf.ComboBox" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBox.DropDownMinHeight">
      <summary>
            Gets or sets the minimum height for the drop-down of the <see cref="T:EO.Wpf.ComboBox" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBox.Text">
      <summary>
            Gets or sets the text of the currently selected item or the text entered by the user.
            </summary>
      <remarks>
        <para>
            This property is only used when <see cref="P:EO.Wpf.ComboBox.ShowCheckBoxes" /> is <b>false</b>. When multi-selection
            is enabled (<see cref="P:EO.Wpf.ComboBox.ShowCheckBoxes" /> is <b>true</b>). You can not use this property to change
            the text of the selection box. In that case if you wish to get the text of the selected items, you
            can use the following code:
            </para>
        <code lang="C#" title="C#">
            //Get the first selected item
            object item = ComboBox1.SelectedItems[0];
            
            //Get the ComboBoxItem object for this item
            ComboBoxItem comboBoxItem = (ComboBoxItem)ComboBox1.ItemContainerGenerator.ContainerFromItem(item);
            
            //Get the item text
            string itemText = comboBoxItem.Text;
            </code>
        <code lang="VB" title="Visual Basic.NET">
            'Get the first selected item
            Dim item As Object = ComboBox1.SelectedItems(0)
            
            'Get the ComboBoxItem object for this item
            Dim comboBoxItem As ComboBoxItem = DirectCast(ComboBox1.ItemContainerGenerator.ContainerFromItem(item), ComboBoxItem)
            
            'Get the item text
            Dim itemText As String = comboBoxItem.Text
            </code>
      </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.SelectionBoxItemTemplate">
      <summary>
            Gets the item template of the selection box content.
            </summary>
      <remarks>
            Use this property to customize the appearance of the item when it appears inside the selection box.
            It is particularly useful if you wish to customize the delete button of the selected item when
            <see cref="P:EO.Wpf.ComboBox.ShowCheckBoxes" /> is set to <b>true</b>. See <a href="Wpf/Controls/ComboBox/multi_select.html#itemtemplate">here</a>
            for an example about how to use this feature.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.MultiSelectionItemTemplate">
      <summary>
            Gets or Sets the item template of the Multi selection Item's content.
            </summary>
      <remarks>
            Use this property to customize the appearance of the item when it appears inside the selection box.
            It is particularly useful if you wish to customize the delete button of the selected item when
            <see cref="P:EO.Wpf.ComboBox.ShowCheckBoxes" /> is set to <b>true</b>. See <a href="Wpf/Controls/ComboBox/multi_select.html#itemtemplate">here</a>
            for an example about how to use this feature.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.SelectionBoxItemStringFormat">
      <summary>
            Gets a composite string that specifies how to format the selected item in the selection box if it is displayed as a string.
            </summary>
      <remarks>
            This property returns the format string that is used to format the current selected item. The property value
            is usually derived from another property value. For example, for the following ComboBox:
            <code lang="XML" title="XML">
            &lt;eo:ComboBox xmlns:sys="clr-namespace:System;assembly=mscorlib"
                ItemStringFormat="MMMM d, yyyy"&gt;
                &lt;sys:DateTime&gt;2004/3/4&lt;/sys:DateTime&gt;
                &lt;sys:DateTime&gt;2004/8/9&lt;/sys:DateTime&gt;
                &lt;sys:DateTime&gt;2005/10/14&lt;/sys:DateTime&gt;
                &lt;sys:DateTime&gt;2005/4/8&lt;/sys:DateTime&gt;
            &lt;/eo:ComboBox&gt;
            </code><para>
            ItemStringFormat "MMMM d, yyyy" is used to format each item and the selected item. In this case
            SelectionBoxItemStringFormat returns "MMMM d, yyyy".
            </para></remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.DropDownExpandEffect">
      <summary>
            Gets or sets the effect played when the drop down opens.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBox.DropDownCollapseEffect">
      <summary>
            Gets or sets the effect played when the drop down closes.
            </summary>
    </member>
    <member name="P:EO.Wpf.ComboBox.ShowCheckBoxes">
      <summary>
            Gets or sets a value indicating whether to display a checkbox for each item in the drop-down.
            </summary>
      <remarks>
            Set this property to <b>true</b> enables multi-selection. See
            <a href="Wpf/Controls/ComboBox/multi_select.html">Using Multi-Selection</a> for
            more details about this feature.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.DropDownBorderStyle">
      <summary>
            Gets or sets the style of the drop down border.
            </summary>
      <remarks>
        <para>
            Use this property to set the style of the drop down border. For example, the following
            code sets the drop down border color to blue:
            </para>
        <code lang="XML" title="XML">
            &lt;eo:ComboBox&gt;
                &lt;eo:ComboBox.DropDownBorderStyle&gt;
                    &lt;Style TargetType="Border"&gt;
                        &lt;Setter Property="BorderBrush" Value="Blue" /&gt;
                        &lt;Setter Property="BorderThickness" Value="1" /&gt;
                    &lt;/Style&gt;
                &lt;/eo:ComboBox.DropDownBorderStyle&gt;
                &lt;eo:ComboBoxItem&gt;Item 1&lt;/eo:ComboBoxItem&gt;
            &lt;/eo:ComboBox&gt;
            </code>
        <para>
            Note that because the style is applied as a whole, you may need to have multiple
            setters in your style even if you only want to change a single property. For example,
            the above sample sets both <b>BorderBrush</b> and <b>BorderThickness</b>. If you only
            set <b>BorderBrush</b>, then no border will be shown because <b>BorderThickness</b>
            has a default value 0 when not set.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.ShowFooter">
      <summary>
            Gets or sets a value indicating whether to display footer in the drop-down.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/ComboBox/header_footer.html">Drop Down Header and Footer</a> for more details about
            this feature.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.FooterTemplate">
      <summary>
            Gets or sets the template for the drop down footer.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/ComboBox/header_footer.html">Drop Down Header and Footer</a> for more details about
            this feature.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.ShowHeader">
      <summary>
            Gets or sets a value indicating whether to display header in the drop-down.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/ComboBox/header_footer.html">Drop Down Header and Footer</a> for more details about
            this feature.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.HeaderTemplate">
      <summary>
            Gets or sets the template for the drop down header.
            </summary>
      <remarks>
            See <a href="Wpf/Controls/ComboBox/header_footer.html">Drop Down Header and Footer</a> for more details about
            this feature.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.ShowClearButton">
      <summary>
            Gets or sets a value indicating whether to display a clear button.
            </summary>
      <remarks>
        <para>
            A "clear" button can be displayed immediately prior to the drop down button to allow user
            to clear the content of the <see cref="T:EO.Wpf.ComboBox" />. This property is only used when
            multi-selection is not enabled (when <see cref="P:EO.Wpf.ComboBox.ShowCheckBoxes" /> is <b>false</b>).
            </para>
            See <a href="Wpf/Controls/ComboBox/clear_button.html">Using Clear Button</a> for more details
            about this feature.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.ClearButtonTemplate">
      <summary>
            Gets or sets the template for the clear button.
            </summary>
      <remarks>
            The clear button is only displayed when <see cref="P:EO.Wpf.ComboBox.ShowClearButton" /> is true. 
            See <a href="Wpf/Controls/ComboBox/clear_button.html">Using Clear Button</a> for more details
            about this feature.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.MoreItemsButtonTemplate">
      <summary>
            Gets or sets the template for the "more items" button.
            </summary>
      <remarks>
            "More Items" button is displayed when user has selected multiple items, but the
            selection box does not have enough room to display all items. In this case, the
            <see cref="T:EO.Wpf.ComboBox" /> displays a "More Items" button immediately prior to the
            drop down button. Clicking "More Items" button opens a drop down window that
            displays all selected items. User can then unselect any selected items from the
            drop down.
            </remarks>
    </member>
    <member name="P:EO.Wpf.ComboBox.SelectedItems">
      <summary>
            Gets the currently selected items.
            </summary>
      <remarks>
            Use this property to get all the selected items when <see cref="P:EO.Wpf.ComboBox.ShowCheckBoxes" /> is <b>true</b>.
            </remarks>
    </member>
    <member name="T:EO.Wpf.WeekDaysCollection">
      <summary>
            Represent a collection of <see cref="T:System.DayOfWeek" /> values.
            </summary>
    </member>
    <member name="M:EO.Wpf.WeekDaysCollection.Parse(System.String)">
      <summary>
            Parse a list of weekday names.
            </summary>
      <param name="source">A list of weekday names separated by ",". For example, "Monday,Tuesday".</param>
    </member>
    <member name="T:EO.Wpf.WindowCommands">
      <summary>
            Provides window related commands.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowCommands.Close">
      <summary>
            Gets the value that represents the close window command.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowCommands.Maximize">
      <summary>
            Gets the value that represents the maximize window command.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowCommands.MaximizeRestore">
      <summary>
            Gets the value that represents the maximimze/restore window command.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowCommands.Minimize">
      <summary>
            Gets the value that represents the minimize window command.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowCommands.Restore">
      <summary>
            Gets the value that represents the restore command.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowCommands.SystemMenu">
      <summary>
            Gets the value that represents the system menu command.
            </summary>
    </member>
    <member name="T:EO.Wpf.WindowChrome">
      <summary>
            Allows user to replace a <see cref="T:System.Windows.Window" />'s frame with WPF elements and
            placing WPF elements into a <see cref="T:System.Windows.Window" />'s title area.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowChrome.EnableChromeProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.WindowChrome.EnableChrome" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowChrome.EnableGlassProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.WindowChrome.EnableGlass" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowChrome.FrameThicknessProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.WindowChrome.FrameThickness" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowChrome.TitleHeightProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.WindowChrome.TitleHeight" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowChrome.TitleElementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.WindowChrome.TitleElement" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowChrome.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.WindowChrome.CornerRadius" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowChrome.FrameTemplateProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.WindowChrome.FrameTemplate" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.WindowChrome.IsClientElementProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.WindowChrome._AP.IsClientElement" /> attached property.
            </summary>
    </member>
    <member name="T:EO.Wpf.WindowChrome._AP">
      <summary>
            dummy class for documentation purpose
            </summary>
    </member>
    <member name="P:EO.Wpf.WindowChrome._AP.IsClientElement">
      <summary>
            Gets or sets a value indicating whether an element inside a <see cref="T:EO.Wpf.WindowChrome" />'s 
            title area should be treated as if it is in the client area.
            </summary>
      <remarks>
            By default, user can drag mouse in the title area moves the window. Setting an
            element's <see cref="P:EO.Wpf.WindowChrome._AP.IsClientElement">WindowChrome.IsClientElement</see> to <b>true</b> disables
            this behavior and allow the control to define its own mouse behaviors. Usually you should set
            this property to <b>true</b> if an element is inside the window's title area (within area defined
            by <see cref="P:EO.Wpf.WindowChrome.TitleHeight" /> property or <see cref="P:EO.Wpf.WindowChrome.TitleElement" />) but you wish it to have normal mouse
            behavior instead of the default dragging behavior. For example, if you have a <see cref="T:EO.Wpf.Button" />
            inside the title area and you would like it to behave like a button, then you should set this
            property to true.
            </remarks>
    </member>
    <member name="M:EO.Wpf.WindowChrome.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:EO.Wpf.WindowChrome" /> class.
            </summary>
    </member>
    <member name="M:EO.Wpf.WindowChrome.GetIsClientElement(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the <see cref="P:EO.Wpf.WindowChrome._AP.IsClientElement" /> for a specified <see cref="T:System.Windows.DependencyObject" />.
            </summary>
    </member>
    <member name="M:EO.Wpf.WindowChrome.SetIsClientElement(System.Windows.DependencyObject,System.Boolean)">
      <summary>
            Sets the value of the <see cref="P:EO.Wpf.WindowChrome._AP.IsClientElement" /> for a specified <see cref="T:System.Windows.DependencyObject" />.
            </summary>
    </member>
    <member name="P:EO.Wpf.WindowChrome.EnableChrome">
      <summary>
            Gets or sets a value indicating whether chrome is enabled on the containing window.
            </summary>
      <remarks>
            Setting this property to false to turn off chrome on the containing window as if
            the <see cref="T:EO.Wpf.WindowChrome" /> element didn't exist. The default value is true.
            </remarks>
    </member>
    <member name="P:EO.Wpf.WindowChrome.EnableGlass">
      <summary>
            Gets or sets a value indicating whether to enable aero glass effect on the window.
            </summary>
      <remarks>
        <para>
            When aero glass is enabled on the window, the window's title and frame area are
            blended with existing desktop image to create a frosted glass effect.
            The default value is true if the system supports glass effect and it is not
            turned off. Otherwise this property returns false.
            </para>
        <para>
            When this property returns false, <see cref="P:EO.Wpf.WindowChrome.FrameTemplate" /> is displayed
            to create a window frame.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.WindowChrome.CornerRadius">
      <summary>
            Gets or sets the corner radius of the window.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Wpf.WindowChrome.EnableGlass" /> is <b>false</b>.
            </remarks>
    </member>
    <member name="P:EO.Wpf.WindowChrome.FrameThickness">
      <summary>
            Gets or sets the window frame thickness.
            </summary>
      <remarks>
            This property controls the amount of space reserved on each side of the window
            between the outter edge of the window and the outter edge of the window content.
            If the window is resizable, the frame area is also the resizing area.
            </remarks>
    </member>
    <member name="P:EO.Wpf.WindowChrome.TitleHeight">
      <summary>
            Gets or sets the window title height.
            </summary>
      <remarks>
        <para>
            This property determines the height of the window title, which allows user
            to move the window by dragging the title.
            </para>
        <para>
            To pevent a dragging operation on an element that's inside the window's title
            area from being intepreted as moving the window, you must set 
            <see cref="P:EO.Wpf.WindowChrome._AP.IsClientElement" /> attach property on the element to
            <b>true</b>.
            </para>
      </remarks>
    </member>
    <member name="P:EO.Wpf.WindowChrome.TitleElement">
      <summary>
            Gets or sets the name of the title element.
            </summary>
      <remarks>
            This property is only used when <see cref="P:EO.Wpf.WindowChrome.TitleHeight" /> is not explicitly set. When this
            property is used, area above <see cref="P:EO.Wpf.WindowChrome.TitleElement" />'s bottom edge is regarded as window
            title area.
            </remarks>
    </member>
    <member name="P:EO.Wpf.WindowChrome.FrameTemplate">
      <summary>
            The template to be applied on the whole window when glass is not supported by the
            current system.
            </summary>
      <remarks>
        <para>
            Use this template to create a border style for the window on system that does not 
            support glass (for example, on Windows 2003 system) or when glass effect has been 
            turned off.
            </para>
      </remarks>
    </member>
    <member name="M:EO.Wpf.WindowChrome.CreateChromedWindow">
      <summary>
            Dynamically creates a chromed window from code behind.
            </summary>
      <remarks>
            The <see cref="P:System.Windows.Controls.ContentControl.Content" /> of the <see cref="T:System.Windows.Window" /> is a <see cref="T:EO.Wpf.WindowChrome" /> object.
            You must add your window content as the content of the <see cref="T:EO.Wpf.WindowChrome" /> object.
            </remarks>
    </member>
    <member name="M:EO.Wpf.WindowChrome.Chromize(System.Windows.Window)">
      <summary>
            Add a <see cref="T:EO.Wpf.WindowChrome" /> control into the specified <see cref="T:System.Windows.Window" /> if it doesn't already have one.
            </summary>
      <param name="window">The <see cref="T:System.Windows.Window" /> to which a <see cref="T:EO.Wpf.WindowChrome" /> control to be added.</param>
      <returns>The newly added <see cref="T:EO.Wpf.WindowChrome" /> control if the <see cref="T:System.Windows.Window" /> doesn't already have one,
            or an existing <see cref="T:EO.Wpf.WindowChrome" /> control in the <see cref="T:System.Windows.Window" /> if one already exists.</returns>
    </member>
    <member name="T:EO.Wpf.YearPicker">
      <summary>
            Represents a drop down button to select year.
            </summary>
    </member>
    <member name="F:EO.Wpf.YearPicker.SelectedYearProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.YearPicker.SelectedYear" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.YearPicker.NextButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.YearPicker.NextButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.YearPicker.PreviousButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.YearPicker.PreviousButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.YearPicker.YearButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.YearPicker.YearButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.YearPicker.YearLinkButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.YearPicker.YearLinkButtonStyle" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.YearPicker.RowsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.YearPicker.Rows" /> dependency property.
            </summary>
    </member>
    <member name="F:EO.Wpf.YearPicker.ColumnsProperty">
      <summary>
            Identifies the <see cref="P:EO.Wpf.YearPicker.Columns" /> dependency property.
            </summary>
    </member>
    <member name="M:EO.Wpf.YearPicker.#cctor">
      <summary>
            Initializes static members of the <see cref="T:EO.Wpf.YearPicker" /> control.
            </summary>
    </member>
    <member name="M:EO.Wpf.YearPicker.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EO.Wpf.YearPicker" /> control.
            </summary>
    </member>
    <member name="P:EO.Wpf.YearPicker.Next">
      <summary>
            Gets a command that navigates forward the <see cref="T:EO.Wpf.YearPicker" />
            years drop down by one page.
            </summary>
    </member>
    <member name="P:EO.Wpf.YearPicker.Previous">
      <summary>
            Gets a command that navigates back the <see cref="T:EO.Wpf.YearPicker" />
            years drop down by one page.
            </summary>
    </member>
    <member name="P:EO.Wpf.YearPicker.NavigateTo">
      <summary>
            Gets a command that sets the <see cref="T:EO.Wpf.YearPicker" />'s
            <see cref="P:EO.Wpf.YearPicker.SelectedYear" /> to the year
            passed in the <see cref="P:System.Windows.Input.ICommandSource.CommandParameter" />
            property.
            </summary>
    </member>
    <member name="P:EO.Wpf.YearPicker.SelectedYear">
      <summary>
            Gets or sets the currently selected year. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.YearPicker.NextButtonStyle">
      <summary>
            Gets or sets the style applied to the Next button. This is a dependency property.
            </summary>
      <remarks>
        <para>
            The target type of this style is <see cref="T:EO.Wpf.Primitives.RepeatButton" />. The following sample
            demonstrates how to use this property:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:YearPicker&gt;
                &lt;eo:YearPicker.NextButtonStyle&gt;
                    &lt;Style TargetType="eo:RepeatButton"&gt;
                        &lt;Setter Property="Background" Value="Gray"&gt;&lt;/Setter&gt;
                    &lt;/Style&gt;
                &lt;/eo:YearPicker.NextButtonStyle&gt;
            &lt;/eo:YearPicker&gt;
            </code>
      </remarks>
    </member>
    <member name="P:EO.Wpf.YearPicker.PreviousButtonStyle">
      <summary>
            Gets or sets the style for the Previous button. This is a dependency property.
            </summary>
      <remarks>
        <para>
            The target type of this style is <see cref="T:EO.Wpf.Primitives.RepeatButton" />. The following sample
            demonstrates how to use this property:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:YearPicker&gt;
                &lt;eo:YearPicker.PreviousButtonStyle&gt;
                    &lt;Style TargetType="eo:RepeatButton"&gt;
                        &lt;Setter Property="Background" Value="Gray"&gt;&lt;/Setter&gt;
                    &lt;/Style&gt;
                &lt;/eo:YearPicker.PreviousButtonStyle&gt;
            &lt;/eo:YearPicker&gt;
            </code>
      </remarks>
    </member>
    <member name="P:EO.Wpf.YearPicker.YearButtonStyle">
      <summary>
            Gets or sets the styles for the year buttons. This is a dependency property.
            </summary>
      <remarks>
        <para>
            The target type of this style is <see cref="T:EO.Wpf.Button" />. The following sample
            demonstrates how to use this property:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:YearPicker&gt;
                &lt;eo:YearPicker.YearButtonStyle&gt;
                    &lt;Style TargetType="eo:Button"&gt;
                        &lt;Setter Property="Margin" Value="3"&gt;&lt;/Setter&gt;
                        &lt;Setter Property="Background" Value="White"&gt;&lt;/Setter&gt;
                    &lt;/Style&gt;
                &lt;/eo:YearPicker.YearButtonStyle&gt;
            &lt;/eo:YearPicker&gt;
            </code>
      </remarks>
    </member>
    <member name="P:EO.Wpf.YearPicker.YearLinkButtonStyle">
      <summary>
            Gets or sets the styles for the year link button that opens the drop down. This is a dependency property.
            </summary>
      <remarks>
        <para>
            The target type of this style is <see cref="T:EO.Wpf.LinkButton" />. The following code demonstrates how to use this feature:
            </para>
        <code lang="XML" title="XAML">
            &lt;eo:YearPicker&gt;
                &lt;eo:YearPicker.YearLinkButtonStyle&gt;
                    &lt;Style TargetType="eo:LinkButton"&gt;
                        &lt;Setter Property="TextStyle"&gt;
                            &lt;Setter.Value&gt;
                                &lt;Style TargetType="TextBlock"&gt;
                                    &lt;Setter Property="Foreground" Value="Blue"&gt;&lt;/Setter&gt;
                                &lt;/Style&gt;
                            &lt;/Setter.Value&gt;
                        &lt;/Setter&gt;
                        &lt;Setter Property="TextHoverStyle"&gt;
                            &lt;Setter.Value&gt;
                                &lt;Style TargetType="TextBlock"&gt;
                                    &lt;Setter Property="Foreground" Value="Yellow"&gt;&lt;/Setter&gt;
                                &lt;/Style&gt;
                            &lt;/Setter.Value&gt;
                        &lt;/Setter&gt;
                    &lt;/Style&gt;
                &lt;/eo:YearPicker.YearLinkButtonStyle&gt;
            &lt;/eo:YearPicker&gt;
            </code>
      </remarks>
    </member>
    <member name="P:EO.Wpf.YearPicker.Rows">
      <summary>
            Gets or sets the number of rows in the year drop down. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.YearPicker.Columns">
      <summary>
            Gets or sets the number of columns in the year drop down. This is a dependency property.
            </summary>
    </member>
    <member name="P:EO.Wpf.YearPicker.Years">
      <summary>
            Gets a collection of <see cref="T:System.Int32" /> values that represent
            all the years appearing in the drop down.
            </summary>
    </member>
  </members>
</doc>