// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace FrameWork {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GetAcctPropListReplyProto {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_login_proto_GetAcctPropListReply__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::FrameWork.GetAcctPropListReply, global::FrameWork.GetAcctPropListReply.Builder> internal__static_login_proto_GetAcctPropListReply__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_login_proto_GetAcctPropListReply_AcctProp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::FrameWork.GetAcctPropListReply.Types.AcctProp, global::FrameWork.GetAcctPropListReply.Types.AcctProp.Builder> internal__static_login_proto_GetAcctPropListReply_AcctProp__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GetAcctPropListReplyProto() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Ch53YXIvR2V0QWNjdFByb3BMaXN0UmVwbHkucHJvdG8SC2xvZ2luLnByb3Rv" + 
          "GiRnb29nbGUvcHJvdG9idWYvY3NoYXJwX29wdGlvbnMucHJvdG8ikAQKFEdl" + 
          "dEFjY3RQcm9wTGlzdFJlcGx5EkEKC3Jlc3VsdF9jb2RlGAEgAigOMiwubG9n" + 
          "aW4ucHJvdG8uR2V0QWNjdFByb3BMaXN0UmVwbHkuUmVzdWx0Q29kZRI9Cglw" + 
          "cm9wX2xpc3QYAiADKAsyKi5sb2dpbi5wcm90by5HZXRBY2N0UHJvcExpc3RS" + 
          "ZXBseS5BY2N0UHJvcBo3CghBY2N0UHJvcBITCgtwcm9wZXJ0eV9pZBgBIAIo" + 
          "DRIWCg5wcm9wZXJ0eV92YWx1ZRgCIAIoBSK8AgoKUmVzdWx0Q29kZRIPCgtS" + 
          "RVNfU1VDQ0VTUxAAEhwKGFJFU19QUk9UT0NPTF9VTlNVUFBPUlRFRBABEhsK" + 
          "F1JFU19QUk9EVUNUX1VOU1VQUE9SVEVEEAISGwoXUkVTX0FDQ09VTlRfQVVU" + 
          "SF9GQUlMRUQQAxIaChZSRVNfQUNDT1VOVF9URVJNSU5BVEVEEAQSFwoTUkVT" + 
          "X0FDQ09VTlRfRVhQSVJFRBAFEhkKFVJFU19BQ0NPVU5UX1NVU1BFTkRFRBAG" + 
          "EiUKIVJFU19BQ0NPVU5UX1NFQ09OREFSWV9BVVRIX05FRURFRBAHEh4KGlJF" + 
          "U19BQ0NPVU5UX0FMUkVBRFlfT05MSU5FEAgSFAoQUkVTX1NZU1RFTV9FUlJP" + 
          "UhAJEhgKFFJFU19FTkNSWVBUSU9OX0VSUk9SEApCKcI+JgoJRnJhbWVXb3Jr" + 
          "EhlHZXRBY2N0UHJvcExpc3RSZXBseVByb3Rv");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_login_proto_GetAcctPropListReply__Descriptor = Descriptor.MessageTypes[0];
        internal__static_login_proto_GetAcctPropListReply__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::FrameWork.GetAcctPropListReply, global::FrameWork.GetAcctPropListReply.Builder>(internal__static_login_proto_GetAcctPropListReply__Descriptor,
                new string[] { "ResultCode", "PropList", });
        internal__static_login_proto_GetAcctPropListReply_AcctProp__Descriptor = internal__static_login_proto_GetAcctPropListReply__Descriptor.NestedTypes[0];
        internal__static_login_proto_GetAcctPropListReply_AcctProp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::FrameWork.GetAcctPropListReply.Types.AcctProp, global::FrameWork.GetAcctPropListReply.Types.AcctProp.Builder>(internal__static_login_proto_GetAcctPropListReply_AcctProp__Descriptor,
                new string[] { "PropertyId", "PropertyValue", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetAcctPropListReply : pb::GeneratedMessage<GetAcctPropListReply, GetAcctPropListReply.Builder> {
    private GetAcctPropListReply() { }
    private static readonly GetAcctPropListReply defaultInstance = new GetAcctPropListReply().MakeReadOnly();
    private static readonly string[] _getAcctPropListReplyFieldNames = new string[] { "prop_list", "result_code" };
    private static readonly uint[] _getAcctPropListReplyFieldTags = new uint[] { 18, 8 };
    public static GetAcctPropListReply DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAcctPropListReply DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAcctPropListReply ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FrameWork.GetAcctPropListReplyProto.internal__static_login_proto_GetAcctPropListReply__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAcctPropListReply, GetAcctPropListReply.Builder> InternalFieldAccessors {
      get { return global::FrameWork.GetAcctPropListReplyProto.internal__static_login_proto_GetAcctPropListReply__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ResultCode {
        RES_SUCCESS = 0,
        RES_PROTOCOL_UNSUPPORTED = 1,
        RES_PRODUCT_UNSUPPORTED = 2,
        RES_ACCOUNT_AUTH_FAILED = 3,
        RES_ACCOUNT_TERMINATED = 4,
        RES_ACCOUNT_EXPIRED = 5,
        RES_ACCOUNT_SUSPENDED = 6,
        RES_ACCOUNT_SECONDARY_AUTH_NEEDED = 7,
        RES_ACCOUNT_ALREADY_ONLINE = 8,
        RES_SYSTEM_ERROR = 9,
        RES_ENCRYPTION_ERROR = 10,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class AcctProp : pb::GeneratedMessage<AcctProp, AcctProp.Builder> {
        private AcctProp() { }
        private static readonly AcctProp defaultInstance = new AcctProp().MakeReadOnly();
        private static readonly string[] _acctPropFieldNames = new string[] { "property_id", "property_value" };
        private static readonly uint[] _acctPropFieldTags = new uint[] { 8, 16 };
        public static AcctProp DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override AcctProp DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override AcctProp ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::FrameWork.GetAcctPropListReplyProto.internal__static_login_proto_GetAcctPropListReply_AcctProp__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<AcctProp, AcctProp.Builder> InternalFieldAccessors {
          get { return global::FrameWork.GetAcctPropListReplyProto.internal__static_login_proto_GetAcctPropListReply_AcctProp__FieldAccessorTable; }
        }
        
        public const int PropertyIdFieldNumber = 1;
        private bool hasPropertyId;
        private uint propertyId_;
        public bool HasPropertyId {
          get { return hasPropertyId; }
        }
        [global::System.CLSCompliant(false)]
        public uint PropertyId {
          get { return propertyId_; }
        }
        
        public const int PropertyValueFieldNumber = 2;
        private bool hasPropertyValue;
        private int propertyValue_;
        public bool HasPropertyValue {
          get { return hasPropertyValue; }
        }
        public int PropertyValue {
          get { return propertyValue_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasPropertyId) return false;
            if (!hasPropertyValue) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _acctPropFieldNames;
          if (hasPropertyId) {
            output.WriteUInt32(1, field_names[0], PropertyId);
          }
          if (hasPropertyValue) {
            output.WriteInt32(2, field_names[1], PropertyValue);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasPropertyId) {
              size += pb::CodedOutputStream.ComputeUInt32Size(1, PropertyId);
            }
            if (hasPropertyValue) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, PropertyValue);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static AcctProp ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AcctProp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AcctProp ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AcctProp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AcctProp ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AcctProp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AcctProp ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AcctProp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AcctProp ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AcctProp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AcctProp MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AcctProp prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AcctProp, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(AcctProp cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private AcctProp result;
          
          private AcctProp PrepareBuilder() {
            if (resultIsReadOnly) {
              AcctProp original = result;
              result = new AcctProp();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override AcctProp MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::FrameWork.GetAcctPropListReply.Types.AcctProp.Descriptor; }
          }
          
          public override AcctProp DefaultInstanceForType {
            get { return global::FrameWork.GetAcctPropListReply.Types.AcctProp.DefaultInstance; }
          }
          
          public override AcctProp BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is AcctProp) {
              return MergeFrom((AcctProp) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(AcctProp other) {
            if (other == global::FrameWork.GetAcctPropListReply.Types.AcctProp.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasPropertyId) {
              PropertyId = other.PropertyId;
            }
            if (other.HasPropertyValue) {
              PropertyValue = other.PropertyValue;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_acctPropFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _acctPropFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasPropertyId = input.ReadUInt32(ref result.propertyId_);
                  break;
                }
                case 16: {
                  result.hasPropertyValue = input.ReadInt32(ref result.propertyValue_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasPropertyId {
            get { return result.hasPropertyId; }
          }
          [global::System.CLSCompliant(false)]
          public uint PropertyId {
            get { return result.PropertyId; }
            set { SetPropertyId(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetPropertyId(uint value) {
            PrepareBuilder();
            result.hasPropertyId = true;
            result.propertyId_ = value;
            return this;
          }
          public Builder ClearPropertyId() {
            PrepareBuilder();
            result.hasPropertyId = false;
            result.propertyId_ = 0;
            return this;
          }
          
          public bool HasPropertyValue {
            get { return result.hasPropertyValue; }
          }
          public int PropertyValue {
            get { return result.PropertyValue; }
            set { SetPropertyValue(value); }
          }
          public Builder SetPropertyValue(int value) {
            PrepareBuilder();
            result.hasPropertyValue = true;
            result.propertyValue_ = value;
            return this;
          }
          public Builder ClearPropertyValue() {
            PrepareBuilder();
            result.hasPropertyValue = false;
            result.propertyValue_ = 0;
            return this;
          }
        }
        static AcctProp() {
          object.ReferenceEquals(global::FrameWork.GetAcctPropListReplyProto.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int ResultCodeFieldNumber = 1;
    private bool hasResultCode;
    private global::FrameWork.GetAcctPropListReply.Types.ResultCode resultCode_ = global::FrameWork.GetAcctPropListReply.Types.ResultCode.RES_SUCCESS;
    public bool HasResultCode {
      get { return hasResultCode; }
    }
    public global::FrameWork.GetAcctPropListReply.Types.ResultCode ResultCode {
      get { return resultCode_; }
    }
    
    public const int PropListFieldNumber = 2;
    private pbc::PopsicleList<global::FrameWork.GetAcctPropListReply.Types.AcctProp> propList_ = new pbc::PopsicleList<global::FrameWork.GetAcctPropListReply.Types.AcctProp>();
    public scg::IList<global::FrameWork.GetAcctPropListReply.Types.AcctProp> PropListList {
      get { return propList_; }
    }
    public int PropListCount {
      get { return propList_.Count; }
    }
    public global::FrameWork.GetAcctPropListReply.Types.AcctProp GetPropList(int index) {
      return propList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResultCode) return false;
        foreach (global::FrameWork.GetAcctPropListReply.Types.AcctProp element in PropListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getAcctPropListReplyFieldNames;
      if (hasResultCode) {
        output.WriteEnum(1, field_names[1], (int) ResultCode, ResultCode);
      }
      if (propList_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], propList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasResultCode) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ResultCode);
        }
        foreach (global::FrameWork.GetAcctPropListReply.Types.AcctProp element in PropListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetAcctPropListReply ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAcctPropListReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAcctPropListReply ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAcctPropListReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAcctPropListReply ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAcctPropListReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAcctPropListReply ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAcctPropListReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAcctPropListReply ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAcctPropListReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAcctPropListReply MakeReadOnly() {
      propList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAcctPropListReply prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAcctPropListReply, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAcctPropListReply cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAcctPropListReply result;
      
      private GetAcctPropListReply PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAcctPropListReply original = result;
          result = new GetAcctPropListReply();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAcctPropListReply MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FrameWork.GetAcctPropListReply.Descriptor; }
      }
      
      public override GetAcctPropListReply DefaultInstanceForType {
        get { return global::FrameWork.GetAcctPropListReply.DefaultInstance; }
      }
      
      public override GetAcctPropListReply BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAcctPropListReply) {
          return MergeFrom((GetAcctPropListReply) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAcctPropListReply other) {
        if (other == global::FrameWork.GetAcctPropListReply.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResultCode) {
          ResultCode = other.ResultCode;
        }
        if (other.propList_.Count != 0) {
          result.propList_.Add(other.propList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAcctPropListReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAcctPropListReplyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.resultCode_, out unknown)) {
                result.hasResultCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.propList_, global::FrameWork.GetAcctPropListReply.Types.AcctProp.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResultCode {
       get { return result.hasResultCode; }
      }
      public global::FrameWork.GetAcctPropListReply.Types.ResultCode ResultCode {
        get { return result.ResultCode; }
        set { SetResultCode(value); }
      }
      public Builder SetResultCode(global::FrameWork.GetAcctPropListReply.Types.ResultCode value) {
        PrepareBuilder();
        result.hasResultCode = true;
        result.resultCode_ = value;
        return this;
      }
      public Builder ClearResultCode() {
        PrepareBuilder();
        result.hasResultCode = false;
        result.resultCode_ = global::FrameWork.GetAcctPropListReply.Types.ResultCode.RES_SUCCESS;
        return this;
      }
      
      public pbc::IPopsicleList<global::FrameWork.GetAcctPropListReply.Types.AcctProp> PropListList {
        get { return PrepareBuilder().propList_; }
      }
      public int PropListCount {
        get { return result.PropListCount; }
      }
      public global::FrameWork.GetAcctPropListReply.Types.AcctProp GetPropList(int index) {
        return result.GetPropList(index);
      }
      public Builder SetPropList(int index, global::FrameWork.GetAcctPropListReply.Types.AcctProp value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.propList_[index] = value;
        return this;
      }
      public Builder SetPropList(int index, global::FrameWork.GetAcctPropListReply.Types.AcctProp.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.propList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPropList(global::FrameWork.GetAcctPropListReply.Types.AcctProp value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.propList_.Add(value);
        return this;
      }
      public Builder AddPropList(global::FrameWork.GetAcctPropListReply.Types.AcctProp.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.propList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePropList(scg::IEnumerable<global::FrameWork.GetAcctPropListReply.Types.AcctProp> values) {
        PrepareBuilder();
        result.propList_.Add(values);
        return this;
      }
      public Builder ClearPropList() {
        PrepareBuilder();
        result.propList_.Clear();
        return this;
      }
    }
    static GetAcctPropListReply() {
      object.ReferenceEquals(global::FrameWork.GetAcctPropListReplyProto.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
