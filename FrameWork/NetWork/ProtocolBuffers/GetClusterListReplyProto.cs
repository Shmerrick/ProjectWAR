// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace FrameWork {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GetClusterListReplyProto {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_login_proto_ServerInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::FrameWork.ServerInfo, global::FrameWork.ServerInfo.Builder> internal__static_login_proto_ServerInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_login_proto_ClusterProp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::FrameWork.ClusterProp, global::FrameWork.ClusterProp.Builder> internal__static_login_proto_ClusterProp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_login_proto_ClusterInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::FrameWork.ClusterInfo, global::FrameWork.ClusterInfo.Builder> internal__static_login_proto_ClusterInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_login_proto_GetClusterListReply__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::FrameWork.GetClusterListReply, global::FrameWork.GetClusterListReply.Builder> internal__static_login_proto_GetClusterListReply__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GetClusterListReplyProto() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Ch13YXIvR2V0Q2x1c3Rlckxpc3RSZXBseS5wcm90bxILbG9naW4ucHJvdG8a" + 
          "JGdvb2dsZS9wcm90b2J1Zi9jc2hhcnBfb3B0aW9ucy5wcm90byI0CgpTZXJ2" + 
          "ZXJJbmZvEhEKCXNlcnZlcl9pZBgBIAIoDRITCgtzZXJ2ZXJfbmFtZRgCIAIo" + 
          "CSI0CgtDbHVzdGVyUHJvcBIRCglwcm9wX25hbWUYASACKAkSEgoKcHJvcF92" + 
          "YWx1ZRgCIAIoCSLwAgoLQ2x1c3RlckluZm8SEgoKY2x1c3Rlcl9pZBgBIAIo" + 
          "DRIUCgxjbHVzdGVyX25hbWUYAiACKAkSEgoKbG9iYnlfaG9zdBgDIAEoCRIS" + 
          "Cgpsb2JieV9wb3J0GAQgASgNEhMKC2NsdXN0ZXJfcG9wGAUgASgNEhcKD21h" + 
          "eF9jbHVzdGVyX3BvcBgGIAEoDRI5ChJjbHVzdGVyX3BvcF9zdGF0dXMYByAB" + 
          "KA4yHS5sb2dpbi5wcm90by5DbHVzdGVyUG9wU3RhdHVzEhMKC2xhbmd1YWdl" + 
          "X2lkGAggAigNEjIKDmNsdXN0ZXJfc3RhdHVzGAkgAigOMhoubG9naW4ucHJv" + 
          "dG8uQ2x1c3RlclN0YXR1cxIsCgtzZXJ2ZXJfbGlzdBgKIAMoCzIXLmxvZ2lu" + 
          "LnByb3RvLlNlcnZlckluZm8SLwoNcHJvcGVydHlfbGlzdBgLIAMoCzIYLmxv" + 
          "Z2luLnByb3RvLkNsdXN0ZXJQcm9wInMKE0dldENsdXN0ZXJMaXN0UmVwbHkS" + 
          "LAoLcmVzdWx0X2NvZGUYASACKA4yFy5sb2dpbi5wcm90by5SZXN1bHRDb2Rl" + 
          "Ei4KDGNsdXN0ZXJfbGlzdBgCIAMoCzIYLmxvZ2luLnByb3RvLkNsdXN0ZXJJ" + 
          "bmZvKlkKEENsdXN0ZXJQb3BTdGF0dXMSDwoLUE9QX1VOS05PV04QABILCgdQ" + 
          "T1BfTE9XEAESCwoHUE9QX01FRBACEgwKCFBPUF9ISUdIEAMSDAoIUE9QX0ZV" + 
          "TEwQBCqJAQoNQ2x1c3RlclN0YXR1cxIRCg1TVEFUVVNfT05MSU5FEAESEgoO" + 
          "U1RBVFVTX09GRkxJTkUQAhIaChZTVEFUVVNfSU5WSVRFX1JFUVVJUkVEEAMS" + 
          "IgoeU1RBVFVTX0lOU1VGRklDSUVOVF9QUklWSUxFR0VTEAQSEQoNU1RBVFVT" + 
          "X0JBTk5FRBAFKrwCCgpSZXN1bHRDb2RlEg8KC1JFU19TVUNDRVNTEAASHAoY" + 
          "UkVTX1BST1RPQ09MX1VOU1VQUE9SVEVEEAESGwoXUkVTX1BST0RVQ1RfVU5T" + 
          "VVBQT1JURUQQAhIbChdSRVNfQUNDT1VOVF9BVVRIX0ZBSUxFRBADEhoKFlJF" + 
          "U19BQ0NPVU5UX1RFUk1JTkFURUQQBBIXChNSRVNfQUNDT1VOVF9FWFBJUkVE" + 
          "EAUSGQoVUkVTX0FDQ09VTlRfU1VTUEVOREVEEAYSJQohUkVTX0FDQ09VTlRf" + 
          "U0VDT05EQVJZX0FVVEhfTkVFREVEEAcSHgoaUkVTX0FDQ09VTlRfQUxSRUFE" + 
          "WV9PTkxJTkUQCBIUChBSRVNfU1lTVEVNX0VSUk9SEAkSGAoUUkVTX0VOQ1JZ" + 
          "UFRJT05fRVJST1IQCkIowj4lCglGcmFtZVdvcmsSGEdldENsdXN0ZXJMaXN0" + 
          "UmVwbHlQcm90bw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_login_proto_ServerInfo__Descriptor = Descriptor.MessageTypes[0];
        internal__static_login_proto_ServerInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::FrameWork.ServerInfo, global::FrameWork.ServerInfo.Builder>(internal__static_login_proto_ServerInfo__Descriptor,
                new string[] { "ServerId", "ServerName", });
        internal__static_login_proto_ClusterProp__Descriptor = Descriptor.MessageTypes[1];
        internal__static_login_proto_ClusterProp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::FrameWork.ClusterProp, global::FrameWork.ClusterProp.Builder>(internal__static_login_proto_ClusterProp__Descriptor,
                new string[] { "PropName", "PropValue", });
        internal__static_login_proto_ClusterInfo__Descriptor = Descriptor.MessageTypes[2];
        internal__static_login_proto_ClusterInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::FrameWork.ClusterInfo, global::FrameWork.ClusterInfo.Builder>(internal__static_login_proto_ClusterInfo__Descriptor,
                new string[] { "ClusterId", "ClusterName", "LobbyHost", "LobbyPort", "ClusterPop", "MaxClusterPop", "ClusterPopStatus", "LanguageId", "ClusterStatus", "ServerList", "PropertyList", });
        internal__static_login_proto_GetClusterListReply__Descriptor = Descriptor.MessageTypes[3];
        internal__static_login_proto_GetClusterListReply__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::FrameWork.GetClusterListReply, global::FrameWork.GetClusterListReply.Builder>(internal__static_login_proto_GetClusterListReply__Descriptor,
                new string[] { "ResultCode", "ClusterList", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum ClusterPopStatus {
    POP_UNKNOWN = 0,
    POP_LOW = 1,
    POP_MED = 2,
    POP_HIGH = 3,
    POP_FULL = 4,
  }
  
  public enum ClusterStatus {
    STATUS_ONLINE = 1,
    STATUS_OFFLINE = 2,
    STATUS_INVITE_REQUIRED = 3,
    STATUS_INSUFFICIENT_PRIVILEGES = 4,
    STATUS_BANNED = 5,
  }
  
  public enum ResultCode {
    RES_SUCCESS = 0,
    RES_PROTOCOL_UNSUPPORTED = 1,
    RES_PRODUCT_UNSUPPORTED = 2,
    RES_ACCOUNT_AUTH_FAILED = 3,
    RES_ACCOUNT_TERMINATED = 4,
    RES_ACCOUNT_EXPIRED = 5,
    RES_ACCOUNT_SUSPENDED = 6,
    RES_ACCOUNT_SECONDARY_AUTH_NEEDED = 7,
    RES_ACCOUNT_ALREADY_ONLINE = 8,
    RES_SYSTEM_ERROR = 9,
    RES_ENCRYPTION_ERROR = 10,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServerInfo : pb::GeneratedMessage<ServerInfo, ServerInfo.Builder> {
    private ServerInfo() { }
    private static readonly ServerInfo defaultInstance = new ServerInfo().MakeReadOnly();
    private static readonly string[] _serverInfoFieldNames = new string[] { "server_id", "server_name" };
    private static readonly uint[] _serverInfoFieldTags = new uint[] { 8, 18 };
    public static ServerInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FrameWork.GetClusterListReplyProto.internal__static_login_proto_ServerInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerInfo, ServerInfo.Builder> InternalFieldAccessors {
      get { return global::FrameWork.GetClusterListReplyProto.internal__static_login_proto_ServerInfo__FieldAccessorTable; }
    }
    
    public const int ServerIdFieldNumber = 1;
    private bool hasServerId;
    private uint serverId_;
    public bool HasServerId {
      get { return hasServerId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ServerId {
      get { return serverId_; }
    }
    
    public const int ServerNameFieldNumber = 2;
    private bool hasServerName;
    private string serverName_ = "";
    public bool HasServerName {
      get { return hasServerName; }
    }
    public string ServerName {
      get { return serverName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServerId) return false;
        if (!hasServerName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverInfoFieldNames;
      if (hasServerId) {
        output.WriteUInt32(1, field_names[0], ServerId);
      }
      if (hasServerName) {
        output.WriteString(2, field_names[1], ServerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServerId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ServerId);
        }
        if (hasServerName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ServerName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerInfo result;
      
      private ServerInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerInfo original = result;
          result = new ServerInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FrameWork.ServerInfo.Descriptor; }
      }
      
      public override ServerInfo DefaultInstanceForType {
        get { return global::FrameWork.ServerInfo.DefaultInstance; }
      }
      
      public override ServerInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerInfo) {
          return MergeFrom((ServerInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerInfo other) {
        if (other == global::FrameWork.ServerInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerId) {
          ServerId = other.ServerId;
        }
        if (other.HasServerName) {
          ServerName = other.ServerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasServerId = input.ReadUInt32(ref result.serverId_);
              break;
            }
            case 18: {
              result.hasServerName = input.ReadString(ref result.serverName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerId {
        get { return result.hasServerId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ServerId {
        get { return result.ServerId; }
        set { SetServerId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetServerId(uint value) {
        PrepareBuilder();
        result.hasServerId = true;
        result.serverId_ = value;
        return this;
      }
      public Builder ClearServerId() {
        PrepareBuilder();
        result.hasServerId = false;
        result.serverId_ = 0;
        return this;
      }
      
      public bool HasServerName {
        get { return result.hasServerName; }
      }
      public string ServerName {
        get { return result.ServerName; }
        set { SetServerName(value); }
      }
      public Builder SetServerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerName = true;
        result.serverName_ = value;
        return this;
      }
      public Builder ClearServerName() {
        PrepareBuilder();
        result.hasServerName = false;
        result.serverName_ = "";
        return this;
      }
    }
    static ServerInfo() {
      object.ReferenceEquals(global::FrameWork.GetClusterListReplyProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClusterProp : pb::GeneratedMessage<ClusterProp, ClusterProp.Builder> {
    private ClusterProp() { }
    private static readonly ClusterProp defaultInstance = new ClusterProp().MakeReadOnly();
    private static readonly string[] _clusterPropFieldNames = new string[] { "prop_name", "prop_value" };
    private static readonly uint[] _clusterPropFieldTags = new uint[] { 10, 18 };
    public static ClusterProp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClusterProp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClusterProp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FrameWork.GetClusterListReplyProto.internal__static_login_proto_ClusterProp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClusterProp, ClusterProp.Builder> InternalFieldAccessors {
      get { return global::FrameWork.GetClusterListReplyProto.internal__static_login_proto_ClusterProp__FieldAccessorTable; }
    }
    
    public const int PropNameFieldNumber = 1;
    private bool hasPropName;
    private string propName_ = "";
    public bool HasPropName {
      get { return hasPropName; }
    }
    public string PropName {
      get { return propName_; }
    }
    
    public const int PropValueFieldNumber = 2;
    private bool hasPropValue;
    private string propValue_ = "";
    public bool HasPropValue {
      get { return hasPropValue; }
    }
    public string PropValue {
      get { return propValue_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPropName) return false;
        if (!hasPropValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clusterPropFieldNames;
      if (hasPropName) {
        output.WriteString(1, field_names[0], PropName);
      }
      if (hasPropValue) {
        output.WriteString(2, field_names[1], PropValue);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPropName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PropName);
        }
        if (hasPropValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, PropValue);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClusterProp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClusterProp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClusterProp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClusterProp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClusterProp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClusterProp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClusterProp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClusterProp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClusterProp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClusterProp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClusterProp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClusterProp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ClusterProp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClusterProp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClusterProp result;
      
      private ClusterProp PrepareBuilder() {
        if (resultIsReadOnly) {
          ClusterProp original = result;
          result = new ClusterProp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClusterProp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FrameWork.ClusterProp.Descriptor; }
      }
      
      public override ClusterProp DefaultInstanceForType {
        get { return global::FrameWork.ClusterProp.DefaultInstance; }
      }
      
      public override ClusterProp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClusterProp) {
          return MergeFrom((ClusterProp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClusterProp other) {
        if (other == global::FrameWork.ClusterProp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPropName) {
          PropName = other.PropName;
        }
        if (other.HasPropValue) {
          PropValue = other.PropValue;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clusterPropFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clusterPropFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPropName = input.ReadString(ref result.propName_);
              break;
            }
            case 18: {
              result.hasPropValue = input.ReadString(ref result.propValue_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPropName {
        get { return result.hasPropName; }
      }
      public string PropName {
        get { return result.PropName; }
        set { SetPropName(value); }
      }
      public Builder SetPropName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPropName = true;
        result.propName_ = value;
        return this;
      }
      public Builder ClearPropName() {
        PrepareBuilder();
        result.hasPropName = false;
        result.propName_ = "";
        return this;
      }
      
      public bool HasPropValue {
        get { return result.hasPropValue; }
      }
      public string PropValue {
        get { return result.PropValue; }
        set { SetPropValue(value); }
      }
      public Builder SetPropValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPropValue = true;
        result.propValue_ = value;
        return this;
      }
      public Builder ClearPropValue() {
        PrepareBuilder();
        result.hasPropValue = false;
        result.propValue_ = "";
        return this;
      }
    }
    static ClusterProp() {
      object.ReferenceEquals(global::FrameWork.GetClusterListReplyProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClusterInfo : pb::GeneratedMessage<ClusterInfo, ClusterInfo.Builder> {
    private ClusterInfo() { }
    private static readonly ClusterInfo defaultInstance = new ClusterInfo().MakeReadOnly();
    private static readonly string[] _clusterInfoFieldNames = new string[] { "cluster_id", "cluster_name", "cluster_pop", "cluster_pop_status", "cluster_status", "language_id", "lobby_host", "lobby_port", "max_cluster_pop", "property_list", "server_list" };
    private static readonly uint[] _clusterInfoFieldTags = new uint[] { 8, 18, 40, 56, 72, 64, 26, 32, 48, 90, 82 };
    public static ClusterInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClusterInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClusterInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FrameWork.GetClusterListReplyProto.internal__static_login_proto_ClusterInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClusterInfo, ClusterInfo.Builder> InternalFieldAccessors {
      get { return global::FrameWork.GetClusterListReplyProto.internal__static_login_proto_ClusterInfo__FieldAccessorTable; }
    }
    
    public const int ClusterIdFieldNumber = 1;
    private bool hasClusterId;
    private uint clusterId_;
    public bool HasClusterId {
      get { return hasClusterId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClusterId {
      get { return clusterId_; }
    }
    
    public const int ClusterNameFieldNumber = 2;
    private bool hasClusterName;
    private string clusterName_ = "";
    public bool HasClusterName {
      get { return hasClusterName; }
    }
    public string ClusterName {
      get { return clusterName_; }
    }
    
    public const int LobbyHostFieldNumber = 3;
    private bool hasLobbyHost;
    private string lobbyHost_ = "";
    public bool HasLobbyHost {
      get { return hasLobbyHost; }
    }
    public string LobbyHost {
      get { return lobbyHost_; }
    }
    
    public const int LobbyPortFieldNumber = 4;
    private bool hasLobbyPort;
    private uint lobbyPort_;
    public bool HasLobbyPort {
      get { return hasLobbyPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint LobbyPort {
      get { return lobbyPort_; }
    }
    
    public const int ClusterPopFieldNumber = 5;
    private bool hasClusterPop;
    private uint clusterPop_;
    public bool HasClusterPop {
      get { return hasClusterPop; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClusterPop {
      get { return clusterPop_; }
    }
    
    public const int MaxClusterPopFieldNumber = 6;
    private bool hasMaxClusterPop;
    private uint maxClusterPop_;
    public bool HasMaxClusterPop {
      get { return hasMaxClusterPop; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxClusterPop {
      get { return maxClusterPop_; }
    }
    
    public const int ClusterPopStatusFieldNumber = 7;
    private bool hasClusterPopStatus;
    private global::FrameWork.ClusterPopStatus clusterPopStatus_ = global::FrameWork.ClusterPopStatus.POP_UNKNOWN;
    public bool HasClusterPopStatus {
      get { return hasClusterPopStatus; }
    }
    public global::FrameWork.ClusterPopStatus ClusterPopStatus {
      get { return clusterPopStatus_; }
    }
    
    public const int LanguageIdFieldNumber = 8;
    private bool hasLanguageId;
    private uint languageId_;
    public bool HasLanguageId {
      get { return hasLanguageId; }
    }
    [global::System.CLSCompliant(false)]
    public uint LanguageId {
      get { return languageId_; }
    }
    
    public const int ClusterStatusFieldNumber = 9;
    private bool hasClusterStatus;
    private global::FrameWork.ClusterStatus clusterStatus_ = global::FrameWork.ClusterStatus.STATUS_ONLINE;
    public bool HasClusterStatus {
      get { return hasClusterStatus; }
    }
    public global::FrameWork.ClusterStatus ClusterStatus {
      get { return clusterStatus_; }
    }
    
    public const int ServerListFieldNumber = 10;
    private pbc::PopsicleList<global::FrameWork.ServerInfo> serverList_ = new pbc::PopsicleList<global::FrameWork.ServerInfo>();
    public scg::IList<global::FrameWork.ServerInfo> ServerListList {
      get { return serverList_; }
    }
    public int ServerListCount {
      get { return serverList_.Count; }
    }
    public global::FrameWork.ServerInfo GetServerList(int index) {
      return serverList_[index];
    }
    
    public const int PropertyListFieldNumber = 11;
    private pbc::PopsicleList<global::FrameWork.ClusterProp> propertyList_ = new pbc::PopsicleList<global::FrameWork.ClusterProp>();
    public scg::IList<global::FrameWork.ClusterProp> PropertyListList {
      get { return propertyList_; }
    }
    public int PropertyListCount {
      get { return propertyList_.Count; }
    }
    public global::FrameWork.ClusterProp GetPropertyList(int index) {
      return propertyList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClusterId) return false;
        if (!hasClusterName) return false;
        if (!hasLanguageId) return false;
        if (!hasClusterStatus) return false;
        foreach (global::FrameWork.ServerInfo element in ServerListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::FrameWork.ClusterProp element in PropertyListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clusterInfoFieldNames;
      if (hasClusterId) {
        output.WriteUInt32(1, field_names[0], ClusterId);
      }
      if (hasClusterName) {
        output.WriteString(2, field_names[1], ClusterName);
      }
      if (hasLobbyHost) {
        output.WriteString(3, field_names[6], LobbyHost);
      }
      if (hasLobbyPort) {
        output.WriteUInt32(4, field_names[7], LobbyPort);
      }
      if (hasClusterPop) {
        output.WriteUInt32(5, field_names[2], ClusterPop);
      }
      if (hasMaxClusterPop) {
        output.WriteUInt32(6, field_names[8], MaxClusterPop);
      }
      if (hasClusterPopStatus) {
        output.WriteEnum(7, field_names[3], (int) ClusterPopStatus, ClusterPopStatus);
      }
      if (hasLanguageId) {
        output.WriteUInt32(8, field_names[5], LanguageId);
      }
      if (hasClusterStatus) {
        output.WriteEnum(9, field_names[4], (int) ClusterStatus, ClusterStatus);
      }
      if (serverList_.Count > 0) {
        output.WriteMessageArray(10, field_names[10], serverList_);
      }
      if (propertyList_.Count > 0) {
        output.WriteMessageArray(11, field_names[9], propertyList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClusterId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ClusterId);
        }
        if (hasClusterName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ClusterName);
        }
        if (hasLobbyHost) {
          size += pb::CodedOutputStream.ComputeStringSize(3, LobbyHost);
        }
        if (hasLobbyPort) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, LobbyPort);
        }
        if (hasClusterPop) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, ClusterPop);
        }
        if (hasMaxClusterPop) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, MaxClusterPop);
        }
        if (hasClusterPopStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(7, (int) ClusterPopStatus);
        }
        if (hasLanguageId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, LanguageId);
        }
        if (hasClusterStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(9, (int) ClusterStatus);
        }
        foreach (global::FrameWork.ServerInfo element in ServerListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        foreach (global::FrameWork.ClusterProp element in PropertyListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClusterInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClusterInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClusterInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClusterInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClusterInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClusterInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClusterInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClusterInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClusterInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClusterInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClusterInfo MakeReadOnly() {
      serverList_.MakeReadOnly();
      propertyList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClusterInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ClusterInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClusterInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClusterInfo result;
      
      private ClusterInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ClusterInfo original = result;
          result = new ClusterInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClusterInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FrameWork.ClusterInfo.Descriptor; }
      }
      
      public override ClusterInfo DefaultInstanceForType {
        get { return global::FrameWork.ClusterInfo.DefaultInstance; }
      }
      
      public override ClusterInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClusterInfo) {
          return MergeFrom((ClusterInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClusterInfo other) {
        if (other == global::FrameWork.ClusterInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClusterId) {
          ClusterId = other.ClusterId;
        }
        if (other.HasClusterName) {
          ClusterName = other.ClusterName;
        }
        if (other.HasLobbyHost) {
          LobbyHost = other.LobbyHost;
        }
        if (other.HasLobbyPort) {
          LobbyPort = other.LobbyPort;
        }
        if (other.HasClusterPop) {
          ClusterPop = other.ClusterPop;
        }
        if (other.HasMaxClusterPop) {
          MaxClusterPop = other.MaxClusterPop;
        }
        if (other.HasClusterPopStatus) {
          ClusterPopStatus = other.ClusterPopStatus;
        }
        if (other.HasLanguageId) {
          LanguageId = other.LanguageId;
        }
        if (other.HasClusterStatus) {
          ClusterStatus = other.ClusterStatus;
        }
        if (other.serverList_.Count != 0) {
          result.serverList_.Add(other.serverList_);
        }
        if (other.propertyList_.Count != 0) {
          result.propertyList_.Add(other.propertyList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clusterInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clusterInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClusterId = input.ReadUInt32(ref result.clusterId_);
              break;
            }
            case 18: {
              result.hasClusterName = input.ReadString(ref result.clusterName_);
              break;
            }
            case 26: {
              result.hasLobbyHost = input.ReadString(ref result.lobbyHost_);
              break;
            }
            case 32: {
              result.hasLobbyPort = input.ReadUInt32(ref result.lobbyPort_);
              break;
            }
            case 40: {
              result.hasClusterPop = input.ReadUInt32(ref result.clusterPop_);
              break;
            }
            case 48: {
              result.hasMaxClusterPop = input.ReadUInt32(ref result.maxClusterPop_);
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.clusterPopStatus_, out unknown)) {
                result.hasClusterPopStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
            case 64: {
              result.hasLanguageId = input.ReadUInt32(ref result.languageId_);
              break;
            }
            case 72: {
              object unknown;
              if(input.ReadEnum(ref result.clusterStatus_, out unknown)) {
                result.hasClusterStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(9, (ulong)(int)unknown);
              }
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.serverList_, global::FrameWork.ServerInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.propertyList_, global::FrameWork.ClusterProp.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClusterId {
        get { return result.hasClusterId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClusterId {
        get { return result.ClusterId; }
        set { SetClusterId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClusterId(uint value) {
        PrepareBuilder();
        result.hasClusterId = true;
        result.clusterId_ = value;
        return this;
      }
      public Builder ClearClusterId() {
        PrepareBuilder();
        result.hasClusterId = false;
        result.clusterId_ = 0;
        return this;
      }
      
      public bool HasClusterName {
        get { return result.hasClusterName; }
      }
      public string ClusterName {
        get { return result.ClusterName; }
        set { SetClusterName(value); }
      }
      public Builder SetClusterName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClusterName = true;
        result.clusterName_ = value;
        return this;
      }
      public Builder ClearClusterName() {
        PrepareBuilder();
        result.hasClusterName = false;
        result.clusterName_ = "";
        return this;
      }
      
      public bool HasLobbyHost {
        get { return result.hasLobbyHost; }
      }
      public string LobbyHost {
        get { return result.LobbyHost; }
        set { SetLobbyHost(value); }
      }
      public Builder SetLobbyHost(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLobbyHost = true;
        result.lobbyHost_ = value;
        return this;
      }
      public Builder ClearLobbyHost() {
        PrepareBuilder();
        result.hasLobbyHost = false;
        result.lobbyHost_ = "";
        return this;
      }
      
      public bool HasLobbyPort {
        get { return result.hasLobbyPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint LobbyPort {
        get { return result.LobbyPort; }
        set { SetLobbyPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLobbyPort(uint value) {
        PrepareBuilder();
        result.hasLobbyPort = true;
        result.lobbyPort_ = value;
        return this;
      }
      public Builder ClearLobbyPort() {
        PrepareBuilder();
        result.hasLobbyPort = false;
        result.lobbyPort_ = 0;
        return this;
      }
      
      public bool HasClusterPop {
        get { return result.hasClusterPop; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClusterPop {
        get { return result.ClusterPop; }
        set { SetClusterPop(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClusterPop(uint value) {
        PrepareBuilder();
        result.hasClusterPop = true;
        result.clusterPop_ = value;
        return this;
      }
      public Builder ClearClusterPop() {
        PrepareBuilder();
        result.hasClusterPop = false;
        result.clusterPop_ = 0;
        return this;
      }
      
      public bool HasMaxClusterPop {
        get { return result.hasMaxClusterPop; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxClusterPop {
        get { return result.MaxClusterPop; }
        set { SetMaxClusterPop(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxClusterPop(uint value) {
        PrepareBuilder();
        result.hasMaxClusterPop = true;
        result.maxClusterPop_ = value;
        return this;
      }
      public Builder ClearMaxClusterPop() {
        PrepareBuilder();
        result.hasMaxClusterPop = false;
        result.maxClusterPop_ = 0;
        return this;
      }
      
      public bool HasClusterPopStatus {
       get { return result.hasClusterPopStatus; }
      }
      public global::FrameWork.ClusterPopStatus ClusterPopStatus {
        get { return result.ClusterPopStatus; }
        set { SetClusterPopStatus(value); }
      }
      public Builder SetClusterPopStatus(global::FrameWork.ClusterPopStatus value) {
        PrepareBuilder();
        result.hasClusterPopStatus = true;
        result.clusterPopStatus_ = value;
        return this;
      }
      public Builder ClearClusterPopStatus() {
        PrepareBuilder();
        result.hasClusterPopStatus = false;
        result.clusterPopStatus_ = global::FrameWork.ClusterPopStatus.POP_UNKNOWN;
        return this;
      }
      
      public bool HasLanguageId {
        get { return result.hasLanguageId; }
      }
      [global::System.CLSCompliant(false)]
      public uint LanguageId {
        get { return result.LanguageId; }
        set { SetLanguageId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLanguageId(uint value) {
        PrepareBuilder();
        result.hasLanguageId = true;
        result.languageId_ = value;
        return this;
      }
      public Builder ClearLanguageId() {
        PrepareBuilder();
        result.hasLanguageId = false;
        result.languageId_ = 0;
        return this;
      }
      
      public bool HasClusterStatus {
       get { return result.hasClusterStatus; }
      }
      public global::FrameWork.ClusterStatus ClusterStatus {
        get { return result.ClusterStatus; }
        set { SetClusterStatus(value); }
      }
      public Builder SetClusterStatus(global::FrameWork.ClusterStatus value) {
        PrepareBuilder();
        result.hasClusterStatus = true;
        result.clusterStatus_ = value;
        return this;
      }
      public Builder ClearClusterStatus() {
        PrepareBuilder();
        result.hasClusterStatus = false;
        result.clusterStatus_ = global::FrameWork.ClusterStatus.STATUS_ONLINE;
        return this;
      }
      
      public pbc::IPopsicleList<global::FrameWork.ServerInfo> ServerListList {
        get { return PrepareBuilder().serverList_; }
      }
      public int ServerListCount {
        get { return result.ServerListCount; }
      }
      public global::FrameWork.ServerInfo GetServerList(int index) {
        return result.GetServerList(index);
      }
      public Builder SetServerList(int index, global::FrameWork.ServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.serverList_[index] = value;
        return this;
      }
      public Builder SetServerList(int index, global::FrameWork.ServerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.serverList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddServerList(global::FrameWork.ServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.serverList_.Add(value);
        return this;
      }
      public Builder AddServerList(global::FrameWork.ServerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.serverList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeServerList(scg::IEnumerable<global::FrameWork.ServerInfo> values) {
        PrepareBuilder();
        result.serverList_.Add(values);
        return this;
      }
      public Builder ClearServerList() {
        PrepareBuilder();
        result.serverList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::FrameWork.ClusterProp> PropertyListList {
        get { return PrepareBuilder().propertyList_; }
      }
      public int PropertyListCount {
        get { return result.PropertyListCount; }
      }
      public global::FrameWork.ClusterProp GetPropertyList(int index) {
        return result.GetPropertyList(index);
      }
      public Builder SetPropertyList(int index, global::FrameWork.ClusterProp value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.propertyList_[index] = value;
        return this;
      }
      public Builder SetPropertyList(int index, global::FrameWork.ClusterProp.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.propertyList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPropertyList(global::FrameWork.ClusterProp value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.propertyList_.Add(value);
        return this;
      }
      public Builder AddPropertyList(global::FrameWork.ClusterProp.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.propertyList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePropertyList(scg::IEnumerable<global::FrameWork.ClusterProp> values) {
        PrepareBuilder();
        result.propertyList_.Add(values);
        return this;
      }
      public Builder ClearPropertyList() {
        PrepareBuilder();
        result.propertyList_.Clear();
        return this;
      }
    }
    static ClusterInfo() {
      object.ReferenceEquals(global::FrameWork.GetClusterListReplyProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetClusterListReply : pb::GeneratedMessage<GetClusterListReply, GetClusterListReply.Builder> {
    private GetClusterListReply() { }
    private static readonly GetClusterListReply defaultInstance = new GetClusterListReply().MakeReadOnly();
    private static readonly string[] _getClusterListReplyFieldNames = new string[] { "cluster_list", "result_code" };
    private static readonly uint[] _getClusterListReplyFieldTags = new uint[] { 18, 8 };
    public static GetClusterListReply DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetClusterListReply DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetClusterListReply ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FrameWork.GetClusterListReplyProto.internal__static_login_proto_GetClusterListReply__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetClusterListReply, GetClusterListReply.Builder> InternalFieldAccessors {
      get { return global::FrameWork.GetClusterListReplyProto.internal__static_login_proto_GetClusterListReply__FieldAccessorTable; }
    }
    
    public const int ResultCodeFieldNumber = 1;
    private bool hasResultCode;
    private global::FrameWork.ResultCode resultCode_ = global::FrameWork.ResultCode.RES_SUCCESS;
    public bool HasResultCode {
      get { return hasResultCode; }
    }
    public global::FrameWork.ResultCode ResultCode {
      get { return resultCode_; }
    }
    
    public const int ClusterListFieldNumber = 2;
    private pbc::PopsicleList<global::FrameWork.ClusterInfo> clusterList_ = new pbc::PopsicleList<global::FrameWork.ClusterInfo>();
    public scg::IList<global::FrameWork.ClusterInfo> ClusterListList {
      get { return clusterList_; }
    }
    public int ClusterListCount {
      get { return clusterList_.Count; }
    }
    public global::FrameWork.ClusterInfo GetClusterList(int index) {
      return clusterList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResultCode) return false;
        foreach (global::FrameWork.ClusterInfo element in ClusterListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getClusterListReplyFieldNames;
      if (hasResultCode) {
        output.WriteEnum(1, field_names[1], (int) ResultCode, ResultCode);
      }
      if (clusterList_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], clusterList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasResultCode) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ResultCode);
        }
        foreach (global::FrameWork.ClusterInfo element in ClusterListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetClusterListReply ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetClusterListReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetClusterListReply ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetClusterListReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetClusterListReply ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetClusterListReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetClusterListReply ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetClusterListReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetClusterListReply ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetClusterListReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetClusterListReply MakeReadOnly() {
      clusterList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetClusterListReply prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetClusterListReply, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetClusterListReply cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetClusterListReply result;
      
      private GetClusterListReply PrepareBuilder() {
        if (resultIsReadOnly) {
          GetClusterListReply original = result;
          result = new GetClusterListReply();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetClusterListReply MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FrameWork.GetClusterListReply.Descriptor; }
      }
      
      public override GetClusterListReply DefaultInstanceForType {
        get { return global::FrameWork.GetClusterListReply.DefaultInstance; }
      }
      
      public override GetClusterListReply BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetClusterListReply) {
          return MergeFrom((GetClusterListReply) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetClusterListReply other) {
        if (other == global::FrameWork.GetClusterListReply.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResultCode) {
          ResultCode = other.ResultCode;
        }
        if (other.clusterList_.Count != 0) {
          result.clusterList_.Add(other.clusterList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getClusterListReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getClusterListReplyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.resultCode_, out unknown)) {
                result.hasResultCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.clusterList_, global::FrameWork.ClusterInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResultCode {
       get { return result.hasResultCode; }
      }
      public global::FrameWork.ResultCode ResultCode {
        get { return result.ResultCode; }
        set { SetResultCode(value); }
      }
      public Builder SetResultCode(global::FrameWork.ResultCode value) {
        PrepareBuilder();
        result.hasResultCode = true;
        result.resultCode_ = value;
        return this;
      }
      public Builder ClearResultCode() {
        PrepareBuilder();
        result.hasResultCode = false;
        result.resultCode_ = global::FrameWork.ResultCode.RES_SUCCESS;
        return this;
      }
      
      public pbc::IPopsicleList<global::FrameWork.ClusterInfo> ClusterListList {
        get { return PrepareBuilder().clusterList_; }
      }
      public int ClusterListCount {
        get { return result.ClusterListCount; }
      }
      public global::FrameWork.ClusterInfo GetClusterList(int index) {
        return result.GetClusterList(index);
      }
      public Builder SetClusterList(int index, global::FrameWork.ClusterInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.clusterList_[index] = value;
        return this;
      }
      public Builder SetClusterList(int index, global::FrameWork.ClusterInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.clusterList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddClusterList(global::FrameWork.ClusterInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.clusterList_.Add(value);
        return this;
      }
      public Builder AddClusterList(global::FrameWork.ClusterInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.clusterList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeClusterList(scg::IEnumerable<global::FrameWork.ClusterInfo> values) {
        PrepareBuilder();
        result.clusterList_.Add(values);
        return this;
      }
      public Builder ClearClusterList() {
        PrepareBuilder();
        result.clusterList_.Clear();
        return this;
      }
    }
    static GetClusterListReply() {
      object.ReferenceEquals(global::FrameWork.GetClusterListReplyProto.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
